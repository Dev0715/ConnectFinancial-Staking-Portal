{
  "address": "0x8B3f12E6331f48d41CDAC6a6A2DDDD7853C6B26e",
  "abi": [],
  "transactionHash": "0xb2f74879151e7885299ae2a67fc375b50a4364652636821a97ecc6e0ebd676c1",
  "receipt": {
    "to": null,
    "from": "0xc3A48cbB98C755D5E535b36276122d936b487aD9",
    "contractAddress": "0x8B3f12E6331f48d41CDAC6a6A2DDDD7853C6B26e",
    "transactionIndex": 0,
    "gasUsed": "1163024",
    "logsBloom": "0x
    "blockHash": "0x913f4a8ae650ac4c34a6e6fb3f2cc0640ec3b7a7cd9f05dd8ffc4db1574fd2fb",
    "transactionHash": "0xb2f74879151e7885299ae2a67fc375b50a4364652636821a97ecc6e0ebd676c1",
    "logs": [],
    "blockNumber": 5259913,
    "cumulativeGasUsed": "1163024",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b5b584cd1a1b7c3d2de62581c8a68994",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/redeploy/StakingRedeployLib.sol\":\"StakingRedeployLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connectfinancial/connect-token/contracts/interfaces/ICNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICNFI is IERC20 {\\n  function mint(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe15492862c24c5391e87e6925aec6b0ae5cbe3b5fa1fcc24c7594f1a270a5178\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/interfaces/IStakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IStakingController {\\n  function receiveCallback(address sender, address receiver) external;\\n}\\n\",\"keccak256\":\"0xf3d17c9ee9a94ea3a62c4ee1082ffccec87f53b3d95f1a78de5bca6beb970c9e\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/staking/StakingControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { CNFITreasury } from \\\"../treasury/CNFITreasury.sol\\\";\\nimport { ICNFI } from \\\"../interfaces/ICNFI.sol\\\";\\nimport { pCNFI } from \\\"../token/pCNFI.sol\\\";\\nimport { sCNFI } from \\\"../token/sCNFI.sol\\\";\\n\\ncontract StakingControllerLib {\\n    struct Isolate {\\n      uint256 currentCycle;\\n      CNFITreasury cnfiTreasury;\\n      ICNFI cnfi;\\n      sCNFI sCnfi;\\n      pCNFI pCnfi;\\n      uint256 nextCycleTime;\\n      uint256 cycleInterval;\\n      uint256 nextTimestamp;\\n      uint256 inflateBy;\\n      uint256 inflatepcnfiBy;\\n      uint256 rewardInterval;\\n      uint256 tiersLength;\\n      uint256 baseUnstakePenalty;\\n      uint256 commitmentViolationPenalty;\\n      uint256 totalWeight;\\n      uint256 lastTotalWeight;\\n      uint256 cumulativeTotalWeight;\\n      mapping(uint256 => StakingControllerLib.Cycle) cycles;\\n      mapping(uint256 => StakingControllerLib.Tier) tiers;\\n      mapping(address => uint256) lockCommitments;\\n      mapping(address => uint256) bonusesAccrued;\\n      mapping(address => uint256) dailyBonusesAccrued;\\n      mapping(address => StakingControllerLib.UserWeightChanges) weightChanges;\\n      mapping(address => StakingControllerLib.DailyUser) dailyUsers;\\n      uint256[] inflateByChanged;\\n      mapping(uint256 => StakingControllerLib.InflateByChanged) inflateByValues;\\n      address pCnfiImplementation;\\n      uint256 currentDay;\\n    }\\n    struct User {\\n        uint256 currentWeight;\\n        uint256 minimumWeight;\\n        uint256 dailyWeight;\\n        uint256 multiplier;\\n        uint256 redeemable;\\n        uint256 daysClaimed;\\n        uint256 start;\\n        bool seen;\\n        uint256 currentTier;\\n        uint256 cyclesHeld;\\n    }\\n    struct DailyUser {\\n        uint256 multiplier;\\n        uint256 cycleEnd;\\n        uint256 cyclesHeld;\\n        uint256 redeemable;\\n        uint256 start;\\n        uint256 weight;\\n        uint256 claimed;\\n        uint256 commitment;\\n        uint256 lastDaySeen;\\n        uint256 cumulativeTotalWeight;\\n        uint256 cumulativeRewardWeight;\\n        uint256 lastTotalWeight;\\n        uint256 currentTier;\\n    }\\n    struct DetermineMultiplierLocals {\\n        uint256 scnfiBalance;\\n        uint256 minimum;\\n        uint256 tierIndex;\\n        Tier tier;\\n        uint256 cyclesHeld;\\n        uint256 multiplier;\\n    }\\n    struct DetermineRewardLocals {\\n        uint256 lastDaySeen;\\n        uint256 redeemable;\\n        uint256 totalWeight;\\n        uint256 multiplier;\\n        uint256 weight;\\n        uint256 rawWeight;\\n        uint256 totalRawWeight;\\n    }\\n    struct ReturnStats {\\n        uint256 lockCommitment;\\n        uint256 totalStakedInProtocol;\\n        uint256 cnfiReleasedPerDay;\\n        uint256 staked;\\n        uint256 currentCnfiBalance;\\n        uint256 unstakePenalty;\\n        uint256 redeemable;\\n        uint256 bonuses;\\n        uint256 apy;\\n        uint256 commitmentViolationPenalty;\\n        uint256 basePenalty;\\n        uint256 totalWeight;\\n        uint256 cycleChange;\\n        uint256 totalCyclesSeen;\\n    }\\n    struct Cycle {\\n        uint256 totalWeight;\\n        uint256 totalRawWeight;\\n        address pCnfiToken;\\n        uint256 reserved;\\n        uint256 day;\\n        uint256 inflateBy;\\n        mapping(address => User) users;\\n        mapping(uint256 => uint256) cnfiRewards;\\n        mapping(uint256 => uint256) pcnfiRewards;\\n        bool canUnstake;\\n    }\\n    struct Tier {\\n        uint256 multiplier;\\n        uint256 minimum;\\n        uint256 cycles;\\n    }\\n    struct EncodeableCycle {\\n        uint256 totalWeight;\\n        uint256 totalRawWeight;\\n        address pCnfiToken;\\n        uint256 reserved;\\n        uint256 day;\\n        bool canUnstake;\\n        uint256 lastCycleSeen;\\n        uint256 currentCycle;\\n    }\\n    struct UpdateLocals {\\n        uint256 multiplier;\\n        uint256 weight;\\n        uint256 prevMul;\\n        uint256 prevRes;\\n        uint256 prevRawRes;\\n        uint256 nextRes;\\n        uint256 nextRawRes;\\n    }\\n    struct RecalculateLocals {\\n        uint256 currentWeight;\\n        uint256 previousMultiplier;\\n        uint256 previousMinimumWeight;\\n        uint256 previousTotalWeight;\\n        uint256 totalInflated;\\n        uint256 daysToRedeem;\\n        uint256 previousRedeemable;\\n        uint256 amt;\\n        uint256 bonus;\\n        uint256 minimumWeight;\\n        uint256 multiplier;\\n        uint256 currentTotalWeight;\\n    }\\n    struct InflateByChanged {\\n        uint256 totalWeight;\\n        uint256 previousAmount;\\n    }\\n    struct DetermineInflateLocals {\\n        uint256 totalWeight;\\n        uint256 lastDaySeen;\\n        uint256 dayDifference;\\n        InflateByChanged changed;\\n        uint256 tempRedeemable;\\n        uint256 redeemable;\\n        uint256 daysToClaim;\\n        uint256 lastDayInEpoch;\\n        uint256 dayChanged;\\n        uint256 tempBonus;\\n        uint256 lastDayChanged;\\n    }\\n    struct UserWeightChanges {\\n        mapping(uint256 => uint256) changes;\\n        uint256 totalCyclesSeen;\\n    }\\n}\\n\",\"keccak256\":\"0x605911f49ec1fd7889a7d79e7c1a67fddbbd3206c71d926862501a441ed69800\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/token/lib/pCNFILib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { StringLib } from '../../util/StringLib.sol';\\nimport { IStakingController } from '../../interfaces/IStakingController.sol';\\n\\nlibrary pCNFILib {\\n  using StringLib for *;\\n\\n  function toSymbol(uint256 cycle) internal pure returns (string memory) {\\n    return abi.encodePacked('pCNFI', cycle.toString()).toString();\\n  }\\n\\n  function toName(uint256 cycle) internal pure returns (string memory) {\\n    return abi.encodePacked('pCNFI Cycle ', cycle.toString()).toString();\\n  }\\n}\\n\",\"keccak256\":\"0x67236aa3de34ee2eb87c2dbe1186a6319f20a00b88ae50472eeeb71a5cc6301f\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/token/pCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n  ERC20Upgradeable\\n} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport { StringUtils } from '../util/Strings.sol';\\nimport {\\n  OwnableUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { pCNFILib } from './lib/pCNFILib.sol';\\n\\ncontract pCNFI is ERC20Upgradeable, OwnableUpgradeable {\\n  using StringUtils for *;\\n\\n  function initialize(uint256 cycle) public initializer {\\n    __ERC20_init_unchained(pCNFILib.toName(cycle), pCNFILib.toSymbol(cycle));\\n    __Ownable_init_unchained();\\n  }\\n\\n  function mint(address target, uint256 amount) public onlyOwner {\\n    _mint(target, amount);\\n  }\\n\\n  function burn(address target, uint256 amount) public onlyOwner {\\n    _burn(target, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x993b17a5eaabf5c8be4eac35c8fd1604725c3b9d784927e5392119be2610ed3c\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/token/sCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract sCNFI is ERC20Upgradeable, OwnableUpgradeable {\\n  function initialize() public initializer {\\n    __ERC20_init_unchained(\\\"Connect Financial Staking\\\", \\\"sCNFI\\\");\\n    __Ownable_init_unchained();\\n  }\\n\\n  function mint(address target, uint256 amount) public onlyOwner {\\n    _mint(target, amount);\\n  }\\n\\n  function burn(address target, uint256 amount) public onlyOwner {\\n    _burn(target, amount);\\n  }\\n\\n  function transfer(address target, uint256 amount)\\n    public\\n    override\\n    onlyOwner\\n    returns (bool)\\n  {\\n    return super.transfer(target, amount);\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public override onlyOwner returns (bool) {\\n    return super.transferFrom(from, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x7c9736aa37156ba520d96c414cae0e2dbc2f7715a01a8df98b75215fc5a45939\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/treasury/CNFITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    IERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract CNFITreasury is OwnableUpgradeable {\\n    address relayer;\\n    modifier onlyRelayer {\\n        require(msg.sender == owner() || msg.sender == relayer, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function initialize(address _relayer) public {\\n        __Ownable_init_unchained();\\n        relayer = _relayer;\\n    }\\n\\n    function transferToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public onlyRelayer returns (bool) {\\n        IERC20Upgradeable(token).transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7126ea146f00fd43f27962278a07e7d3b416c20ab43e051ef6254a81138fd438\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/util/StringLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary StringLib {\\n  /// @notice Convert a uint value to its decimal string representation\\n  // solium-disable-next-line security/no-assign-params\\n  function toString(uint256 _i) internal pure returns (string memory) {\\n    if (_i == 0) {\\n      return '0';\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len - 1;\\n    while (_i != 0) {\\n      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  /// @notice Convert a bytes32 value to its hex string representation\\n  function toString(bytes32 _value) internal pure returns (string memory) {\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(32 * 2 + 2);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint256 i = 0; i < 32; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  /// @notice Convert an address to its hex string representation\\n  function toString(address _addr) internal pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(_addr));\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(20 * 2 + 2);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint256 i = 0; i < 20; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function toString(bytes memory input) internal pure returns (string memory) {\\n    return string(input);\\n  }\\n}\\n\",\"keccak256\":\"0xf3de8e92404406402090d77aee66a83216e7d2e4b0a618791f0126207020189d\",\"license\":\"MIT\"},\"@connectfinancial/connect-token/contracts/util/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\n\\npragma solidity ^0.6.0;\\n\\nlibrary StringUtils {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the length of a null-terminated bytes32 string.\\n     * @param self The value to find the length of.\\n     * @return The length of the string, from 0 to 32.\\n     */\\n    function len(bytes32 self) internal pure returns (uint) {\\n        uint ret;\\n        if (self == 0)\\n            return 0;\\n        if (self & bytes32(uint256(0xffffffffffffffffffffffffffffffff)) == 0) {\\n            ret += 16;\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\n        }\\n        if (self & bytes32(uint256(0xffffffffffffffff)) == 0) {\\n            ret += 8;\\n            self = bytes32(uint(self) / 0x10000000000000000);\\n        }\\n        if (self & bytes32(uint256(0xffffffff)) == 0) {\\n            ret += 4;\\n            self = bytes32(uint(self) / 0x100000000);\\n        }\\n        if (self & bytes32(uint256(0xffff)) == 0) {\\n            ret += 2;\\n            self = bytes32(uint(self) / 0x10000);\\n        }\\n        if (self & bytes32(uint256(0xff)) == 0) {\\n            ret += 1;\\n        }\\n        return 32 - ret;\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\n     *      null-terminated utf-8 string.\\n     * @param self The bytes32 value to convert to a slice.\\n     * @return A new slice containing the value of the input argument up to the\\n     *         first null.\\n     */\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, 0x20))\\n            mstore(ptr, self)\\n            mstore(add(ret, 0x20), ptr)\\n        }\\n        ret._len = len(self);\\n    }\\n\\n    /*\\n     * @dev Returns a new slice containing the same data as the current slice.\\n     * @param self The slice to copy.\\n     * @return A new slice containing the same data as `self`.\\n     */\\n    function copy(slice memory self) internal pure returns (slice memory) {\\n        return slice(self._len, self._ptr);\\n    }\\n\\n    /*\\n     * @dev Copies a slice to a new string.\\n     * @param self The slice to copy.\\n     * @return A newly allocated string containing the slice's text.\\n     */\\n    function toString(slice memory self) internal pure returns (string memory) {\\n        string memory ret = new string(self._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        memcpy(retptr, self._ptr, self._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the length in runes of the slice. Note that this operation\\n     *      takes time proportional to the length of the slice; avoid using it\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\n     *      the slice is empty or not.\\n     * @param self The slice to operate on.\\n     * @return The length of the slice in runes.\\n     */\\n    function len(slice memory self) internal pure returns (uint l) {\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\n        uint ptr = self._ptr - 31;\\n        uint end = ptr + self._len;\\n        for (l = 0; ptr < end; l++) {\\n            uint8 b;\\n            assembly { b := and(mload(ptr), 0xFF) }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if(b < 0xE0) {\\n                ptr += 2;\\n            } else if(b < 0xF0) {\\n                ptr += 3;\\n            } else if(b < 0xF8) {\\n                ptr += 4;\\n            } else if(b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first slice to compare.\\n     * @param other The second slice to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\n        uint shortest = self._len;\\n        if (other._len < self._len)\\n            shortest = other._len;\\n\\n        uint selfptr = self._ptr;\\n        uint otherptr = other._ptr;\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            uint a;\\n            uint b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask = uint256(-1); // 0xffff...\\n                if(shortest < 32) {\\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\n                }\\n                uint256 diff = (a & mask) - (b & mask);\\n                if (diff != 0)\\n                    return int(diff);\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n        return int(self._len) - int(other._len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two slices contain the same text.\\n     * @param self The first slice to compare.\\n     * @param self The second slice to compare.\\n     * @return True if the slices are equal, false otherwise.\\n     */\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\n        return compare(self, other) == 0;\\n    }\\n\\n    /*\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\n     *      slice to point to the next rune and returning `self`.\\n     * @param self The slice to operate on.\\n     * @param rune The slice that will contain the first rune.\\n     * @return `rune`.\\n     */\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\n        rune._ptr = self._ptr;\\n\\n        if (self._len == 0) {\\n            rune._len = 0;\\n            return rune;\\n        }\\n\\n        uint l;\\n        uint b;\\n        // Load the first byte of the rune into the LSBs of b\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\n        if (b < 0x80) {\\n            l = 1;\\n        } else if(b < 0xE0) {\\n            l = 2;\\n        } else if(b < 0xF0) {\\n            l = 3;\\n        } else {\\n            l = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (l > self._len) {\\n            rune._len = self._len;\\n            self._ptr += self._len;\\n            self._len = 0;\\n            return rune;\\n        }\\n\\n        self._ptr += l;\\n        self._len -= l;\\n        rune._len = l;\\n        return rune;\\n    }\\n\\n    /*\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\n     *      to the next rune.\\n     * @param self The slice to operate on.\\n     * @return A slice containing only the first rune from `self`.\\n     */\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\n        nextRune(self, ret);\\n    }\\n\\n    /*\\n     * @dev Returns the number of the first codepoint in the slice.\\n     * @param self The slice to operate on.\\n     * @return The number of the first codepoint in the slice.\\n     */\\n    function ord(slice memory self) internal pure returns (uint ret) {\\n        if (self._len == 0) {\\n            return 0;\\n        }\\n\\n        uint word;\\n        uint length;\\n        uint divisor = 2 ** 248;\\n\\n        // Load the rune into the MSBs of b\\n        assembly { word:= mload(mload(add(self, 32))) }\\n        uint b = word / divisor;\\n        if (b < 0x80) {\\n            ret = b;\\n            length = 1;\\n        } else if(b < 0xE0) {\\n            ret = b & 0x1F;\\n            length = 2;\\n        } else if(b < 0xF0) {\\n            ret = b & 0x0F;\\n            length = 3;\\n        } else {\\n            ret = b & 0x07;\\n            length = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (length > self._len) {\\n            return 0;\\n        }\\n\\n        for (uint i = 1; i < length; i++) {\\n            divisor = divisor / 256;\\n            b = (word / divisor) & 0xFF;\\n            if (b & 0xC0 != 0x80) {\\n                // Invalid UTF-8 sequence\\n                return 0;\\n            }\\n            ret = (ret * 64) | (b & 0x3F);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if `self` starts with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        if (self._ptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let selfptr := mload(add(self, 0x20))\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        bool equal = true;\\n        if (self._ptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let selfptr := mload(add(self, 0x20))\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n            self._ptr += needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice ends with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n\\n        if (selfptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\n     *      end of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n        bool equal = true;\\n        if (selfptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    // Returns the memory address of the first byte of the first occurrence of\\n    // `needle` in `self`, or the first byte after `self` if not found.\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr = selfptr;\\n        uint idx;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                uint end = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr >= end)\\n                        return selfptr + selflen;\\n                    ptr++;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr;\\n                    ptr += 1;\\n                }\\n            }\\n        }\\n        return selfptr + selflen;\\n    }\\n\\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\n     *      if `needle` is not found.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len -= ptr - self._ptr;\\n        self._ptr = ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain the part of the string from the start of\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\n     *      is not found, `self` is set to the empty slice.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len = ptr - self._ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and `token` to everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = self._ptr;\\n        token._len = ptr - self._ptr;\\n        if (ptr == self._ptr + self._len) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n            self._ptr = ptr + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and returning everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` up to the first occurrence of `delim`.\\n     */\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        split(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and returning everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` after the last occurrence of `delim`.\\n     */\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        rsplit(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return The number of occurrences of `needle` found in `self`.\\n     */\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\n        while (ptr <= self._ptr + self._len) {\\n            cnt++;\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns True if `self` contains `needle`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return True if `needle` is found in `self`, false otherwise.\\n     */\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n     *      newly allocated string.\\n     * @param self The delimiter to use.\\n     * @param parts A list of slices to join.\\n     * @return A newly allocated string containing all the slices in `parts`,\\n     *         joined with `self`.\\n     */\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\n        if (parts.length == 0)\\n            return \\\"\\\";\\n\\n        uint length = self._len * (parts.length - 1);\\n        for(uint i = 0; i < parts.length; i++)\\n            length += parts[i]._len;\\n\\n        string memory ret = new string(length);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        for(uint i = 0; i < parts.length; i++) {\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n            retptr += parts[i]._len;\\n            if (i < parts.length - 1) {\\n                memcpy(retptr, self._ptr, self._len);\\n                retptr += self._len;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n    // convert uint to string\\n    function toString(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint256 k = length - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x367c2e4919ce03e10f8167ad9389bfbbed1b5eaa1cd25b35104b58a62b4d891c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/ETLLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity >=0.6.0;\\n\\nimport {StakingControllerLib} from \\\"@connectfinancial/connect-token/contracts/staking/StakingControllerLib.sol\\\";\\nimport {CNFITreasury} from \\\"@connectfinancial/connect-token/contracts/treasury/CNFITreasury.sol\\\";\\nimport {ICNFI} from \\\"@connectfinancial/connect-token/contracts/interfaces/ICNFI.sol\\\";\\nimport {sCNFI} from \\\"@connectfinancial/connect-token/contracts/token/sCNFI.sol\\\";\\nimport {pCNFI} from \\\"@connectfinancial/connect-token/contracts/token/pCNFI.sol\\\";\\n\\nlibrary ETLLib {\\n  struct IsolateView {\\n    uint256 currentCycle;\\n    CNFITreasury cnfiTreasury;\\n    ICNFI cnfi;\\n    sCNFI sCnfi;\\n    pCNFI pCnfi;\\n    uint256 nextCycleTime;\\n    uint256 cycleInterval;\\n    uint256 nextTimestamp;\\n    uint256 inflateBy;\\n    uint256 inflatepcnfiBy;\\n    uint256 rewardInterval;\\n    uint256 tiersLength;\\n    uint256 baseUnstakePenalty;\\n    uint256 commitmentViolationPenalty;\\n    uint256 totalWeight;\\n    uint256 lastTotalWeight;\\n    uint256 cumulativeTotalWeight;\\n    address pCnfiImplementation;\\n    uint256 currentDay;\\n    CycleView[] cycles;\\n  }\\n  struct CycleView {\\n    uint256 totalWeight;\\n    uint256 totalRawWeight;\\n    address pCnfiToken;\\n    uint256 reserved;\\n    uint256 day;\\n    uint256 inflateBy;\\n    bool canUnstake;\\n  }\\n  struct UserView {\\n    StakingControllerLib.User[] user;\\n    StakingControllerLib.DailyUser dailyUser;\\n    uint256[] weightChanges;\\n    uint256 dailyBonusesAccrued;\\n    uint256 bonusesAccrued;\\n    uint256 lockCommitment;\\n    address userAddress;\\n    uint256 scnfiBalance;\\n  }\\n  struct ETLViewResult {\\n    IsolateView isolate;\\n    UserView[] users;\\n  }\\n\\n  function getCycle(StakingControllerLib.Isolate storage isolate, uint256 i)\\n    internal\\n    view\\n    returns (CycleView memory)\\n  {\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[i];\\n    return\\n      CycleView({\\n        totalWeight: cycle.totalWeight,\\n        totalRawWeight: cycle.totalRawWeight,\\n        pCnfiToken: cycle.pCnfiToken,\\n        reserved: cycle.reserved,\\n        day: cycle.day,\\n        inflateBy: cycle.inflateBy,\\n        canUnstake: cycle.canUnstake\\n      });\\n  }\\n\\n  function getCycles(StakingControllerLib.Isolate storage isolate)\\n    internal\\n    view\\n    returns (CycleView[] memory result)\\n  {\\n    result = new CycleView[](isolate.currentCycle + 1);\\n    for (uint256 i = 0; i < result.length; i++) {\\n      result[i] = getCycle(isolate, i);\\n    }\\n  }\\n\\n  function getDailyUser(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) internal view returns (StakingControllerLib.DailyUser memory) {\\n    return isolate.dailyUsers[user];\\n  }\\n\\n  function getCycleUser(\\n    StakingControllerLib.Isolate storage isolate,\\n    uint256 i,\\n    address user\\n  ) internal view returns (StakingControllerLib.User memory) {\\n    return isolate.cycles[i].users[user];\\n  }\\n\\n  function getUserWeightChanges(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) internal view returns (uint256[] memory result) {\\n    StakingControllerLib.UserWeightChanges storage weightChanges = isolate\\n      .weightChanges[user];\\n    result = new uint256[](weightChanges.totalCyclesSeen);\\n    for (uint256 i = 0; i < result.length; i++) {\\n      result[i] = weightChanges.changes[i];\\n    }\\n  }\\n\\n  function getUserCycles(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) internal view returns (StakingControllerLib.User[] memory result) {\\n    CycleView[] memory cycles = getCycles(isolate);\\n    result = new StakingControllerLib.User[](cycles.length);\\n    for (uint256 i = 0; i < cycles.length; i++) {\\n      result[i] = getCycleUser(isolate, i, user);\\n    }\\n  }\\n\\n  function getUser(StakingControllerLib.Isolate storage isolate, address user)\\n    internal\\n    view\\n    returns (UserView memory userView)\\n  {\\n    userView.user = getUserCycles(isolate, user);\\n    userView.dailyUser = getDailyUser(isolate, user);\\n    userView.weightChanges = getUserWeightChanges(isolate, user);\\n    userView.dailyBonusesAccrued = isolate.dailyBonusesAccrued[user];\\n    userView.bonusesAccrued = isolate.bonusesAccrued[user];\\n    userView.lockCommitment = isolate.lockCommitments[user];\\n    userView.userAddress = user;\\n    userView.scnfiBalance = isolate.sCnfi.balanceOf(user);\\n  }\\n\\n  function getInflateByChanged(StakingControllerLib.Isolate storage isolate)\\n    internal\\n    view\\n    returns (uint256[] memory result)\\n  {\\n    result = new uint256[](isolate.inflateByChanged.length);\\n    for (uint256 i = 0; i < result.length; i++) {\\n      result[i] = isolate.inflateByChanged[i];\\n    }\\n  }\\n\\n  function getView(\\n    StakingControllerLib.Isolate storage isolate,\\n    address[] memory users\\n  ) internal view returns (ETLViewResult memory result) {\\n    //    result.isolate = getIsolateView(isolate);\\n    result.users = new UserView[](users.length);\\n    for (uint256 i = 0; i < result.users.length; i++) {\\n      result.users[i] = getUser(isolate, users[i]);\\n    }\\n  }\\n\\n  function getIsolateView(StakingControllerLib.Isolate storage isolate)\\n    internal\\n    view\\n    returns (IsolateView memory)\\n  {\\n    return\\n      IsolateView({\\n        currentCycle: isolate.currentCycle,\\n        cnfiTreasury: isolate.cnfiTreasury,\\n        cnfi: isolate.cnfi,\\n        sCnfi: isolate.sCnfi,\\n        pCnfi: isolate.pCnfi,\\n        nextCycleTime: isolate.nextCycleTime,\\n        cycleInterval: isolate.cycleInterval,\\n        nextTimestamp: isolate.nextTimestamp,\\n        inflateBy: isolate.inflateBy,\\n        inflatepcnfiBy: isolate.inflatepcnfiBy,\\n        rewardInterval: isolate.rewardInterval,\\n        tiersLength: isolate.tiersLength,\\n        baseUnstakePenalty: isolate.baseUnstakePenalty,\\n        commitmentViolationPenalty: isolate.commitmentViolationPenalty,\\n        totalWeight: isolate.totalWeight,\\n        lastTotalWeight: isolate.lastTotalWeight,\\n        cumulativeTotalWeight: isolate.cumulativeTotalWeight,\\n        pCnfiImplementation: isolate.pCnfiImplementation,\\n        currentDay: isolate.currentDay,\\n        cycles: getCycles(isolate)\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xd09eb04bec5ee69128313701472e9e4e5abff6d33101b7a480e2f25b50d3d385\",\"license\":\"MIT\"},\"contracts/redeploy/StakingRedeployLib.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\nimport {ETLLib} from \\\"../ETLLib.sol\\\";\\nimport {StakingControllerLib} from \\\"@connectfinancial/connect-token/contracts/staking/StakingControllerLib.sol\\\";\\n\\nlibrary StakingRedeployLib {\\n  function redeploy(\\n    StakingControllerLib.Isolate storage isolate,\\n    ETLLib.UserView[] memory users\\n  ) external {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      ETLLib.UserView memory _view = users[i];\\n      restoreDailyUser(isolate.dailyUsers[_view.userAddress], _view.dailyUser);\\n      isolate.bonusesAccrued[_view.userAddress] = _view.bonusesAccrued;\\n      isolate.lockCommitments[_view.userAddress] = _view.lockCommitment;\\n      isolate.dailyBonusesAccrued[_view.userAddress] = _view\\n        .dailyBonusesAccrued;\\n      isolate.sCnfi.mint(_view.userAddress, _view.scnfiBalance);\\n      for (uint256 j = 0; j < _view.user.length; j++)\\n        redeployUserCycle(isolate, _view.userAddress, j, _view.user[j]);\\n      isolate.weightChanges[_view.userAddress].totalCyclesSeen = _view\\n        .weightChanges\\n        .length;\\n      for (uint256 j = 0; j < _view.weightChanges.length; j++) {\\n        isolate.weightChanges[_view.userAddress].changes[j] = _view\\n          .weightChanges[j];\\n      }\\n    }\\n  }\\n\\n  function restoreDailyUser(\\n    StakingControllerLib.DailyUser storage user,\\n    StakingControllerLib.DailyUser memory _user\\n  ) internal {\\n    user.multiplier = _user.multiplier;\\n    user.cycleEnd = _user.cycleEnd;\\n    user.cyclesHeld = _user.cyclesHeld;\\n    user.redeemable = _user.redeemable;\\n    user.start = _user.start;\\n    user.weight = _user.weight;\\n    user.claimed = _user.claimed;\\n    user.commitment = _user.commitment;\\n    user.lastDaySeen = _user.lastDaySeen;\\n    user.cumulativeTotalWeight = _user.cumulativeTotalWeight;\\n    user.cumulativeRewardWeight = _user.cumulativeRewardWeight;\\n    user.lastTotalWeight = _user.lastTotalWeight;\\n    user.currentTier = _user.currentTier;\\n  }\\n\\n  function redeployUserCycle(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user,\\n    uint256 i,\\n    StakingControllerLib.User memory _user\\n  ) internal {\\n    restoreUser(isolate.cycles[i].users[user], _user);\\n  }\\n\\n  function restoreUser(\\n    StakingControllerLib.User storage user,\\n    StakingControllerLib.User memory _user\\n  ) internal {\\n    user.currentWeight = _user.currentWeight;\\n    user.minimumWeight = _user.minimumWeight;\\n    user.dailyWeight = _user.dailyWeight;\\n    user.multiplier = _user.multiplier;\\n    user.redeemable = _user.redeemable;\\n    user.daysClaimed = _user.daysClaimed;\\n    user.start = _user.start;\\n    user.seen = _user.seen;\\n    user.currentTier = _user.currentTier;\\n    user.cyclesHeld = _user.cyclesHeld;\\n  }\\n\\n  function restoreCycles(\\n    StakingControllerLib.Isolate storage isolate,\\n    ETLLib.CycleView[] memory cycles\\n  ) internal {\\n    for (uint256 i = 0; i < cycles.length; i++) {\\n      StakingControllerLib.Cycle storage _cycle = isolate.cycles[i];\\n      ETLLib.CycleView memory cycle = cycles[i];\\n      _cycle.totalWeight = cycle.totalWeight;\\n      _cycle.totalRawWeight = cycle.totalRawWeight;\\n      _cycle.pCnfiToken = cycle.pCnfiToken;\\n      _cycle.reserved = cycle.reserved;\\n      _cycle.day = cycle.day;\\n      _cycle.inflateBy = cycle.inflateBy;\\n      _cycle.canUnstake = cycle.canUnstake;\\n    }\\n  }\\n\\n  function redeployState(\\n    StakingControllerLib.Isolate storage isolate,\\n    ETLLib.IsolateView memory isolateView\\n  ) external {\\n    isolate.currentCycle = isolateView.currentCycle;\\n    isolate.nextCycleTime = isolateView.nextCycleTime;\\n    isolate.cycleInterval = isolateView.cycleInterval;\\n    isolate.nextTimestamp = isolateView.nextTimestamp;\\n    isolate.inflateBy = isolateView.inflateBy;\\n    isolate.inflatepcnfiBy = isolateView.inflatepcnfiBy;\\n    isolate.rewardInterval = isolateView.rewardInterval;\\n    isolate.tiersLength = isolateView.tiersLength;\\n    isolate.baseUnstakePenalty = isolateView.baseUnstakePenalty;\\n    isolate.commitmentViolationPenalty = isolateView.commitmentViolationPenalty;\\n    isolate.totalWeight = isolateView.totalWeight;\\n    isolate.lastTotalWeight = isolateView.lastTotalWeight;\\n    isolate.cumulativeTotalWeight = isolateView.cumulativeTotalWeight;\\n    isolate.currentDay = isolateView.currentDay;\\n    restoreCycles(isolate, isolateView.cycles);\\n  }\\n}\\n\",\"keccak256\":\"0x1aa2fec88fef158058e3c0f1c979c2db1acb86450bdbaf95ed0a8412bb884b47\"}},\"version\":1}",
  "bytecode": "0x611417610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806361ad6fd014610045578063b7e2b4241461006e575b600080fd5b81801561005157600080fd5b5061006c60048036038101906100679190611127565b610097565b005b81801561007a57600080fd5b50610095600480360381019061009091906110d3565b61016a565b005b806000015182600001819055508060a0015182600501819055508060c0015182600601819055508060e0015182600701819055508061010001518260080181905550806101200151826009018190555080610140015182600a018190555080610160015182600b018190555080610180015182600c0181905550806101a0015182600d0181905550806101c0015182600e0181905550806101e0015182600f0181905550806102000151826010018190555080610240015182601b0181905550610166828261026001516104a6565b5050565b60005b81518110156104a15761017e610756565b82828151811061018a57fe5b602002602001015190506101e68460170160008360c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082602001516105a5565b80608001518460140160008360c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060a001518460130160008360c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606001518460150160008360c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f198260c001518360e001516040518363ffffffff1660e01b8152600401610337929190611199565b600060405180830381600087803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b5050505060005b8160000151518110156103ad576103a0858360c00151838560000151858151811061039357fe5b6020026020010151610657565b808060010191505061036c565b508060400151518460160160008360c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060005b816040015151811015610492578160400151818151811061042057fe5b60200260200101518560160160008460c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000838152602001908152602001600020819055508080600101915050610403565b5050808060010191505061016d565b505050565b60005b81518110156105a057600083601101600083815260200190815260200160002090506104d36107b7565b8383815181106104df57fe5b60200260200101519050806000015182600001819055508060200151826001018190555080604001518260020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080606001518260030181905550806080015182600401819055508060a0015182600501819055508060c001518260090160006101000a81548160ff021916908315150217905550505080806001019150506104a9565b505050565b80600001518260000181905550806020015182600101819055508060400151826002018190555080606001518260030181905550806080015182600401819055508060a0015182600501819055508060c0015182600601819055508060e0015182600701819055508061010001518260080181905550806101200151826009018190555080610140015182600a018190555080610160015182600b018190555080610180015182600c01819055505050565b6106b584601101600084815260200190815260200160002060060160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826106bb565b50505050565b80600001518260000181905550806020015182600101819055508060400151826002018190555080606001518260030181905550806080015182600401819055508060a0015182600501819055508060c0015182600601819055508060e001518260070160006101000a81548160ff021916908315150217905550806101000151826008018190555080610120015182600901819055505050565b6040518061010001604052806060815260200161077161080c565b815260200160608152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000151581525090565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008135905061088381611329565b92915050565b600082601f83011261089a57600080fd5b81356108ad6108a8826111ef565b6111c2565b915081818352602084019350602081019050838560e08402820111156108d257600080fd5b60005b8381101561090257816108e88882610af1565b845260208401935060e083019250506001810190506108d5565b5050505092915050565b600082601f83011261091d57600080fd5b813561093061092b82611217565b6111c2565b9150818183526020840193506020810190508360005b83811015610976578135860161095c8882610ed0565b845260208401935060208301925050600181019050610946565b5050505092915050565b600082601f83011261099157600080fd5b81356109a461099f8261123f565b6111c2565b91508181835260208401935060208101905083856101408402820111156109ca57600080fd5b60005b838110156109fb57816109e08882610fcc565b845260208401935061014083019250506001810190506109cd565b5050505092915050565b600082601f830112610a1657600080fd5b8135610a29610a2482611267565b6111c2565b91508181835260208401935060208101905083856020840282011115610a4e57600080fd5b60005b83811015610a7e5781610a6488826110be565b845260208401935060208301925050600181019050610a51565b5050505092915050565b600081359050610a9781611340565b92915050565b600081359050610aac81611357565b92915050565b600081359050610ac18161136e565b92915050565b600081359050610ad681611385565b92915050565b600081359050610aeb8161139c565b92915050565b600060e08284031215610b0357600080fd5b610b0d60e06111c2565b90506000610b1d848285016110be565b6000830152506020610b31848285016110be565b6020830152506040610b4584828501610874565b6040830152506060610b59848285016110be565b6060830152506080610b6d848285016110be565b60808301525060a0610b81848285016110be565b60a08301525060c0610b9584828501610a88565b60c08301525092915050565b60006101a08284031215610bb457600080fd5b610bbf6101a06111c2565b90506000610bcf848285016110be565b6000830152506020610be3848285016110be565b6020830152506040610bf7848285016110be565b6040830152506060610c0b848285016110be565b6060830152506080610c1f848285016110be565b60808301525060a0610c33848285016110be565b60a08301525060c0610c47848285016110be565b60c08301525060e0610c5b848285016110be565b60e083015250610100610c70848285016110be565b61010083015250610120610c86848285016110be565b61012083015250610140610c9c848285016110be565b61014083015250610160610cb2848285016110be565b61016083015250610180610cc8848285016110be565b6101808301525092915050565b60006102808284031215610ce857600080fd5b610cf36102806111c2565b90506000610d03848285016110be565b6000830152506020610d1784828501610a9d565b6020830152506040610d2b84828501610ab2565b6040830152506060610d3f84828501610adc565b6060830152506080610d5384828501610ac7565b60808301525060a0610d67848285016110be565b60a08301525060c0610d7b848285016110be565b60c08301525060e0610d8f848285016110be565b60e083015250610100610da4848285016110be565b61010083015250610120610dba848285016110be565b61012083015250610140610dd0848285016110be565b61014083015250610160610de6848285016110be565b61016083015250610180610dfc848285016110be565b610180830152506101a0610e12848285016110be565b6101a0830152506101c0610e28848285016110be565b6101c0830152506101e0610e3e848285016110be565b6101e083015250610200610e54848285016110be565b61020083015250610220610e6a84828501610874565b61022083015250610240610e80848285016110be565b6102408301525061026082013567ffffffffffffffff811115610ea257600080fd5b610eae84828501610889565b6102608301525092915050565b600081359050610eca816113b3565b92915050565b60006102808284031215610ee357600080fd5b610eee6101006111c2565b9050600082013567ffffffffffffffff811115610f0a57600080fd5b610f1684828501610980565b6000830152506020610f2a84828501610ba1565b6020830152506101c082013567ffffffffffffffff811115610f4b57600080fd5b610f5784828501610a05565b6040830152506101e0610f6c848285016110be565b606083015250610200610f81848285016110be565b608083015250610220610f96848285016110be565b60a083015250610240610fab84828501610874565b60c083015250610260610fc0848285016110be565b60e08301525092915050565b60006101408284031215610fdf57600080fd5b610fea6101406111c2565b90506000610ffa848285016110be565b600083015250602061100e848285016110be565b6020830152506040611022848285016110be565b6040830152506060611036848285016110be565b606083015250608061104a848285016110be565b60808301525060a061105e848285016110be565b60a08301525060c0611072848285016110be565b60c08301525060e061108684828501610a88565b60e08301525061010061109b848285016110be565b610100830152506101206110b1848285016110be565b6101208301525092915050565b6000813590506110cd816113ca565b92915050565b600080604083850312156110e657600080fd5b60006110f485828601610ebb565b925050602083013567ffffffffffffffff81111561111157600080fd5b61111d8582860161090c565b9150509250929050565b6000806040838503121561113a57600080fd5b600061114885828601610ebb565b925050602083013567ffffffffffffffff81111561116557600080fd5b61117185828601610cd5565b9150509250929050565b6111848161128f565b82525050565b6111938161131f565b82525050565b60006040820190506111ae600083018561117b565b6111bb602083018461118a565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156111e557600080fd5b8060405250919050565b600067ffffffffffffffff82111561120657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561122e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561125657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561127e57600080fd5b602082029050602081019050919050565b600061129a826112ff565b9050919050565b60008115159050919050565b60006112b88261128f565b9050919050565b60006112ca8261128f565b9050919050565b60006112dc8261128f565b9050919050565b60006112ee8261128f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6113328161128f565b811461133d57600080fd5b50565b611349816112a1565b811461135457600080fd5b50565b611360816112ad565b811461136b57600080fd5b50565b611377816112bf565b811461138257600080fd5b50565b61138e816112d1565b811461139957600080fd5b50565b6113a5816112e3565b81146113b057600080fd5b50565b6113bc816112f5565b81146113c757600080fd5b50565b6113d38161131f565b81146113de57600080fd5b5056fea26469706673582212203e396196def40f9855364c0709357138e7bc6dd78a932d3f8191185298cef87564736f6c634300060c0033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}