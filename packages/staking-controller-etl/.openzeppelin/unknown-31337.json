{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x7dbd46c6694D9001cAFCc38b9aDf5D35B82c5322",
    "txHash": "0xfa4fbd72ce7da9bd59fa98deca36472ef040fbe7468721f77f51a0b9a96a518e",
    "deployTransaction": {
      "hash": "0xfa4fbd72ce7da9bd59fa98deca36472ef040fbe7468721f77f51a0b9a96a518e",
      "type": 2,
      "accessList": [],
      "blockHash": "0x23ae8dd60b0a46532109ca605612bab0cdb1aff7747d859d8905273c1a60f9fa",
      "blockNumber": 5259915,
      "transactionIndex": 0,
      "confirmations": 1,
      "from": "0xc3A48cbB98C755D5E535b36276122d936b487aD9",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x58b74b0a"
      },
      "maxPriorityFeePerGas": {
        "type": "BigNumber",
        "hex": "0x3b9aca00"
      },
      "maxFeePerGas": {
        "type": "BigNumber",
        "hex": "0x75d3cc14"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 6,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x300ba6e35dc5c4a97401d675582b67b2977dda09c1f95974209a0c7f3e4f5238",
      "s": "0x7ab43c1b0c4d410f47130b59682c8f950cab54c7575a4feeaf10d2c3d1870618",
      "v": 0,
      "creates": "0x7dbd46c6694D9001cAFCc38b9aDf5D35B82c5322",
      "chainId": 31337
    }
  },
  "proxies": [
    {
      "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
      "txHash": "0x54efc4e87c8da44c31f60ca4c765bb5710dde55e1dba7a60fd41d30a5871fc38",
      "kind": "transparent"
    },
    {
      "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
      "txHash": "0xb0eaee615111f1dccf446a1067c607009a2d2e60a5681d6a3053381350e3e867",
      "kind": "transparent"
    },
    {
      "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
      "txHash": "0xf8ba2f033d322c0a28c2baaa9b0d4bc43c5a3db70fa4aebf4d22b89a5af17b13",
      "kind": "transparent"
    },
    {
      "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
      "txHash": "0x2d8977c118604cc58826a95c1d92e33eda815ca5cd0ce0d23f17c84062d23fd8",
      "kind": "transparent"
    },
    {
      "address": "0xEf48b35749f2A5526FD30c75683325109fCCD93b",
      "txHash": "0x853605b5c381efdee5f5ec4e464337143ce85c44e8608018f12baccd7e62a8e3",
      "kind": "transparent"
    },
    {
      "address": "0xD67de4335943925902C32a1d1b9dc53019D169B9",
      "txHash": "0x517cf12ca1654ca5ac636d3953084bc421afeebdd87a42299f99aa507cc5ffd6",
      "kind": "transparent"
    },
    {
      "address": "0x1DB2fBF8A71bC92AE0C42fE204787c848Ca14c96",
      "txHash": "0x6fcc328b70c006ff6ae9d4b9cde14fc740913ece29fc1e30e0653a5dd81340ba",
      "kind": "transparent"
    },
    {
      "address": "0xC88DC57429Af1355fE1F155A1c16dA3455056e89",
      "txHash": "0x6b6622b28ee01a04cdbd6181427a6214bd3981cc80258cbf26455ec43a194915",
      "kind": "transparent"
    }
  ],
  "impls": {
    "36a616041106d2bad1cee13a9a343887af181e1ddf02e03146320a6dd9bef7a1": {
      "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
      "txHash": "0x540942530f3ff4e75d6ac3ba03551bedb852c0f6c485087bbea47abff543225f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "StakingControllerTemplate",
            "label": "isolate",
            "type": "t_struct(Isolate)2802_storage",
            "src": "@connectfinancial/connect-token/contracts/staking/StakingControllerTemplate.sol:14"
          }
        ],
        "types": {
          "t_struct(Isolate)2802_storage": {
            "label": "struct StakingControllerLib.Isolate",
            "members": [
              {
                "label": "currentCycle",
                "type": "t_uint256"
              },
              {
                "label": "cnfiTreasury",
                "type": "t_contract(CNFITreasury)6167"
              },
              {
                "label": "cnfi",
                "type": "t_contract(ICNFI)13"
              },
              {
                "label": "sCnfi",
                "type": "t_contract(sCNFI)6103"
              },
              {
                "label": "pCnfi",
                "type": "t_contract(pCNFI)6009"
              },
              {
                "label": "nextCycleTime",
                "type": "t_uint256"
              },
              {
                "label": "cycleInterval",
                "type": "t_uint256"
              },
              {
                "label": "nextTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "inflateBy",
                "type": "t_uint256"
              },
              {
                "label": "inflatepcnfiBy",
                "type": "t_uint256"
              },
              {
                "label": "rewardInterval",
                "type": "t_uint256"
              },
              {
                "label": "tiersLength",
                "type": "t_uint256"
              },
              {
                "label": "baseUnstakePenalty",
                "type": "t_uint256"
              },
              {
                "label": "commitmentViolationPenalty",
                "type": "t_uint256"
              },
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "lastTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cycles",
                "type": "t_mapping(t_uint256,t_struct(Cycle)2934_storage)"
              },
              {
                "label": "tiers",
                "type": "t_mapping(t_uint256,t_struct(Tier)2941_storage)"
              },
              {
                "label": "lockCommitments",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "bonusesAccrued",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "dailyBonusesAccrued",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "weightChanges",
                "type": "t_mapping(t_address,t_struct(UserWeightChanges)3033_storage)"
              },
              {
                "label": "dailyUsers",
                "type": "t_mapping(t_address,t_struct(DailyUser)2850_storage)"
              },
              {
                "label": "inflateByChanged",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "inflateByValues",
                "type": "t_mapping(t_uint256,t_struct(InflateByChanged)3003_storage)"
              },
              {
                "label": "pCnfiImplementation",
                "type": "t_address"
              },
              {
                "label": "currentDay",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CNFITreasury)6167": {
            "label": "contract CNFITreasury"
          },
          "t_contract(ICNFI)13": {
            "label": "contract ICNFI"
          },
          "t_contract(sCNFI)6103": {
            "label": "contract sCNFI"
          },
          "t_contract(pCNFI)6009": {
            "label": "contract pCNFI"
          },
          "t_mapping(t_uint256,t_struct(Cycle)2934_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.Cycle)"
          },
          "t_struct(Cycle)2934_storage": {
            "label": "struct StakingControllerLib.Cycle",
            "members": [
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "totalRawWeight",
                "type": "t_uint256"
              },
              {
                "label": "pCnfiToken",
                "type": "t_address"
              },
              {
                "label": "reserved",
                "type": "t_uint256"
              },
              {
                "label": "day",
                "type": "t_uint256"
              },
              {
                "label": "inflateBy",
                "type": "t_uint256"
              },
              {
                "label": "users",
                "type": "t_mapping(t_address,t_struct(User)2823_storage)"
              },
              {
                "label": "cnfiRewards",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "pcnfiRewards",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "canUnstake",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Tier)2941_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.Tier)"
          },
          "t_struct(Tier)2941_storage": {
            "label": "struct StakingControllerLib.Tier",
            "members": [
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "minimum",
                "type": "t_uint256"
              },
              {
                "label": "cycles",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserWeightChanges)3033_storage)": {
            "label": "mapping(address => struct StakingControllerLib.UserWeightChanges)"
          },
          "t_struct(UserWeightChanges)3033_storage": {
            "label": "struct StakingControllerLib.UserWeightChanges",
            "members": [
              {
                "label": "changes",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "totalCyclesSeen",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(DailyUser)2850_storage)": {
            "label": "mapping(address => struct StakingControllerLib.DailyUser)"
          },
          "t_struct(DailyUser)2850_storage": {
            "label": "struct StakingControllerLib.DailyUser",
            "members": [
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "cycleEnd",
                "type": "t_uint256"
              },
              {
                "label": "cyclesHeld",
                "type": "t_uint256"
              },
              {
                "label": "redeemable",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "weight",
                "type": "t_uint256"
              },
              {
                "label": "claimed",
                "type": "t_uint256"
              },
              {
                "label": "commitment",
                "type": "t_uint256"
              },
              {
                "label": "lastDaySeen",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeRewardWeight",
                "type": "t_uint256"
              },
              {
                "label": "lastTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "currentTier",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(InflateByChanged)3003_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.InflateByChanged)"
          },
          "t_struct(InflateByChanged)3003_storage": {
            "label": "struct StakingControllerLib.InflateByChanged",
            "members": [
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "previousAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(User)2823_storage)": {
            "label": "mapping(address => struct StakingControllerLib.User)"
          },
          "t_struct(User)2823_storage": {
            "label": "struct StakingControllerLib.User",
            "members": [
              {
                "label": "currentWeight",
                "type": "t_uint256"
              },
              {
                "label": "minimumWeight",
                "type": "t_uint256"
              },
              {
                "label": "dailyWeight",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "redeemable",
                "type": "t_uint256"
              },
              {
                "label": "daysClaimed",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "seen",
                "type": "t_bool"
              },
              {
                "label": "currentTier",
                "type": "t_uint256"
              },
              {
                "label": "cyclesHeld",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ddc73eacb3dd8018d68ed23b08f168afd8d62604112264e1a1b44724309c6079": {
      "address": "0x549A467f53758702484aade9c8624aD6eDcF99Da",
      "txHash": "0x8832a02b77f689fe8049cac3929e6b535dd6bdf66296b88471e51b5262931214",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "0356d466011d551701904e19a486681ad3f723b2f34386915bd9e8a011d106fc": {
      "address": "0xd0F224Bb70d60Fea0ad41632a9cc49cBcd53C748",
      "txHash": "0x4dd0d39551d7c7d42b2c750cde08d5d397a6cb968f9f87ebcb4a98dfa6e075f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "StakingControllerTemplate",
            "label": "isolate",
            "type": "t_struct(Isolate)1382_storage",
            "src": "@connectfinancial/connect-token/contracts/staking/StakingControllerTemplate.sol:14"
          }
        ],
        "types": {
          "t_struct(Isolate)1382_storage": {
            "label": "struct StakingControllerLib.Isolate",
            "members": [
              {
                "label": "currentCycle",
                "type": "t_uint256"
              },
              {
                "label": "cnfiTreasury",
                "type": "t_contract(CNFITreasury)6201"
              },
              {
                "label": "cnfi",
                "type": "t_contract(ICNFI)13"
              },
              {
                "label": "sCnfi",
                "type": "t_contract(sCNFI)6137"
              },
              {
                "label": "pCnfi",
                "type": "t_contract(pCNFI)6041"
              },
              {
                "label": "nextCycleTime",
                "type": "t_uint256"
              },
              {
                "label": "cycleInterval",
                "type": "t_uint256"
              },
              {
                "label": "nextTimestamp",
                "type": "t_uint256"
              },
              {
                "label": "inflateBy",
                "type": "t_uint256"
              },
              {
                "label": "inflatepcnfiBy",
                "type": "t_uint256"
              },
              {
                "label": "rewardInterval",
                "type": "t_uint256"
              },
              {
                "label": "tiersLength",
                "type": "t_uint256"
              },
              {
                "label": "baseUnstakePenalty",
                "type": "t_uint256"
              },
              {
                "label": "commitmentViolationPenalty",
                "type": "t_uint256"
              },
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "lastTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cycles",
                "type": "t_mapping(t_uint256,t_struct(Cycle)1514_storage)"
              },
              {
                "label": "tiers",
                "type": "t_mapping(t_uint256,t_struct(Tier)1521_storage)"
              },
              {
                "label": "lockCommitments",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "bonusesAccrued",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "dailyBonusesAccrued",
                "type": "t_mapping(t_address,t_uint256)"
              },
              {
                "label": "weightChanges",
                "type": "t_mapping(t_address,t_struct(UserWeightChanges)1613_storage)"
              },
              {
                "label": "dailyUsers",
                "type": "t_mapping(t_address,t_struct(DailyUser)1430_storage)"
              },
              {
                "label": "inflateByChanged",
                "type": "t_array(t_uint256)dyn_storage"
              },
              {
                "label": "inflateByValues",
                "type": "t_mapping(t_uint256,t_struct(InflateByChanged)1583_storage)"
              },
              {
                "label": "pCnfiImplementation",
                "type": "t_address"
              },
              {
                "label": "currentDay",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(CNFITreasury)6201": {
            "label": "contract CNFITreasury"
          },
          "t_contract(ICNFI)13": {
            "label": "contract ICNFI"
          },
          "t_contract(sCNFI)6137": {
            "label": "contract sCNFI"
          },
          "t_contract(pCNFI)6041": {
            "label": "contract pCNFI"
          },
          "t_mapping(t_uint256,t_struct(Cycle)1514_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.Cycle)"
          },
          "t_struct(Cycle)1514_storage": {
            "label": "struct StakingControllerLib.Cycle",
            "members": [
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "totalRawWeight",
                "type": "t_uint256"
              },
              {
                "label": "pCnfiToken",
                "type": "t_address"
              },
              {
                "label": "reserved",
                "type": "t_uint256"
              },
              {
                "label": "day",
                "type": "t_uint256"
              },
              {
                "label": "inflateBy",
                "type": "t_uint256"
              },
              {
                "label": "users",
                "type": "t_mapping(t_address,t_struct(User)1403_storage)"
              },
              {
                "label": "cnfiRewards",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "pcnfiRewards",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "canUnstake",
                "type": "t_bool"
              }
            ]
          },
          "t_mapping(t_uint256,t_struct(Tier)1521_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.Tier)"
          },
          "t_struct(Tier)1521_storage": {
            "label": "struct StakingControllerLib.Tier",
            "members": [
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "minimum",
                "type": "t_uint256"
              },
              {
                "label": "cycles",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserWeightChanges)1613_storage)": {
            "label": "mapping(address => struct StakingControllerLib.UserWeightChanges)"
          },
          "t_struct(UserWeightChanges)1613_storage": {
            "label": "struct StakingControllerLib.UserWeightChanges",
            "members": [
              {
                "label": "changes",
                "type": "t_mapping(t_uint256,t_uint256)"
              },
              {
                "label": "totalCyclesSeen",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(DailyUser)1430_storage)": {
            "label": "mapping(address => struct StakingControllerLib.DailyUser)"
          },
          "t_struct(DailyUser)1430_storage": {
            "label": "struct StakingControllerLib.DailyUser",
            "members": [
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "cycleEnd",
                "type": "t_uint256"
              },
              {
                "label": "cyclesHeld",
                "type": "t_uint256"
              },
              {
                "label": "redeemable",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "weight",
                "type": "t_uint256"
              },
              {
                "label": "claimed",
                "type": "t_uint256"
              },
              {
                "label": "commitment",
                "type": "t_uint256"
              },
              {
                "label": "lastDaySeen",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "cumulativeRewardWeight",
                "type": "t_uint256"
              },
              {
                "label": "lastTotalWeight",
                "type": "t_uint256"
              },
              {
                "label": "currentTier",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_mapping(t_uint256,t_struct(InflateByChanged)1583_storage)": {
            "label": "mapping(uint256 => struct StakingControllerLib.InflateByChanged)"
          },
          "t_struct(InflateByChanged)1583_storage": {
            "label": "struct StakingControllerLib.InflateByChanged",
            "members": [
              {
                "label": "totalWeight",
                "type": "t_uint256"
              },
              {
                "label": "previousAmount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_struct(User)1403_storage)": {
            "label": "mapping(address => struct StakingControllerLib.User)"
          },
          "t_struct(User)1403_storage": {
            "label": "struct StakingControllerLib.User",
            "members": [
              {
                "label": "currentWeight",
                "type": "t_uint256"
              },
              {
                "label": "minimumWeight",
                "type": "t_uint256"
              },
              {
                "label": "dailyWeight",
                "type": "t_uint256"
              },
              {
                "label": "multiplier",
                "type": "t_uint256"
              },
              {
                "label": "redeemable",
                "type": "t_uint256"
              },
              {
                "label": "daysClaimed",
                "type": "t_uint256"
              },
              {
                "label": "start",
                "type": "t_uint256"
              },
              {
                "label": "seen",
                "type": "t_bool"
              },
              {
                "label": "currentTier",
                "type": "t_uint256"
              },
              {
                "label": "cyclesHeld",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
