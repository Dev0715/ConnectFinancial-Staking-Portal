{
  "address": "0x50B85C53890B6C370ac3980E959bbb2C6Ef93D60",
  "abi": [],
  "transactionHash": "0x6f645fc6ac7fe8e998cc19df61b2d49d83627ee04e406643235efc29929a866e",
  "receipt": {
    "to": null,
    "from": "0xc3A48cbB98C755D5E535b36276122d936b487aD9",
    "contractAddress": "0x50B85C53890B6C370ac3980E959bbb2C6Ef93D60",
    "transactionIndex": 4,
    "gasUsed": "236787",
    "logsBloom": "0x
    "blockHash": "0x4ca4f9b6c867cfb293d960ea687169a7e15bdd271dcdd92aeb07b60d2a60d83a",
    "transactionHash": "0x6f645fc6ac7fe8e998cc19df61b2d49d83627ee04e406643235efc29929a866e",
    "logs": [],
    "blockNumber": 12271119,
    "cumulativeGasUsed": "610256",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5a78d87a6bada17637650aa3ceae8cc6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/CalculateRewardsLib.sol\":\"CalculateRewardsLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x8bc67f00476dee73f70cf8218e72523033c279b601ea38d0b83c227ccddb639a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/interfaces/ICNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ICNFI is IERC20 {\\r\\n  function mint(address user, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5c75b90d6e73093892ebd1a3824a5e13882a392868ce5a1bf8ace31a9dae022e\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IStakingController {\\r\\n  function receiveCallback(address sender, address receiver) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x098eab1a575ddb53a5082e30b5b89e68b58c191bf39276b8a407b505d87b6943\",\"license\":\"MIT\"},\"contracts/math/BancorFormulaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary BancorFormulaLib {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 constant _FIXED_1 = 0x080000000000000000000000000000000;\\r\\n\\r\\n    function FIXED_1() internal pure returns (uint256) {\\r\\n      return _FIXED_1;\\r\\n    }\\r\\n    function toFixed(uint256 x) internal pure returns (uint256 result) {\\r\\n      result = x.mul(_FIXED_1);\\r\\n    }\\r\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\r\\n        uint256 res = 0;\\r\\n\\r\\n        uint256 y;\\r\\n        uint256 z;\\r\\n        uint256 w;\\r\\n\\r\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\r\\n            res += 0x40000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\r\\n        } // add 1 / 2^1\\r\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\r\\n            res += 0x20000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\r\\n        } // add 1 / 2^2\\r\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\r\\n            res += 0x10000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\r\\n        } // add 1 / 2^3\\r\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\r\\n            res += 0x08000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\r\\n        } // add 1 / 2^4\\r\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\r\\n            res += 0x04000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\r\\n        } // add 1 / 2^5\\r\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\r\\n            res += 0x02000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\r\\n        } // add 1 / 2^6\\r\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\r\\n            res += 0x01000000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\r\\n        } // add 1 / 2^7\\r\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\r\\n            res += 0x00800000000000000000000000000000;\\r\\n            x = (x * _FIXED_1) / 0x808040155aabbbe9451521693554f733;\\r\\n        } // add 1 / 2^8\\r\\n\\r\\n        z = y = x - _FIXED_1;\\r\\n        w = (y * y) / _FIXED_1;\\r\\n        res +=\\r\\n            (z * (0x100000000000000000000000000000000 - y)) /\\r\\n            0x100000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^01 / 01 - y^02 / 02\\r\\n        res +=\\r\\n            (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\\r\\n            0x200000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^03 / 03 - y^04 / 04\\r\\n        res +=\\r\\n            (z * (0x099999999999999999999999999999999 - y)) /\\r\\n            0x300000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^05 / 05 - y^06 / 06\\r\\n        res +=\\r\\n            (z * (0x092492492492492492492492492492492 - y)) /\\r\\n            0x400000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^07 / 07 - y^08 / 08\\r\\n        res +=\\r\\n            (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\\r\\n            0x500000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^09 / 09 - y^10 / 10\\r\\n        res +=\\r\\n            (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\\r\\n            0x600000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^11 / 11 - y^12 / 12\\r\\n        res +=\\r\\n            (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\\r\\n            0x700000000000000000000000000000000;\\r\\n        z = (z * w) / _FIXED_1; // add y^13 / 13 - y^14 / 14\\r\\n        res +=\\r\\n            (z * (0x088888888888888888888888888888888 - y)) /\\r\\n            0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev computes e ^ (x / _FIXED_1) * _FIXED_1\\r\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\r\\n     * auto-generated via 'PrintFunctionOptimalExp.py'\\r\\n     * Detailed description:\\r\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\r\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\r\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\r\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\r\\n     */\\r\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\r\\n        uint256 res = 0;\\r\\n\\r\\n        uint256 y;\\r\\n        uint256 z;\\r\\n\\r\\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\r\\n        z = (z * y) / _FIXED_1;\\r\\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\r\\n        res = res / 0x21c3677c82b40000 + y + _FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\r\\n\\r\\n        if ((x & 0x010000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\\r\\n                0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\\r\\n        if ((x & 0x020000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\\r\\n                0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\\r\\n        if ((x & 0x040000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\\r\\n                0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\\r\\n        if ((x & 0x080000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\\r\\n                0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\\r\\n        if ((x & 0x100000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\\r\\n                0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\\r\\n        if ((x & 0x200000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x00960aadc109e7a3bf4578099615711d7) /\\r\\n                0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\\r\\n        if ((x & 0x400000000000000000000000000000000) != 0)\\r\\n            res =\\r\\n                (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\\r\\n                0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe13bd0724f5db7221ed711fe9c817ca576b4707b193b5438617812039871fc84\",\"license\":\"MIT\"},\"contracts/staking/CalculateRewardsImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {StakingControllerLib} from \\\"./StakingControllerLib.sol\\\";\\r\\nimport {\\r\\n    SafeMathUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport {\\r\\n    MathUpgradeable as Math\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\r\\nimport {UpdateRedeemableImplLib} from \\\"./UpdateRedeemableImplLib.sol\\\";\\r\\n\\r\\nlibrary CalculateRewardsImplLib {\\r\\n    using SafeMathUpgradeable for *;\\r\\n    struct CalculateRewardsLocals {\\r\\n        uint256 weight;\\r\\n        uint256 totalWeight;\\r\\n        uint256 daysToRedeem;\\r\\n        uint256 amountRedeemed;\\r\\n    }\\r\\n\\r\\n    function _calculateRewards(\\r\\n        StakingControllerLib.Isolate storage isolate,\\r\\n        address _user,\\r\\n        uint256 amt,\\r\\n        bool isView\\r\\n    ) internal returns (uint256 amountToRedeem, uint256 bonuses) {\\r\\n        StakingControllerLib.DailyUser storage user = isolate.dailyUsers[_user];\\r\\n        (amountToRedeem, bonuses) = _computeRewards(isolate, _user);\\r\\n\\r\\n        require(\\r\\n            isView || amountToRedeem >= amt,\\r\\n            \\\"cannot redeem more than whats available\\\"\\r\\n        );\\r\\n        uint256 _redeemable = user.redeemable;\\r\\n        if (amt == 0) amt = _redeemable;\\r\\n        user.redeemable = _redeemable.sub(amt);\\r\\n        return (amt, bonuses);\\r\\n    }\\r\\n\\r\\n    function _computeRewards(\\r\\n        StakingControllerLib.Isolate storage isolate,\\r\\n        address _user\\r\\n    ) internal view returns (uint256 amountToRedeem, uint256 bonuses) {\\r\\n        amountToRedeem = isolate.dailyUsers[_user].redeemable;\\r\\n        bonuses = isolate.dailyBonusesAccrued[_user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf3d5f0b1d564d5c976e5b9ecba3973ee893c88c5fb6a9dfc8fc4fc73a521c97a\",\"license\":\"MIT\"},\"contracts/staking/CalculateRewardsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {\\r\\n  SafeMathUpgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\r\\nimport { CalculateRewardsImplLib } from './CalculateRewardsImplLib.sol';\\r\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\r\\n\\r\\nlibrary CalculateRewardsLib {\\r\\n  using SafeMathUpgradeable for *;\\r\\n\\r\\n  function calculateRewards(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address _user,\\r\\n    uint256 amt,\\r\\n    bool isView\\r\\n  ) external returns (uint256 amountToRedeem, uint256 bonuses) {\\r\\n    (amountToRedeem, bonuses) = CalculateRewardsImplLib._calculateRewards(\\r\\n      isolate,\\r\\n      _user,\\r\\n      amt,\\r\\n      isView\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x6cf520b5cffe5b93813509d9d9694e988a4383f1aa1894a2874b45932247a845\",\"license\":\"MIT\"},\"contracts/staking/ComputeCyclesHeldLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {\\r\\n  SafeMathUpgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\r\\n\\r\\nlibrary ComputeCyclesHeldLib {\\r\\n  using SafeMathUpgradeable for *;\\r\\n\\r\\n  function _computeCyclesHeld(\\r\\n    uint256 cycleEnd,\\r\\n    uint256 interval,\\r\\n    uint256 _cyclesHeld,\\r\\n    uint256 currentTimestamp\\r\\n  ) internal pure returns (uint256 newCycleEnd, uint256 newCyclesHeld) {\\r\\n    if (cycleEnd == 0) cycleEnd = currentTimestamp.add(interval);\\r\\n    if (cycleEnd > currentTimestamp) return (cycleEnd, _cyclesHeld);\\r\\n    uint256 additionalCycles = currentTimestamp.sub(cycleEnd).div(interval);\\r\\n    newCyclesHeld = _cyclesHeld.add(1).add(additionalCycles);\\r\\n    newCycleEnd = cycleEnd.add(interval.mul(additionalCycles.add(1)));\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x77d582774260b305fc53ceffc2b25ac88e19d7379af9df80eccd3009a4002ee4\",\"license\":\"MIT\"},\"contracts/staking/GetDisplayTierImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\r\\n\\r\\nlibrary GetDisplayTierImplLib {\\r\\n  function _getDisplayTier(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    uint256 tier,\\r\\n    uint256 newBalance\\r\\n  ) internal view returns (uint256) {\\r\\n    for (; tier < isolate.tiersLength; tier++) {\\r\\n      if (isolate.tiers[tier].minimum > newBalance) {\\r\\n        tier--;\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    if(tier >= isolate.tiersLength) tier--;\\r\\n    return tier;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x82b405b638996f06ca503c62ce6b3b266756ca9c4522ce8dbcf2118c84194f37\",\"license\":\"MIT\"},\"contracts/staking/GetDisplayTierLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\r\\nimport { GetDisplayTierImplLib } from \\\"./GetDisplayTierImplLib.sol\\\";\\r\\n\\r\\nlibrary GetDisplayTierLib {\\r\\n  function getDisplayTier(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    uint256 tier,\\r\\n    uint256 newBalance\\r\\n  ) external view returns (uint256) {\\r\\n    return GetDisplayTierImplLib._getDisplayTier(isolate, tier, newBalance);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a230144c23522c0c3afd8024fa732fbdddd18fe3ccddd06c01e43295853d232\",\"license\":\"MIT\"},\"contracts/staking/StakingControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport { CNFITreasury } from \\\"../treasury/CNFITreasury.sol\\\";\\r\\nimport { ICNFI } from \\\"../interfaces/ICNFI.sol\\\";\\r\\nimport { pCNFI } from \\\"../token/pCNFI.sol\\\";\\r\\nimport { sCNFI } from \\\"../token/sCNFI.sol\\\";\\r\\n\\r\\ncontract StakingControllerLib {\\r\\n    struct Isolate {\\r\\n      uint256 currentCycle;\\r\\n      CNFITreasury cnfiTreasury;\\r\\n      ICNFI cnfi;\\r\\n      sCNFI sCnfi;\\r\\n      pCNFI pCnfi;\\r\\n      uint256 nextCycleTime;\\r\\n      uint256 cycleInterval;\\r\\n      uint256 nextTimestamp;\\r\\n      uint256 inflateBy;\\r\\n      uint256 inflatepcnfiBy;\\r\\n      uint256 rewardInterval;\\r\\n      uint256 tiersLength;\\r\\n      uint256 baseUnstakePenalty;\\r\\n      uint256 commitmentViolationPenalty;\\r\\n      uint256 totalWeight;\\r\\n      uint256 lastTotalWeight;\\r\\n      uint256 cumulativeTotalWeight;\\r\\n      mapping(uint256 => StakingControllerLib.Cycle) cycles;\\r\\n      mapping(uint256 => StakingControllerLib.Tier) tiers;\\r\\n      mapping(address => uint256) lockCommitments;\\r\\n      mapping(address => uint256) bonusesAccrued;\\r\\n      mapping(address => uint256) dailyBonusesAccrued;\\r\\n      mapping(address => StakingControllerLib.UserWeightChanges) weightChanges;\\r\\n      mapping(address => StakingControllerLib.DailyUser) dailyUsers;\\r\\n      uint256[] inflateByChanged;\\r\\n      mapping(uint256 => StakingControllerLib.InflateByChanged) inflateByValues;\\r\\n      address pCnfiImplementation;\\r\\n      uint256 currentDay;\\r\\n    }\\r\\n    struct User {\\r\\n        uint256 currentWeight;\\r\\n        uint256 minimumWeight;\\r\\n        uint256 dailyWeight;\\r\\n        uint256 multiplier;\\r\\n        uint256 redeemable;\\r\\n        uint256 daysClaimed;\\r\\n        uint256 start;\\r\\n        bool seen;\\r\\n        uint256 currentTier;\\r\\n        uint256 cyclesHeld;\\r\\n    }\\r\\n    struct DailyUser {\\r\\n        uint256 multiplier;\\r\\n        uint256 cycleEnd;\\r\\n        uint256 cyclesHeld;\\r\\n        uint256 redeemable;\\r\\n        uint256 start;\\r\\n        uint256 weight;\\r\\n        uint256 claimed;\\r\\n        uint256 commitment;\\r\\n        uint256 lastDaySeen;\\r\\n        uint256 cumulativeTotalWeight;\\r\\n        uint256 cumulativeRewardWeight;\\r\\n        uint256 lastTotalWeight;\\r\\n        uint256 currentTier;\\r\\n    }\\r\\n    struct DetermineMultiplierLocals {\\r\\n        uint256 scnfiBalance;\\r\\n        uint256 minimum;\\r\\n        uint256 tierIndex;\\r\\n        Tier tier;\\r\\n        uint256 cyclesHeld;\\r\\n        uint256 multiplier;\\r\\n    }\\r\\n    struct DetermineRewardLocals {\\r\\n        uint256 lastDaySeen;\\r\\n        uint256 redeemable;\\r\\n        uint256 totalWeight;\\r\\n        uint256 multiplier;\\r\\n        uint256 weight;\\r\\n        uint256 rawWeight;\\r\\n        uint256 totalRawWeight;\\r\\n    }\\r\\n    struct ReturnStats {\\r\\n        uint256 lockCommitment;\\r\\n        uint256 totalStakedInProtocol;\\r\\n        uint256 cnfiReleasedPerDay;\\r\\n        uint256 staked;\\r\\n        uint256 currentCnfiBalance;\\r\\n        uint256 unstakePenalty;\\r\\n        uint256 redeemable;\\r\\n        uint256 bonuses;\\r\\n        uint256 apy;\\r\\n        uint256 commitmentViolationPenalty;\\r\\n        uint256 basePenalty;\\r\\n        uint256 totalWeight;\\r\\n        uint256 cycleChange;\\r\\n        uint256 totalCyclesSeen;\\r\\n    }\\r\\n    struct Cycle {\\r\\n        uint256 totalWeight;\\r\\n        uint256 totalRawWeight;\\r\\n        address pCnfiToken;\\r\\n        uint256 reserved;\\r\\n        uint256 day;\\r\\n        uint256 inflateBy;\\r\\n        mapping(address => User) users;\\r\\n        mapping(uint256 => uint256) cnfiRewards;\\r\\n        mapping(uint256 => uint256) pcnfiRewards;\\r\\n        bool canUnstake;\\r\\n    }\\r\\n    struct Tier {\\r\\n        uint256 multiplier;\\r\\n        uint256 minimum;\\r\\n        uint256 cycles;\\r\\n    }\\r\\n    struct EncodeableCycle {\\r\\n        uint256 totalWeight;\\r\\n        uint256 totalRawWeight;\\r\\n        address pCnfiToken;\\r\\n        uint256 reserved;\\r\\n        uint256 day;\\r\\n        bool canUnstake;\\r\\n        uint256 lastCycleSeen;\\r\\n        uint256 currentCycle;\\r\\n    }\\r\\n    struct UpdateLocals {\\r\\n        uint256 multiplier;\\r\\n        uint256 weight;\\r\\n        uint256 prevMul;\\r\\n        uint256 prevRes;\\r\\n        uint256 prevRawRes;\\r\\n        uint256 nextRes;\\r\\n        uint256 nextRawRes;\\r\\n    }\\r\\n    struct RecalculateLocals {\\r\\n        uint256 currentWeight;\\r\\n        uint256 previousMultiplier;\\r\\n        uint256 previousMinimumWeight;\\r\\n        uint256 previousTotalWeight;\\r\\n        uint256 totalInflated;\\r\\n        uint256 daysToRedeem;\\r\\n        uint256 previousRedeemable;\\r\\n        uint256 amt;\\r\\n        uint256 bonus;\\r\\n        uint256 minimumWeight;\\r\\n        uint256 multiplier;\\r\\n        uint256 currentTotalWeight;\\r\\n    }\\r\\n    struct InflateByChanged {\\r\\n        uint256 totalWeight;\\r\\n        uint256 previousAmount;\\r\\n    }\\r\\n    struct DetermineInflateLocals {\\r\\n        uint256 totalWeight;\\r\\n        uint256 lastDaySeen;\\r\\n        uint256 dayDifference;\\r\\n        InflateByChanged changed;\\r\\n        uint256 tempRedeemable;\\r\\n        uint256 redeemable;\\r\\n        uint256 daysToClaim;\\r\\n        uint256 lastDayInEpoch;\\r\\n        uint256 dayChanged;\\r\\n        uint256 tempBonus;\\r\\n        uint256 lastDayChanged;\\r\\n    }\\r\\n    struct UserWeightChanges {\\r\\n        mapping(uint256 => uint256) changes;\\r\\n        uint256 totalCyclesSeen;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45b0ab6445853e5dc4c3ce85ff0a42b6dc87375a6d4ece0de6aa2e3c49d491ca\",\"license\":\"MIT\"},\"contracts/staking/UpdateRedeemableImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {\\r\\n  SafeMathUpgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\r\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\r\\nimport {\\r\\n  MathUpgradeable as Math\\r\\n} from '@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol';\\r\\nimport { UpdateToLastImplLib } from './UpdateToLastImplLib.sol';\\r\\nimport { sCNFI } from '../token/sCNFI.sol';\\r\\nimport { ComputeCyclesHeldLib } from './ComputeCyclesHeldLib.sol';\\r\\nimport { BancorFormulaLib } from '../math/BancorFormulaLib.sol';\\r\\n\\r\\n\\r\\nlibrary UpdateRedeemableImplLib {\\r\\n  using SafeMathUpgradeable for *;\\r\\n  using BancorFormulaLib for *;\\r\\n\\r\\n  function _updateCumulativeRewards(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address _user\\r\\n  ) internal {\\r\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[_user];\\r\\n    if (user.multiplier == 0) user.multiplier = uint256(1 ether);\\r\\n    if (isolate.currentDay > user.lastDaySeen) {\\r\\n      user.cumulativeRewardWeight = user.cumulativeRewardWeight.add(\\r\\n        isolate.currentDay.sub(user.lastDaySeen).mul(user.weight)\\r\\n      );\\r\\n    } else user.cumulativeRewardWeight = 0;\\r\\n  }\\r\\n\\r\\n  function _updateRedeemable(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    StakingControllerLib.DailyUser storage user,\\r\\n    uint256 multiplier\\r\\n  ) internal view returns (uint256 redeemable, uint256 bonuses) {\\r\\n    StakingControllerLib.DetermineInflateLocals memory locals;\\r\\n    locals.lastDayInEpoch = isolate.currentDay - 1;\\r\\n    locals.lastDayChanged = user.lastDaySeen;\\r\\n    if (locals.lastDayChanged < isolate.currentDay) {\\r\\n      locals.dayDifference = isolate.currentDay.sub(locals.lastDayChanged);\\r\\n      /*\\r\\n            locals.totalWeight = isolate.cumulativeTotalWeight.sub(\\r\\n                user.cumulativeTotalWeight\\r\\n            );\\r\\n            if (locals.totalWeight == 0) return (0, 0);\\r\\n*/\\r\\n\\r\\n      uint256 denominator =\\r\\n        Math.max(\\r\\n          Math.min(\\r\\n            isolate.cumulativeTotalWeight.sub(user.cumulativeTotalWeight),\\r\\n            Math.max(Math.max(isolate.totalWeight, isolate.lastTotalWeight), user.lastTotalWeight).mul(locals.dayDifference)\\r\\n          ),\\r\\n          uint256(1 ether)\\r\\n        );\\r\\n    \\r\\n      redeemable = locals\\r\\n        .dayDifference\\r\\n        .mul(isolate.inflateBy)\\r\\n        .mul(user.cumulativeRewardWeight)\\r\\n        .div(denominator);\\r\\n\\r\\n      if (multiplier > uint256(1 ether))\\r\\n        bonuses = redeemable.mul(multiplier.sub(uint256(1 ether))).div(\\r\\n          multiplier\\r\\n        );\\r\\n      else bonuses = 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _determineMultiplier(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    bool penaltyChange,\\r\\n    address user,\\r\\n    uint256 currentBalance\\r\\n  ) internal returns (uint256 multiplier, uint256 amountToBurn) {\\r\\n    StakingControllerLib.DetermineMultiplierLocals memory locals;\\r\\n    StakingControllerLib.User storage currentUser =\\r\\n      isolate.cycles[isolate.currentCycle].users[user];\\r\\n    locals.minimum = uint256(~0);\\r\\n    locals.tierIndex = isolate.lockCommitments[user];\\r\\n    locals.tier = isolate.tiers[locals.tierIndex];\\r\\n    locals.cyclesHeld = 0;\\r\\n    locals.multiplier = locals.tierIndex == 0\\r\\n      ? 1 ether\\r\\n      : locals.tier.multiplier;\\r\\n    for (uint256 i = isolate.currentCycle; i > 0; i--) {\\r\\n      StakingControllerLib.Cycle storage cycle = isolate.cycles[i];\\r\\n      StakingControllerLib.User storage _user = cycle.users[user];\\r\\n      locals.minimum = Math.min(locals.minimum, _user.minimumWeight);\\r\\n      currentUser.cyclesHeld = locals.cyclesHeld;\\r\\n      currentUser.currentTier = locals.tierIndex;\\r\\n      if (locals.minimum < locals.tier.minimum) {\\r\\n        if (\\r\\n          isolate.lockCommitments[user] == locals.tierIndex && penaltyChange\\r\\n        ) {\\r\\n          uint256 bonus = isolate.bonusesAccrued[user];\\r\\n          amountToBurn = Math.min(bonus, currentBalance);\\r\\n\\r\\n          if (amountToBurn > 0) {\\r\\n            isolate.bonusesAccrued[user] = 0;\\r\\n            isolate.lockCommitments[user] = 0;\\r\\n            currentUser.currentTier = 0;\\r\\n            currentUser.cyclesHeld = 0;\\r\\n          }\\r\\n        }\\r\\n        return (locals.multiplier, amountToBurn);\\r\\n      }\\r\\n      locals.cyclesHeld++;\\r\\n      if (locals.tierIndex == 0) {\\r\\n        locals.tierIndex++;\\r\\n        if (locals.tierIndex > isolate.tiersLength)\\r\\n          return (locals.multiplier, amountToBurn);\\r\\n        locals.tier = isolate.tiers[locals.tierIndex];\\r\\n      }\\r\\n      if (locals.cyclesHeld == locals.tier.cycles) {\\r\\n        locals.multiplier = locals.tier.multiplier;\\r\\n        locals.tierIndex++;\\r\\n\\r\\n        isolate.lockCommitments[user] = 0;\\r\\n        isolate.bonusesAccrued[user] = 0;\\r\\n        if (locals.tierIndex > isolate.tiersLength)\\r\\n          return (locals.multiplier, amountToBurn);\\r\\n        locals.tier = isolate.tiers[locals.tierIndex];\\r\\n      }\\r\\n    }\\r\\n    return (locals.multiplier, amountToBurn);\\r\\n  }\\r\\n\\r\\n  function _updateDailyStatsToLast(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address sender,\\r\\n    uint256 weight,\\r\\n    bool penalize,\\r\\n    bool init\\r\\n  ) internal returns (uint256 redeemable, uint256 bonuses) {\\r\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\r\\n    StakingControllerLib.UserWeightChanges storage weightChange =\\r\\n      isolate.weightChanges[sender];\\r\\n    if (user.start == 0) init = true;\\r\\n    {\\r\\n      uint256 cycleChange = user.cyclesHeld;\\r\\n      (user.cycleEnd, user.cyclesHeld) = ComputeCyclesHeldLib\\r\\n        ._computeCyclesHeld(\\r\\n        user.cycleEnd,\\r\\n        isolate.cycleInterval,\\r\\n        user.cyclesHeld,\\r\\n        block.timestamp\\r\\n      );\\r\\n      if (user.cyclesHeld > 0 && user.cyclesHeld > cycleChange) {\\r\\n        uint256 baseWeight = isolate.sCnfi.balanceOf(sender);\\r\\n        for (uint256 i = user.cyclesHeld; i > cycleChange; i--) {\\r\\n          weightChange.changes[i] = baseWeight;\\r\\n        }\\r\\n        weightChange.totalCyclesSeen = user.cyclesHeld;\\r\\n      }\\r\\n    }\\r\\n    if (penalize || init) {\\r\\n      weightChange.changes[user.cyclesHeld] = weight;\\r\\n      user.start = block.timestamp;\\r\\n    }\\r\\n    uint256 multiplier = _determineDailyMultiplier(isolate, sender);\\r\\n    \\r\\n    if (init) user.multiplier = multiplier;\\r\\n    if (user.lastDaySeen < isolate.currentDay) {\\r\\n      (redeemable, bonuses) = _updateRedeemable(isolate, user, multiplier);\\r\\n      user.cumulativeTotalWeight = isolate.cumulativeTotalWeight;\\r\\n      user.cumulativeRewardWeight = 0;\\r\\n      isolate.dailyBonusesAccrued[sender] = isolate.dailyBonusesAccrued[sender]\\r\\n        .add(bonuses);\\r\\n      user.claimed = user.claimed.add(redeemable);\\r\\n      user.redeemable = user.redeemable.add(redeemable);\\r\\n      user.lastDaySeen = isolate.currentDay;\\r\\n    }\\r\\n    /*\\r\\n        {\\r\\n            if (!init && user.multiplier != multiplier && user.multiplier > 0) {\\r\\n                uint256 previousUserWeight =\\r\\n                    user.weight;\\r\\n                uint256 newUserWeight =\\r\\n                    weight.mul(multiplier).div(uint256(1 ether));\\r\\n\\r\\n                if (isolate.totalWeight == previousUserWeight)\\r\\n                    isolate.totalWeight = newUserWeight;\\r\\n                else\\r\\n                    isolate.totalWeight = isolate\\r\\n                        .totalWeight\\r\\n                        .add(newUserWeight)\\r\\n                        .sub(previousUserWeight);\\r\\n            }\\r\\n        }\\r\\n\\t*/\\r\\n    user.multiplier = multiplier;\\r\\n    if (penalize) {\\r\\n      _deductRewards(isolate, sender, weight);\\r\\n      user.cycleEnd = block.timestamp + isolate.cycleInterval;\\r\\n      user.cyclesHeld = 0;\\r\\n      if (isolate.tiersLength > 0) {\\r\\n        uint256 min = isolate.tiers[1].minimum;\\r\\n        if (min > weight) weightChange.totalCyclesSeen = 0;\\r\\n        else {\\r\\n          weightChange.changes[weightChange.totalCyclesSeen] = weight;\\r\\n        }\\r\\n      } else {\\r\\n        weightChange.totalCyclesSeen = 0;\\r\\n      }\\r\\n \\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _recalculateDailyWeights(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address sender,\\r\\n    uint256 weight,\\r\\n    bool penalize\\r\\n  ) internal {\\r\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\r\\n    uint256 previousMultiplier = user.multiplier;\\r\\n    if (previousMultiplier == 0) {\\r\\n      previousMultiplier = 1 ether;\\r\\n      user.multiplier = previousMultiplier;\\r\\n      user.weight = isolate.sCnfi.balanceOf(sender);\\r\\n    }\\r\\n    uint256 prevWeight = user.weight;\\r\\n    _updateDailyStatsToLast(isolate, sender, weight, penalize, false);\\r\\n    user.weight = weight = weight.mul(user.multiplier).div(1 ether);\\r\\n    isolate.lastTotalWeight = isolate.totalWeight;\\r\\n    isolate.totalWeight = isolate.totalWeight.add(weight).sub(prevWeight);\\r\\n    \\r\\n\\r\\n    user.lastTotalWeight = isolate.totalWeight;\\r\\n  }\\r\\n\\r\\n  function _deductRewards(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address sender,\\r\\n    uint256 weight\\r\\n  ) internal {\\r\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\r\\n    StakingControllerLib.Tier memory tier;\\r\\n    if (user.commitment > 0) {\\r\\n      tier = isolate.tiers[user.commitment];\\r\\n      if (weight < tier.minimum && user.cyclesHeld < tier.cycles) {\\r\\n        user.commitment = 0;\\r\\n        (uint256 redeemable, uint256 toBurn) =\\r\\n          _computeNewRedeemablePrincipalSplit(isolate, sender);\\r\\n        isolate.dailyBonusesAccrued[sender] = 0;\\r\\n        user.redeemable = redeemable;\\r\\n        isolate.sCnfi.burn(sender, toBurn);\\r\\n        user.multiplier = uint256(1 ether);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _computeNewRedeemablePrincipalSplit(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address user\\r\\n  ) internal view returns (uint256 newRedeemable, uint256 toBurn) {\\r\\n    uint256 total =\\r\\n      isolate.dailyBonusesAccrued[user]\\r\\n        .mul(isolate.commitmentViolationPenalty)\\r\\n        .div(uint256(1 ether));\\r\\n    StakingControllerLib.DailyUser storage dailyUser = isolate.dailyUsers[user];\\r\\n    uint256 _redeemable = dailyUser.redeemable;\\r\\n\\r\\n    newRedeemable =\\r\\n      dailyUser.redeemable -\\r\\n      Math.min(dailyUser.redeemable, total);\\r\\n    if (newRedeemable == 0) {\\r\\n      toBurn = total - _redeemable;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _recalculateWeights(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address sender,\\r\\n    uint256 oldBalance,\\r\\n    uint256 newBalance,\\r\\n    bool penalty\\r\\n  ) internal {\\r\\n    StakingControllerLib.RecalculateLocals memory locals;\\r\\n    UpdateToLastImplLib._updateToLast(isolate, sender);\\r\\n    StakingControllerLib.Cycle storage cycle =\\r\\n      isolate.cycles[isolate.currentCycle];\\r\\n    StakingControllerLib.User storage user = cycle.users[sender];\\r\\n    //StakingControllerLib.User storage dailyUser = cycle.users[sender];\\r\\n    user.start = block.timestamp;\\r\\n\\r\\n    locals.currentWeight = user.currentWeight;\\r\\n    if (oldBalance != newBalance) {\\r\\n      if (locals.currentWeight == oldBalance) user.currentWeight = newBalance;\\r\\n      else\\r\\n        user.currentWeight = locals.currentWeight.add(newBalance).sub(\\r\\n          oldBalance\\r\\n        );\\r\\n    }\\r\\n    // _recalculateDailyWeights(isolate, sender, newBalance.mul(dailyUser.multiplier).div(uint256(1 ether)), penalty);\\r\\n    locals.previousMultiplier = user.multiplier;\\r\\n    locals.previousMinimumWeight = user.minimumWeight;\\r\\n    locals.previousTotalWeight = cycle.totalWeight;\\r\\n    if (\\r\\n      user.daysClaimed - cycle.day - 1 > 0 && locals.previousMinimumWeight > 0\\r\\n    ) {\\r\\n      locals.totalInflated;\\r\\n      locals.daysToRedeem;\\r\\n      if (cycle.day - 1 > user.daysClaimed)\\r\\n        locals.daysToRedeem = uint256(cycle.day - 1).sub(user.daysClaimed);\\r\\n      locals.totalInflated = isolate.inflateBy.mul(locals.daysToRedeem);\\r\\n      locals.previousRedeemable = user.redeemable;\\r\\n\\r\\n      if (locals.totalInflated > 0) {\\r\\n        locals.amt = locals\\r\\n          .totalInflated\\r\\n          .mul(locals.previousMinimumWeight)\\r\\n          .mul(locals.previousMultiplier)\\r\\n          .div(1 ether)\\r\\n          .div(locals.previousTotalWeight);\\r\\n        user.redeemable = locals.previousRedeemable.add(locals.amt);\\r\\n        if (locals.previousMultiplier > 1 ether) {\\r\\n          locals.bonus = locals\\r\\n            .amt\\r\\n            .mul(locals.previousMultiplier.sub(1 ether))\\r\\n            .div(locals.previousMultiplier);\\r\\n          isolate.bonusesAccrued[sender] = isolate.bonusesAccrued[sender].add(\\r\\n            locals.bonus\\r\\n          );\\r\\n        }\\r\\n        user.daysClaimed = cycle.day - 1;\\r\\n      }\\r\\n    }\\r\\n    locals.minimumWeight = Math.min(user.minimumWeight, locals.currentWeight);\\r\\n    (locals.multiplier, ) = _determineMultiplier(\\r\\n      isolate,\\r\\n      penalty,\\r\\n      sender,\\r\\n      newBalance\\r\\n    );\\r\\n    user.minimumWeight = locals.minimumWeight;\\r\\n    locals.currentTotalWeight = cycle\\r\\n      .totalWeight\\r\\n      .add(locals.minimumWeight.mul(locals.multiplier).div(uint256(1 ether)))\\r\\n      .sub(\\r\\n      locals.previousMinimumWeight.mul(locals.previousMultiplier).div(\\r\\n        uint256(1 ether)\\r\\n      )\\r\\n    );\\r\\n\\r\\n    cycle.totalWeight = locals.currentTotalWeight;\\r\\n    cycle.totalRawWeight = cycle\\r\\n      .totalRawWeight\\r\\n      .add(user.currentWeight.mul(locals.multiplier).div(1 ether))\\r\\n      .sub(locals.currentWeight.mul(locals.previousMultiplier).div(1 ether));\\r\\n\\r\\n    user.multiplier = locals.multiplier;\\r\\n  }\\r\\n\\r\\n  function _determineDailyMultiplier(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address sender\\r\\n  ) internal returns (uint256 multiplier) {\\r\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\r\\n    StakingControllerLib.UserWeightChanges storage weightChange =\\r\\n      isolate.weightChanges[sender];\\r\\n    StakingControllerLib.DetermineMultiplierLocals memory locals;\\r\\n    locals.tierIndex = Math.max(user.commitment, user.currentTier);\\r\\n    locals.tier = isolate.tiers[locals.tierIndex];\\r\\n    locals.multiplier = locals.tierIndex == 0\\r\\n      ? 1 ether\\r\\n      : locals.tier.multiplier;\\r\\n    multiplier = locals.multiplier;\\r\\n    user.currentTier = 0;\\r\\n    locals.minimum = uint256(~1);\\r\\n    for (uint256 i = weightChange.totalCyclesSeen; i > 0; i--) {\\r\\n      locals.minimum = Math.min(locals.minimum, weightChange.changes[i]);\\r\\n      if (locals.minimum < locals.tier.minimum) {\\r\\n        \\r\\n        if (locals.tierIndex > 0 && locals.tierIndex > user.commitment)\\r\\n          user.currentTier = --locals.tierIndex;\\r\\n        locals.tier = isolate.tiers[locals.tierIndex];\\r\\n        locals.multiplier = locals.tier.multiplier;\\r\\n        return locals.multiplier;\\r\\n      }\\r\\n      user.currentTier = locals.tierIndex;\\r\\n      locals.cyclesHeld++;\\r\\n      if (locals.cyclesHeld >= locals.tier.cycles) {\\r\\n        if (user.commitment == locals.tierIndex) {\\r\\n          user.commitment = 0;\\r\\n        }\\r\\n        locals.tierIndex++;\\r\\n\\r\\n        if (locals.tierIndex > isolate.tiersLength - 1) {\\r\\n          return isolate.tiers[--locals.tierIndex].multiplier;\\r\\n        }\\r\\n        locals.tier = isolate.tiers[locals.tierIndex];\\r\\n\\r\\n        locals.multiplier = locals.tier.multiplier;\\r\\n      }\\r\\n    }\\r\\n    if(user.commitment == 0) {\\r\\n      locals.tier = isolate.tiers[user.currentTier];\\r\\n      multiplier = locals.tier.multiplier;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x207f7206d993cfed6b1d164600ad479a8bfff62874c9d2e76e42768fda6ce41e\",\"license\":\"MIT\"},\"contracts/staking/UpdateToLastImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\r\\nimport {\\r\\n  SafeMathUpgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\r\\nimport {\\r\\n  MathUpgradeable as Math\\r\\n} from '@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol';\\r\\nimport { GetDisplayTierLib } from \\\"./GetDisplayTierLib.sol\\\";\\r\\n\\r\\nlibrary UpdateToLastImplLib {\\r\\n  using SafeMathUpgradeable for *;\\r\\n  struct UpdateToLastLocals {\\r\\n    uint256 cycleNumber;\\r\\n    uint256 weight;\\r\\n    uint256 multiplier;\\r\\n    uint256 lastDaySeen;\\r\\n    uint256 redeemable;\\r\\n    uint256 totalWeight;\\r\\n    uint256 daysToRedeem;\\r\\n    uint256 bonus;\\r\\n    uint256 i;\\r\\n  }\\r\\n  function _updateToLast(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address user\\r\\n  ) internal {\\r\\n    UpdateToLastLocals memory locals;\\r\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[isolate.currentCycle];\\r\\n    if (cycle.users[user].seen) return;\\r\\n    StakingControllerLib.Cycle storage ptr = cycle;\\r\\n    locals.cycleNumber = isolate.currentCycle;\\r\\n    while (!ptr.users[user].seen && locals.cycleNumber > 0) {\\r\\n      ptr = isolate.cycles[--locals.cycleNumber];\\r\\n\\r\\n      if (ptr.users[user].seen) {\\r\\n        locals.weight = ptr.users[user].currentWeight;\\r\\n        locals.multiplier = ptr.users[user].multiplier;\\r\\n        cycle.users[user].seen = true;\\r\\n        cycle.users[user].currentWeight = locals.weight;\\r\\n        cycle.users[user].minimumWeight = locals.weight;\\r\\n        cycle.users[user].multiplier = locals.multiplier;\\r\\n        cycle.users[user].redeemable = ptr.users[user].redeemable;\\r\\n        cycle.users[user].start = ptr.users[user].start;\\r\\n        locals.lastDaySeen = ptr.users[user].daysClaimed;\\r\\n        locals.redeemable = 0;\\r\\n        locals.totalWeight = ptr.totalWeight;\\r\\n\\r\\n        if (locals.totalWeight > 0 && ptr.reserved > 0) {\\r\\n          locals.daysToRedeem = 0;\\r\\n          if (ptr.day - 1 > locals.lastDaySeen)\\r\\n            locals.daysToRedeem = uint256(ptr.day - 1).sub(locals.lastDaySeen);\\r\\n          locals.redeemable = locals.daysToRedeem.mul(isolate.inflateBy);\\r\\n          locals.redeemable = locals\\r\\n            .redeemable\\r\\n            .mul(locals.weight)\\r\\n            .mul(locals.multiplier)\\r\\n            .div(locals.totalWeight)\\r\\n            .div(1 ether);\\r\\n          if (locals.multiplier > 1 ether) {\\r\\n            locals.bonus = uint256(locals.multiplier.sub(1 ether))\\r\\n              .mul(locals.redeemable)\\r\\n              .div(locals.multiplier);\\r\\n            isolate.bonusesAccrued[user] = isolate.bonusesAccrued[user].add(locals.bonus);\\r\\n          }\\r\\n          cycle.users[user].redeemable = cycle.users[user].redeemable.add(\\r\\n            locals.redeemable\\r\\n          );\\r\\n        }\\r\\n\\r\\n        for (\\r\\n          locals.i = locals.cycleNumber + 1;\\r\\n          locals.i < isolate.currentCycle;\\r\\n          locals.i++\\r\\n        ) {\\r\\n          ptr = isolate.cycles[locals.i];\\r\\n          locals.totalWeight = ptr.totalWeight;\\r\\n          ptr.users[user].minimumWeight = locals.weight;\\r\\n          ptr.users[user].multiplier = locals.multiplier;\\r\\n          if (locals.totalWeight > 0 && ptr.reserved > 0) {\\r\\n            locals.redeemable = ptr\\r\\n              .reserved\\r\\n              .mul(locals.weight)\\r\\n              .mul(locals.multiplier)\\r\\n              .div(ptr.totalWeight)\\r\\n              .div(1 ether);\\r\\n            cycle.users[user].redeemable = cycle.users[user].redeemable.add(\\r\\n              locals.redeemable\\r\\n            );\\r\\n          }\\r\\n        }\\r\\n\\r\\n        return;\\r\\n      }\\r\\n    }\\r\\n    cycle.users[user].seen = true;\\r\\n    cycle.users[user].multiplier = 1 ether;\\r\\n  }\\r\\n\\r\\n  function _updateWeightsWithMultiplier(\\r\\n    StakingControllerLib.Isolate storage isolate,\\r\\n    address user,\\r\\n    uint256 multiplier\\r\\n  ) internal returns (uint256) {\\r\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[isolate.currentCycle];\\r\\n    StakingControllerLib.User storage _sender = cycle.users[user];\\r\\n    StakingControllerLib.UpdateLocals memory locals;\\r\\n    locals.multiplier = multiplier;\\r\\n    locals.weight = Math.min(_sender.minimumWeight, _sender.currentWeight);\\r\\n    locals.prevMul = _sender.multiplier;\\r\\n    locals.prevRes = locals.weight.mul(locals.prevMul).div(1 ether);\\r\\n    locals.prevRawRes = _sender.currentWeight.mul(locals.prevMul).div(1 ether);\\r\\n    locals.nextRes = locals.weight.mul(locals.multiplier).div(1 ether);\\r\\n    locals.nextRawRes = _sender.currentWeight.mul(locals.multiplier).div(\\r\\n      1 ether\\r\\n    );\\r\\n    if (locals.multiplier != _sender.multiplier) {\\r\\n      _sender.multiplier = locals.multiplier;\\r\\n      if (cycle.totalWeight == locals.prevRes)\\r\\n        cycle.totalWeight = locals.nextRes;\\r\\n      else\\r\\n        cycle.totalWeight = cycle.totalWeight.sub(locals.prevRes).add(\\r\\n          locals.nextRes\\r\\n        );\\r\\n      if (cycle.totalRawWeight == locals.prevRawRes)\\r\\n        cycle.totalRawWeight = locals.nextRawRes;\\r\\n      else\\r\\n        cycle.totalRawWeight = cycle.totalRawWeight.sub(locals.prevRawRes).add(\\r\\n          locals.nextRawRes\\r\\n        );\\r\\n    }\\r\\n    return locals.multiplier;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x73dfe7a81d6a4b38865f671f28cbf1e59dd6b2e36e26deeaccc0ab09f0c9b354\",\"license\":\"MIT\"},\"contracts/token/lib/pCNFILib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport { StringLib } from '../../util/StringLib.sol';\\r\\nimport { IStakingController } from '../../interfaces/IStakingController.sol';\\r\\n\\r\\nlibrary pCNFILib {\\r\\n  using StringLib for *;\\r\\n\\r\\n  function toSymbol(uint256 cycle) internal pure returns (string memory) {\\r\\n    return abi.encodePacked('pCNFI', cycle.toString()).toString();\\r\\n  }\\r\\n\\r\\n  function toName(uint256 cycle) internal pure returns (string memory) {\\r\\n    return abi.encodePacked('pCNFI Cycle ', cycle.toString()).toString();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x143dbe8c181bb6f034120ca548073587195cbed9d8c5427266e6da32526de4bc\",\"license\":\"MIT\"},\"contracts/token/pCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {\\r\\n  ERC20Upgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\r\\nimport { StringUtils } from '../util/Strings.sol';\\r\\nimport {\\r\\n  OwnableUpgradeable\\r\\n} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\r\\nimport { pCNFILib } from './lib/pCNFILib.sol';\\r\\n\\r\\ncontract pCNFI is ERC20Upgradeable, OwnableUpgradeable {\\r\\n  using StringUtils for *;\\r\\n\\r\\n  function initialize(uint256 cycle) public initializer {\\r\\n    __ERC20_init_unchained(pCNFILib.toName(cycle), pCNFILib.toSymbol(cycle));\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function mint(address target, uint256 amount) public onlyOwner {\\r\\n    _mint(target, amount);\\r\\n  }\\r\\n\\r\\n  function burn(address target, uint256 amount) public onlyOwner {\\r\\n    _burn(target, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f4dc7107de6cd9f6754595d323c0d57246f768d0f59d810b1ac24c5706406bf\",\"license\":\"MIT\"},\"contracts/token/sCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract sCNFI is ERC20Upgradeable, OwnableUpgradeable {\\r\\n  function initialize() public initializer {\\r\\n    __ERC20_init_unchained(\\\"Connect Financial Staking\\\", \\\"sCNFI\\\");\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function mint(address target, uint256 amount) public onlyOwner {\\r\\n    _mint(target, amount);\\r\\n  }\\r\\n\\r\\n  function burn(address target, uint256 amount) public onlyOwner {\\r\\n    _burn(target, amount);\\r\\n  }\\r\\n\\r\\n  function transfer(address target, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    returns (bool)\\r\\n  {\\r\\n    return super.transfer(target, amount);\\r\\n  }\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) public override onlyOwner returns (bool) {\\r\\n    return super.transferFrom(from, to, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1d891fc5699865421795696eeb01bb37089a62240049b566d704736c6fcb2674\",\"license\":\"MIT\"},\"contracts/treasury/CNFITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport {\\r\\n    OwnableUpgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport {\\r\\n    IERC20Upgradeable\\r\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ncontract CNFITreasury is OwnableUpgradeable {\\r\\n    address relayer;\\r\\n    modifier onlyRelayer {\\r\\n        require(msg.sender == owner() || msg.sender == relayer, \\\"unauthorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize(address _relayer) public {\\r\\n        __Ownable_init_unchained();\\r\\n        relayer = _relayer;\\r\\n    }\\r\\n\\r\\n    function transferToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public onlyRelayer returns (bool) {\\r\\n        IERC20Upgradeable(token).transfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e697b53fb23347a28022bdafddddb1fe7e7051c3d0443ed7ed9f8cc7c4e1b75\",\"license\":\"MIT\"},\"contracts/util/StringLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary StringLib {\\r\\n  /// @notice Convert a uint value to its decimal string representation\\r\\n  // solium-disable-next-line security/no-assign-params\\r\\n  function toString(uint256 _i) internal pure returns (string memory) {\\r\\n    if (_i == 0) {\\r\\n      return '0';\\r\\n    }\\r\\n    uint256 j = _i;\\r\\n    uint256 len;\\r\\n    while (j != 0) {\\r\\n      len++;\\r\\n      j /= 10;\\r\\n    }\\r\\n    bytes memory bstr = new bytes(len);\\r\\n    uint256 k = len - 1;\\r\\n    while (_i != 0) {\\r\\n      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\r\\n      _i /= 10;\\r\\n    }\\r\\n    return string(bstr);\\r\\n  }\\r\\n\\r\\n  /// @notice Convert a bytes32 value to its hex string representation\\r\\n  function toString(bytes32 _value) internal pure returns (string memory) {\\r\\n    bytes memory alphabet = '0123456789abcdef';\\r\\n\\r\\n    bytes memory str = new bytes(32 * 2 + 2);\\r\\n    str[0] = '0';\\r\\n    str[1] = 'x';\\r\\n    for (uint256 i = 0; i < 32; i++) {\\r\\n      str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\\r\\n      str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\\r\\n    }\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n  /// @notice Convert an address to its hex string representation\\r\\n  function toString(address _addr) internal pure returns (string memory) {\\r\\n    bytes32 value = bytes32(uint256(_addr));\\r\\n    bytes memory alphabet = '0123456789abcdef';\\r\\n\\r\\n    bytes memory str = new bytes(20 * 2 + 2);\\r\\n    str[0] = '0';\\r\\n    str[1] = 'x';\\r\\n    for (uint256 i = 0; i < 20; i++) {\\r\\n      str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\\r\\n      str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\\r\\n    }\\r\\n    return string(str);\\r\\n  }\\r\\n\\r\\n  function toString(bytes memory input) internal pure returns (string memory) {\\r\\n    return string(input);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x9279321a9f1f8b883874cf574ecd26d60dc8fa067841ac1cf6aa557f9cf25f00\",\"license\":\"MIT\"},\"contracts/util/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n * @title String & slice utility library for Solidity contracts.\\r\\n * @author Nick Johnson <arachnid@notdot.net>\\r\\n *\\r\\n * @dev Functionality in this library is largely implemented using an\\r\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\r\\n *      anything from the entire string to a single character, or even no\\r\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\r\\n *      an offset and a length, copying and manipulating slices is a lot less\\r\\n *      expensive than copying and manipulating the strings they reference.\\r\\n *\\r\\n *      To further reduce gas costs, most functions on slice that need to return\\r\\n *      a slice modify the original one instead of allocating a new one; for\\r\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\r\\n *      modifying s to only contain the remainder of the string after the '.'.\\r\\n *      In situations where you do not want to modify the original slice, you\\r\\n *      can make a copy first with `.copy()`, for example:\\r\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\r\\n *      Solidity has no memory management, it will result in allocating many\\r\\n *      short-lived slices that are later discarded.\\r\\n *\\r\\n *      Functions that return two slices come in two versions: a non-allocating\\r\\n *      version that takes the second slice as an argument, modifying it in\\r\\n *      place, and an allocating version that allocates and returns the second\\r\\n *      slice; see `nextRune` for example.\\r\\n *\\r\\n *      Functions that have to copy string data will return strings rather than\\r\\n *      slices; these can be cast back to slices for further processing if\\r\\n *      required.\\r\\n *\\r\\n *      For convenience, some functions are provided with non-modifying\\r\\n *      variants that create a new slice and return both; for instance,\\r\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\r\\n *      corresponding to the left and right parts of the string.\\r\\n */\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nlibrary StringUtils {\\r\\n    struct slice {\\r\\n        uint _len;\\r\\n        uint _ptr;\\r\\n    }\\r\\n\\r\\n    function memcpy(uint dest, uint src, uint len) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for(; len >= 32; len -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        uint mask = 256 ** (32 - len) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire string.\\r\\n     * @param self The string to make a slice from.\\r\\n     * @return A newly allocated slice containing the entire string.\\r\\n     */\\r\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\r\\n        uint ptr;\\r\\n        assembly {\\r\\n            ptr := add(self, 0x20)\\r\\n        }\\r\\n        return slice(bytes(self).length, ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the length of a null-terminated bytes32 string.\\r\\n     * @param self The value to find the length of.\\r\\n     * @return The length of the string, from 0 to 32.\\r\\n     */\\r\\n    function len(bytes32 self) internal pure returns (uint) {\\r\\n        uint ret;\\r\\n        if (self == 0)\\r\\n            return 0;\\r\\n        if (self & bytes32(uint256(0xffffffffffffffffffffffffffffffff)) == 0) {\\r\\n            ret += 16;\\r\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\r\\n        }\\r\\n        if (self & bytes32(uint256(0xffffffffffffffff)) == 0) {\\r\\n            ret += 8;\\r\\n            self = bytes32(uint(self) / 0x10000000000000000);\\r\\n        }\\r\\n        if (self & bytes32(uint256(0xffffffff)) == 0) {\\r\\n            ret += 4;\\r\\n            self = bytes32(uint(self) / 0x100000000);\\r\\n        }\\r\\n        if (self & bytes32(uint256(0xffff)) == 0) {\\r\\n            ret += 2;\\r\\n            self = bytes32(uint(self) / 0x10000);\\r\\n        }\\r\\n        if (self & bytes32(uint256(0xff)) == 0) {\\r\\n            ret += 1;\\r\\n        }\\r\\n        return 32 - ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\r\\n     *      null-terminated utf-8 string.\\r\\n     * @param self The bytes32 value to convert to a slice.\\r\\n     * @return A new slice containing the value of the input argument up to the\\r\\n     *         first null.\\r\\n     */\\r\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\r\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            mstore(0x40, add(ptr, 0x20))\\r\\n            mstore(ptr, self)\\r\\n            mstore(add(ret, 0x20), ptr)\\r\\n        }\\r\\n        ret._len = len(self);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a new slice containing the same data as the current slice.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A new slice containing the same data as `self`.\\r\\n     */\\r\\n    function copy(slice memory self) internal pure returns (slice memory) {\\r\\n        return slice(self._len, self._ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a slice to a new string.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A newly allocated string containing the slice's text.\\r\\n     */\\r\\n    function toString(slice memory self) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the length in runes of the slice. Note that this operation\\r\\n     *      takes time proportional to the length of the slice; avoid using it\\r\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\r\\n     *      the slice is empty or not.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The length of the slice in runes.\\r\\n     */\\r\\n    function len(slice memory self) internal pure returns (uint l) {\\r\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\r\\n        uint ptr = self._ptr - 31;\\r\\n        uint end = ptr + self._len;\\r\\n        for (l = 0; ptr < end; l++) {\\r\\n            uint8 b;\\r\\n            assembly { b := and(mload(ptr), 0xFF) }\\r\\n            if (b < 0x80) {\\r\\n                ptr += 1;\\r\\n            } else if(b < 0xE0) {\\r\\n                ptr += 2;\\r\\n            } else if(b < 0xF0) {\\r\\n                ptr += 3;\\r\\n            } else if(b < 0xF8) {\\r\\n                ptr += 4;\\r\\n            } else if(b < 0xFC) {\\r\\n                ptr += 5;\\r\\n            } else {\\r\\n                ptr += 6;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice is empty (has a length of 0).\\r\\n     * @param self The slice to operate on.\\r\\n     * @return True if the slice is empty, False otherwise.\\r\\n     */\\r\\n    function empty(slice memory self) internal pure returns (bool) {\\r\\n        return self._len == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param other The second slice to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\r\\n        uint shortest = self._len;\\r\\n        if (other._len < self._len)\\r\\n            shortest = other._len;\\r\\n\\r\\n        uint selfptr = self._ptr;\\r\\n        uint otherptr = other._ptr;\\r\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\r\\n            uint a;\\r\\n            uint b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask = uint256(-1); // 0xffff...\\r\\n                if(shortest < 32) {\\r\\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\r\\n                }\\r\\n                uint256 diff = (a & mask) - (b & mask);\\r\\n                if (diff != 0)\\r\\n                    return int(diff);\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n        return int(self._len) - int(other._len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two slices contain the same text.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param self The second slice to compare.\\r\\n     * @return True if the slices are equal, false otherwise.\\r\\n     */\\r\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\r\\n        return compare(self, other) == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\r\\n     *      slice to point to the next rune and returning `self`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param rune The slice that will contain the first rune.\\r\\n     * @return `rune`.\\r\\n     */\\r\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\r\\n        rune._ptr = self._ptr;\\r\\n\\r\\n        if (self._len == 0) {\\r\\n            rune._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        uint l;\\r\\n        uint b;\\r\\n        // Load the first byte of the rune into the LSBs of b\\r\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\r\\n        if (b < 0x80) {\\r\\n            l = 1;\\r\\n        } else if(b < 0xE0) {\\r\\n            l = 2;\\r\\n        } else if(b < 0xF0) {\\r\\n            l = 3;\\r\\n        } else {\\r\\n            l = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (l > self._len) {\\r\\n            rune._len = self._len;\\r\\n            self._ptr += self._len;\\r\\n            self._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        self._ptr += l;\\r\\n        self._len -= l;\\r\\n        rune._len = l;\\r\\n        return rune;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\r\\n     *      to the next rune.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return A slice containing only the first rune from `self`.\\r\\n     */\\r\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\r\\n        nextRune(self, ret);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the number of the first codepoint in the slice.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The number of the first codepoint in the slice.\\r\\n     */\\r\\n    function ord(slice memory self) internal pure returns (uint ret) {\\r\\n        if (self._len == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint word;\\r\\n        uint length;\\r\\n        uint divisor = 2 ** 248;\\r\\n\\r\\n        // Load the rune into the MSBs of b\\r\\n        assembly { word:= mload(mload(add(self, 32))) }\\r\\n        uint b = word / divisor;\\r\\n        if (b < 0x80) {\\r\\n            ret = b;\\r\\n            length = 1;\\r\\n        } else if(b < 0xE0) {\\r\\n            ret = b & 0x1F;\\r\\n            length = 2;\\r\\n        } else if(b < 0xF0) {\\r\\n            ret = b & 0x0F;\\r\\n            length = 3;\\r\\n        } else {\\r\\n            ret = b & 0x07;\\r\\n            length = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (length > self._len) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        for (uint i = 1; i < length; i++) {\\r\\n            divisor = divisor / 256;\\r\\n            b = (word / divisor) & 0xFF;\\r\\n            if (b & 0xC0 != 0x80) {\\r\\n                // Invalid UTF-8 sequence\\r\\n                return 0;\\r\\n            }\\r\\n            ret = (ret * 64) | (b & 0x3F);\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of the slice.\\r\\n     * @param self The slice to hash.\\r\\n     * @return The hash of the slice.\\r\\n     */\\r\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if `self` starts with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len < needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if (self._ptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let selfptr := mload(add(self, 0x20))\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\r\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return `self`\\r\\n     */\\r\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        if (self._len < needle._len) {\\r\\n            return self;\\r\\n        }\\r\\n\\r\\n        bool equal = true;\\r\\n        if (self._ptr != needle._ptr) {\\r\\n            assembly {\\r\\n                let length := mload(needle)\\r\\n                let selfptr := mload(add(self, 0x20))\\r\\n                let needleptr := mload(add(needle, 0x20))\\r\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (equal) {\\r\\n            self._len -= needle._len;\\r\\n            self._ptr += needle._len;\\r\\n        }\\r\\n\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice ends with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len < needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n\\r\\n        if (selfptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\r\\n     *      end of `self`. Otherwise, `self` is unmodified.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return `self`\\r\\n     */\\r\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        if (self._len < needle._len) {\\r\\n            return self;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n        bool equal = true;\\r\\n        if (selfptr != needle._ptr) {\\r\\n            assembly {\\r\\n                let length := mload(needle)\\r\\n                let needleptr := mload(add(needle, 0x20))\\r\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (equal) {\\r\\n            self._len -= needle._len;\\r\\n        }\\r\\n\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    // Returns the memory address of the first byte of the first occurrence of\\r\\n    // `needle` in `self`, or the first byte after `self` if not found.\\r\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr = selfptr;\\r\\n        uint idx;\\r\\n\\r\\n        if (needlelen <= selflen) {\\r\\n            if (needlelen <= 32) {\\r\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                uint end = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr >= end)\\r\\n                        return selfptr + selflen;\\r\\n                    ptr++;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n\\r\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr;\\r\\n                    ptr += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr + selflen;\\r\\n    }\\r\\n\\r\\n    // Returns the memory address of the first byte after the last occurrence of\\r\\n    // `needle` in `self`, or the address of `self` if not found.\\r\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr;\\r\\n\\r\\n        if (needlelen <= selflen) {\\r\\n            if (needlelen <= 32) {\\r\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                ptr = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr <= selfptr)\\r\\n                        return selfptr;\\r\\n                    ptr--;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr + needlelen;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n                ptr = selfptr + (selflen - needlelen);\\r\\n                while (ptr >= selfptr) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr + needlelen;\\r\\n                    ptr -= 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\r\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\r\\n     *      if `needle` is not found.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len -= ptr - self._ptr;\\r\\n        self._ptr = ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain the part of the string from the start of\\r\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\r\\n     *      is not found, `self` is set to the empty slice.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len = ptr - self._ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and `token` to everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = self._ptr;\\r\\n        token._len = ptr - self._ptr;\\r\\n        if (ptr == self._ptr + self._len) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n            self._ptr = ptr + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and returning everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` up to the first occurrence of `delim`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        split(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and `token` to everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = ptr;\\r\\n        token._len = self._len - (ptr - self._ptr);\\r\\n        if (ptr == self._ptr) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and returning everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` after the last occurrence of `delim`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        rsplit(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The number of occurrences of `needle` found in `self`.\\r\\n     */\\r\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\r\\n        while (ptr <= self._ptr + self._len) {\\r\\n            cnt++;\\r\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns True if `self` contains `needle`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return True if `needle` is found in `self`, false otherwise.\\r\\n     */\\r\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a newly allocated string containing the concatenation of\\r\\n     *      `self` and `other`.\\r\\n     * @param self The first slice to concatenate.\\r\\n     * @param other The second slice to concatenate.\\r\\n     * @return The concatenation of the two strings.\\r\\n     */\\r\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len + other._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        memcpy(retptr + self._len, other._ptr, other._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\r\\n     *      newly allocated string.\\r\\n     * @param self The delimiter to use.\\r\\n     * @param parts A list of slices to join.\\r\\n     * @return A newly allocated string containing all the slices in `parts`,\\r\\n     *         joined with `self`.\\r\\n     */\\r\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\r\\n        if (parts.length == 0)\\r\\n            return \\\"\\\";\\r\\n\\r\\n        uint length = self._len * (parts.length - 1);\\r\\n        for(uint i = 0; i < parts.length; i++)\\r\\n            length += parts[i]._len;\\r\\n\\r\\n        string memory ret = new string(length);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        for(uint i = 0; i < parts.length; i++) {\\r\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\r\\n            retptr += parts[i]._len;\\r\\n            if (i < parts.length - 1) {\\r\\n                memcpy(retptr, self._ptr, self._len);\\r\\n                retptr += self._len;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n    // convert uint to string\\r\\n    function toString(uint256 _i) internal pure returns (string memory) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 length;\\r\\n        while (j != 0) {\\r\\n            length++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(length);\\r\\n        uint256 k = length - 1;\\r\\n        while (_i != 0) {\\r\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x461d7764d560193dbdcc71f6744737f59315eae02bca040314b6a8735035557c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610355610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063e3040bb51461003a575b600080fd5b81801561004657600080fd5b506100a96004803603608081101561005d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035151590602001909291905050506100c6565b604051808381526020018281526020019250505060405180910390f35b6000806100d5868686866100e6565b809250819350505094509492505050565b60008060008660170160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061013887876101e0565b8093508194505050838061014c5750848310155b6101a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806102f96027913960400191505060405180910390fd5b60008160030154905060008614156101b7578095505b6101ca868261027590919063ffffffff16565b8260030181905550859350505094509492505050565b6000808360170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491508360150160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b6000828211156102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b81830390509291505056fe63616e6e6f742072656465656d206d6f7265207468616e20776861747320617661696c61626c65a26469706673582212208a5dd7277d5e7bfa2042734c135afd1c3f1559cd1c8a89e5b33996b201c5918f64736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063e3040bb51461003a575b600080fd5b81801561004657600080fd5b506100a96004803603608081101561005d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035151590602001909291905050506100c6565b604051808381526020018281526020019250505060405180910390f35b6000806100d5868686866100e6565b809250819350505094509492505050565b60008060008660170160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061013887876101e0565b8093508194505050838061014c5750848310155b6101a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806102f96027913960400191505060405180910390fd5b60008160030154905060008614156101b7578095505b6101ca868261027590919063ffffffff16565b8260030181905550859350505094509492505050565b6000808360170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491508360150160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b6000828211156102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b81830390509291505056fe63616e6e6f742072656465656d206d6f7265207468616e20776861747320617661696c61626c65a26469706673582212208a5dd7277d5e7bfa2042734c135afd1c3f1559cd1c8a89e5b33996b201c5918f64736f6c634300060c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}