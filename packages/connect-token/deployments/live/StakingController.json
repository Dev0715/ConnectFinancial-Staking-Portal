{
  "address": "0xbbb604a12C6E4F88f1fa562603BF7D9d48CDf702",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToRedeem",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonuses",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "_claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonuses",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegateTo",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "_executeQuery",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonuses",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimRewardsWithAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToRedeem",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonuses",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitmentViolationPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentCycle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "dailyBonusesAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fillFirstCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cycleInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inflateBy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inflatepcnfiBy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseUnstakePenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commitmentViolationPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_multipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_cycles",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minimums",
          "type": "uint256[]"
        }
      ],
      "name": "govern",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cnfi",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sCnfi",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cnfiTreasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "viewLogic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "receiveCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "receiveSingularCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "restakeRewardsWithAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commitmentTier",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawable",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0939b973bddf021c0a1196a07e1c4513fb45fbc60dfcbc70a5fbe69a9be0cf66",
  "receipt": {
    "to": null,
    "from": "0xFE07D499e17482e5c4F40783ece3135dbdfe5D37",
    "contractAddress": "0xEA5bA3A16c3dC399D2528D453aC4B8C9e1aC0eF4",
    "transactionIndex": 3,
    "gasUsed": "3015303",
    "logsBloom": "0x
    "blockHash": "0xf06dfe2fd69258e7db8749ccf4f49ce0846d90cdff7a701c278f295269ec57f3",
    "transactionHash": "0x0939b973bddf021c0a1196a07e1c4513fb45fbc60dfcbc70a5fbe69a9be0cf66",
    "logs": [],
    "blockNumber": 14101097,
    "cumulativeGasUsed": "3117184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "fa6372f83535ac13c261f70b7324988d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonuses\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"_claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonuses\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegateTo\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"_executeQuery\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonuses\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewardsWithAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonuses\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitmentViolationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"dailyBonusesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fillFirstCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cycleInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflateBy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inflatepcnfiBy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseUnstakePenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commitmentViolationPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_multipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_cycles\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minimums\",\"type\":\"uint256[]\"}],\"name\":\"govern\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cnfi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sCnfi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cnfiTreasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"viewLogic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"receiveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"receiveSingularCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"restakeRewardsWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitmentTier\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/StakingController.sol\":\"StakingController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x8bc67f00476dee73f70cf8218e72523033c279b601ea38d0b83c227ccddb639a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x0a0b021149946014fe1cd04af11e7a937a29986c47e8b1b718c2d50d729472db\",\"license\":\"MIT\"},\"contracts/interfaces/ICNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICNFI is IERC20 {\\n  function mint(address user, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe15492862c24c5391e87e6925aec6b0ae5cbe3b5fa1fcc24c7594f1a270a5178\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IStakingController {\\n  function receiveCallback(address sender, address receiver) external;\\n}\\n\",\"keccak256\":\"0xf3d17c9ee9a94ea3a62c4ee1082ffccec87f53b3d95f1a78de5bca6beb970c9e\",\"license\":\"MIT\"},\"contracts/lib/FactoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { Create2 } from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nlibrary FactoryLib {\\n  function computeCreationCode(address target) internal view returns (bytes memory clone) {\\n    clone = computeCreationCode(address(this), target);\\n  }\\n  function computeCreationCode(address deployer, address target) internal pure returns (bytes memory clone) {\\n      bytes memory consData = abi.encodeWithSignature(\\\"cloneConstructor(bytes)\\\", new bytes(0));\\n      clone = new bytes(99 + consData.length);\\n      assembly {\\n        mstore(add(clone, 0x20),\\n           0x3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe)\\n        mstore(add(clone, 0x2d),\\n           mul(deployer, 0x01000000000000000000000000))\\n        mstore(add(clone, 0x41),\\n           0x5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be)\\n           mstore(add(clone, 0x60),\\n           mul(target, 0x01000000000000000000000000))\\n        mstore(add(clone, 116),\\n           0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      }\\n      for (uint256 i = 0; i < consData.length; i++) {\\n        clone[i + 99] = consData[i];\\n      }\\n  }\\n  function deriveInstanceAddress(address target, bytes32 salt) internal view returns (address) {\\n    return Create2.computeAddress(salt, keccak256(computeCreationCode(target)));\\n  }\\n  function deriveInstanceAddress(address from, address target, bytes32 salt) internal pure returns (address) {\\n     return Create2.computeAddress(salt, keccak256(computeCreationCode(from, target)), from);\\n  }\\n  function create2Clone(address target, uint saltNonce) internal returns (address result) {\\n    bytes memory clone = computeCreationCode(target);\\n    bytes32 salt = bytes32(saltNonce);\\n      \\n    assembly {\\n      let len := mload(clone)\\n      let data := add(clone, 0x20)\\n      result := create2(0, data, len, salt)\\n    }\\n      \\n    require(result != address(0), \\\"create2 failed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x09418dc79042d919578b3bff5fe513e9dfcee33d26cd0548076b2ccd3287f6ca\",\"license\":\"MIT\"},\"contracts/math/BancorFormulaLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BancorFormulaLib {\\n    using SafeMath for uint256;\\n\\n    uint256 constant _FIXED_1 = 0x080000000000000000000000000000000;\\n\\n    function FIXED_1() internal pure returns (uint256) {\\n      return _FIXED_1;\\n    }\\n    function toFixed(uint256 x) internal pure returns (uint256 result) {\\n      result = x.mul(_FIXED_1);\\n    }\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        } // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        } // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        } // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        } // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        } // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        } // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        } // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * _FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        } // add 1 / 2^8\\n\\n        z = y = x - _FIXED_1;\\n        w = (y * y) / _FIXED_1;\\n        res +=\\n            (z * (0x100000000000000000000000000000000 - y)) /\\n            0x100000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^01 / 01 - y^02 / 02\\n        res +=\\n            (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\\n            0x200000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^03 / 03 - y^04 / 04\\n        res +=\\n            (z * (0x099999999999999999999999999999999 - y)) /\\n            0x300000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^05 / 05 - y^06 / 06\\n        res +=\\n            (z * (0x092492492492492492492492492492492 - y)) /\\n            0x400000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^07 / 07 - y^08 / 08\\n        res +=\\n            (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\\n            0x500000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^09 / 09 - y^10 / 10\\n        res +=\\n            (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\\n            0x600000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^11 / 11 - y^12 / 12\\n        res +=\\n            (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\\n            0x700000000000000000000000000000000;\\n        z = (z * w) / _FIXED_1; // add y^13 / 13 - y^14 / 14\\n        res +=\\n            (z * (0x088888888888888888888888888888888 - y)) /\\n            0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / _FIXED_1) * _FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via 'PrintFunctionOptimalExp.py'\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\\n        z = (z * y) / _FIXED_1;\\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + _FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\\n                0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\\n                0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\\n                0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\\n                0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\\n                0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x00960aadc109e7a3bf4578099615711d7) /\\n                0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0)\\n            res =\\n                (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\\n                0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x98608bcc69576580f950618db5accca7e37dc0b7396e94703333f3fc15640a44\",\"license\":\"MIT\"},\"contracts/staking/CalculateRewardsImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {StakingControllerLib} from \\\"./StakingControllerLib.sol\\\";\\nimport {\\n    SafeMathUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {\\n    MathUpgradeable as Math\\n} from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {UpdateRedeemableImplLib} from \\\"./UpdateRedeemableImplLib.sol\\\";\\n\\nlibrary CalculateRewardsImplLib {\\n    using SafeMathUpgradeable for *;\\n    struct CalculateRewardsLocals {\\n        uint256 weight;\\n        uint256 totalWeight;\\n        uint256 daysToRedeem;\\n        uint256 amountRedeemed;\\n    }\\n\\n    function _calculateRewards(\\n        StakingControllerLib.Isolate storage isolate,\\n        address _user,\\n        uint256 amt,\\n        bool isView\\n    ) internal returns (uint256 amountToRedeem, uint256 bonuses) {\\n        StakingControllerLib.DailyUser storage user = isolate.dailyUsers[_user];\\n        (amountToRedeem, bonuses) = _computeRewards(isolate, _user);\\n\\n        require(\\n            isView || amountToRedeem >= amt,\\n            \\\"cannot redeem more than whats available\\\"\\n        );\\n        uint256 _redeemable = user.redeemable;\\n        if (amt == 0) amt = _redeemable;\\n        user.redeemable = _redeemable.sub(amt);\\n        return (amt, bonuses);\\n    }\\n\\n    function _computeRewards(\\n        StakingControllerLib.Isolate storage isolate,\\n        address _user\\n    ) internal view returns (uint256 amountToRedeem, uint256 bonuses) {\\n        amountToRedeem = isolate.dailyUsers[_user].redeemable;\\n        bonuses = isolate.dailyBonusesAccrued[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x78d882cd997085a2370a7216dea2fc4583f3ef0ce63ee817c994d6b45adce020\",\"license\":\"MIT\"},\"contracts/staking/CalculateRewardsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n  SafeMathUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\nimport { CalculateRewardsImplLib } from './CalculateRewardsImplLib.sol';\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\n\\nlibrary CalculateRewardsLib {\\n  using SafeMathUpgradeable for *;\\n\\n  function calculateRewards(\\n    StakingControllerLib.Isolate storage isolate,\\n    address _user,\\n    uint256 amt,\\n    bool isView\\n  ) external returns (uint256 amountToRedeem, uint256 bonuses) {\\n    (amountToRedeem, bonuses) = CalculateRewardsImplLib._calculateRewards(\\n      isolate,\\n      _user,\\n      amt,\\n      isView\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xcbc287cd46c33ea50cf2771642c3e4f6781102eb46925233508f0e41ebc751a2\",\"license\":\"MIT\"},\"contracts/staking/ComputeCyclesHeldLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n  SafeMathUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\n\\nlibrary ComputeCyclesHeldLib {\\n  using SafeMathUpgradeable for *;\\n\\n  function _computeCyclesHeld(\\n    uint256 cycleEnd,\\n    uint256 interval,\\n    uint256 _cyclesHeld,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256 newCycleEnd, uint256 newCyclesHeld) {\\n    if (cycleEnd == 0) cycleEnd = currentTimestamp.add(interval);\\n    if (cycleEnd > currentTimestamp) return (cycleEnd, _cyclesHeld);\\n    uint256 additionalCycles = currentTimestamp.sub(cycleEnd).div(interval);\\n    newCyclesHeld = _cyclesHeld.add(1).add(additionalCycles);\\n    newCycleEnd = cycleEnd.add(interval.mul(additionalCycles.add(1)));\\n  }\\n}\\n\",\"keccak256\":\"0x7b25039c41946b046e4e0991c2b9924177a8c9d3ecf7d4c0d72d4661d9ce52ba\",\"license\":\"MIT\"},\"contracts/staking/GetDisplayTierImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\n\\nlibrary GetDisplayTierImplLib {\\n  function _getDisplayTier(\\n    StakingControllerLib.Isolate storage isolate,\\n    uint256 tier,\\n    uint256 newBalance\\n  ) internal view returns (uint256) {\\n    for (; tier < isolate.tiersLength; tier++) {\\n      if (isolate.tiers[tier].minimum > newBalance) {\\n        tier--;\\n        break;\\n      }\\n    }\\n    if(tier >= isolate.tiersLength) tier--;\\n    return tier;\\n  }\\n}\\n\",\"keccak256\":\"0x844f9f69225afe27979964faf0a0e8889f7fbadc7ca340d204c4eafc9b9b700a\",\"license\":\"MIT\"},\"contracts/staking/GetDisplayTierLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\nimport { GetDisplayTierImplLib } from \\\"./GetDisplayTierImplLib.sol\\\";\\n\\nlibrary GetDisplayTierLib {\\n  function getDisplayTier(\\n    StakingControllerLib.Isolate storage isolate,\\n    uint256 tier,\\n    uint256 newBalance\\n  ) external view returns (uint256) {\\n    return GetDisplayTierImplLib._getDisplayTier(isolate, tier, newBalance);\\n  }\\n}\\n\",\"keccak256\":\"0x11415cc5f5cd9bc37a59cab2b604e9aec5e72c5287562599d909f0eb6dfe292e\",\"license\":\"MIT\"},\"contracts/staking/StakingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport {StakingControllerLib} from \\\"./StakingControllerLib.sol\\\";\\nimport {ConnectToken as CNFI} from \\\"../token/CNFI.sol\\\";\\nimport {sCNFI} from \\\"../token/sCNFI.sol\\\";\\nimport {pCNFIFactoryLib} from \\\"../token/lib/pCNFIFactoryLib.sol\\\";\\nimport {SafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport {pCNFI} from \\\"../token/pCNFI.sol\\\";\\nimport {Create2} from \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport {FactoryLib} from \\\"../lib/FactoryLib.sol\\\";\\nimport {ICNFI} from \\\"../interfaces/ICNFI.sol\\\";\\nimport {CNFITreasury} from \\\"../treasury/CNFITreasury.sol\\\";\\nimport {ViewExecutor} from \\\"../util/ViewExecutor.sol\\\";\\nimport {StakingControllerTemplate} from \\\"./StakingControllerTemplate.sol\\\";\\nimport {UpdateToLastLib} from \\\"./UpdateToLastLib.sol\\\";\\nimport {UpdateRedeemableLib} from \\\"./UpdateRedeemableLib.sol\\\";\\nimport {GetDisplayTierImplLib} from \\\"./GetDisplayTierImplLib.sol\\\";\\nimport {StakingEventsLib} from \\\"./StakingEventsLib.sol\\\";\\nimport {CalculateRewardsLib} from \\\"./CalculateRewardsLib.sol\\\";\\nimport {CalculateRewardsImplLib} from \\\"./CalculateRewardsImplLib.sol\\\";\\nimport {RevertConstantsLib} from \\\"../util/RevertConstantsLib.sol\\\";\\nimport {BancorFormulaLib} from \\\"../math/BancorFormulaLib.sol\\\";\\n\\ncontract StakingController is\\n  StakingControllerTemplate,\\n  ViewExecutor,\\n  RevertConstantsLib\\n{\\n  using SafeMathUpgradeable for *;\\n  using BancorFormulaLib for *;\\n\\n  function initialize(\\n    address _cnfi,\\n    address _sCnfi,\\n    address _cnfiTreasury\\n  ) public initializer {\\n    __Ownable_init_unchained();\\n    isolate.cnfi = ICNFI(_cnfi);\\n    isolate.pCnfiImplementation = Create2.deploy(\\n      0,\\n      pCNFIFactoryLib.getSalt(),\\n      pCNFIFactoryLib.getBytecode()\\n    );\\n    isolate.cnfiTreasury = CNFITreasury(_cnfiTreasury);\\n    isolate.sCnfi = sCNFI(_sCnfi);\\n    isolate.rewardInterval = 1 days;\\n    isolate.cycleInterval = 180 days;\\n  }\\n\\n  function govern(\\n    uint256 _cycleInterval,\\n    uint256 _rewardInterval,\\n    uint256 _inflateBy,\\n    uint256 _inflatepcnfiBy,\\n    uint256 _baseUnstakePenalty,\\n    uint256 _commitmentViolationPenalty,\\n    uint256[] memory _multipliers,\\n    uint256[] memory _cycles,\\n    uint256[] memory _minimums\\n  ) public onlyOwner {\\n    if (_baseUnstakePenalty > 0)\\n      isolate.baseUnstakePenalty = _baseUnstakePenalty;\\n    if (_commitmentViolationPenalty > 0)\\n      isolate.commitmentViolationPenalty = _commitmentViolationPenalty;\\n    if (_cycleInterval > 0) {\\n      isolate.cycleInterval = _cycleInterval;\\n      isolate.nextCycleTime = block.timestamp + isolate.cycleInterval;\\n    }\\n    if (_rewardInterval > 0) {\\n      isolate.rewardInterval = _rewardInterval;\\n      isolate.nextTimestamp = block.timestamp + isolate.rewardInterval;\\n    }\\n    if (_inflateBy > 0) {\\n      if (_inflateBy != isolate.inflateBy) {\\n        isolate.inflateByChanged.push(isolate.currentDay);\\n        isolate.inflateByValues[isolate.currentDay] = StakingControllerLib\\n          .InflateByChanged(isolate.totalWeight, isolate.inflateBy);\\n      }\\n      isolate.inflateBy = _inflateBy;\\n    }\\n    if (_inflatepcnfiBy > 0) isolate.inflatepcnfiBy = _inflatepcnfiBy;\\n    isolate.tiersLength = _multipliers.length + 1;\\n    isolate.tiers[0].multiplier = uint256(1 ether);\\n    for (uint256 i = 0; i < _multipliers.length; i++) {\\n      isolate.tiers[i + 1] = StakingControllerLib.Tier(\\n        _multipliers[i],\\n        _minimums[i],\\n        _cycles[i]\\n      );\\n    }\\n  }\\n\\n  function fillFirstCycle() public onlyOwner {\\n    _triggerCycle(true);\\n  }\\n\\n  function _triggerCycle(bool force) internal {\\n    if (force || block.timestamp > isolate.nextCycleTime) {\\n      isolate.nextCycleTime = block.timestamp + isolate.cycleInterval;\\n      uint256 _currentCycle = ++isolate.currentCycle;\\n      isolate.cycles[_currentCycle].pCnfiToken = FactoryLib.create2Clone(\\n        isolate.pCnfiImplementation,\\n        uint256(\\n          keccak256(abi.encodePacked(pCNFIFactoryLib.getSalt(), _currentCycle))\\n        )\\n      );\\n      isolate.nextTimestamp = block.timestamp + isolate.rewardInterval;\\n      isolate.pCnfi = pCNFI(isolate.cycles[_currentCycle].pCnfiToken);\\n      isolate.pCnfi.initialize(_currentCycle);\\n      isolate.cycles[_currentCycle].day = 1;\\n      if (_currentCycle != 1) {\\n        isolate.cycles[_currentCycle].totalWeight = isolate\\n          .cycles[_currentCycle - 1]\\n          .totalRawWeight;\\n        isolate.cycles[_currentCycle].totalRawWeight = isolate\\n          .cycles[_currentCycle - 1]\\n          .totalRawWeight;\\n      }\\n    }\\n  }\\n\\n  function determineMultiplier(address user, bool penaltyChange)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 currentBalance = isolate.sCnfi.balanceOf(user);\\n    (uint256 multiplier, uint256 amountToBurn) = UpdateRedeemableLib\\n      .determineMultiplier(isolate, penaltyChange, user, currentBalance);\\n    if (amountToBurn > 0) isolate.sCnfi.burn(user, amountToBurn);\\n    return multiplier;\\n  }\\n\\n  function _updateToLast(address user) internal {\\n    UpdateToLastLib.updateToLast(isolate, user);\\n  }\\n\\n  function _updateCumulativeRewards(address user) internal {\\n    UpdateRedeemableLib.updateCumulativeRewards(isolate, user);\\n  }\\n\\n  function _updateWeightsWithMultiplier(address user)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 multiplier = determineMultiplier(user, false);\\n\\n    return\\n      UpdateToLastLib.updateWeightsWithMultiplier(isolate, user, multiplier);\\n  }\\n\\n  function _updateDailyStatsToLast(address user) internal {\\n    UpdateRedeemableLib.updateDailyStatsToLast(isolate, user, 0, false, false);\\n  }\\n\\n  function receiveSingularCallback(address sender) public {\\n    if (sender != address(0x0)) {\\n      _trackDailyRewards(false);\\n      _triggerCycle(false);\\n      _updateCumulativeRewards(sender);\\n      _updateToLast(sender);\\n      _updateWeightsWithMultiplier(sender);\\n      _updateDailyStatsToLast(sender);\\n    }\\n  }\\n\\n  function receiveCallback(address a, address b) public {\\n    receiveSingularCallback(a);\\n    receiveSingularCallback(b);\\n  }\\n\\n  function calculateRewards(\\n    address _user,\\n    uint256 amount,\\n    bool isView\\n  ) internal returns (uint256 amountToRedeem, uint256 bonuses) {\\n    receiveCallback(_user, address(0x0));\\n    return CalculateRewardsLib.calculateRewards(isolate, _user, amount, isView);\\n  }\\n\\n  function determineDailyMultiplier(address sender)\\n    internal\\n    returns (uint256 multiplier)\\n  {\\n    multiplier = UpdateRedeemableLib.determineDailyMultiplier(isolate, sender);\\n  }\\n\\n  function _trackDailyRewards(bool force) internal {\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[\\n      isolate.currentCycle\\n    ];\\n\\n    if (\\n      force || (!cycle.canUnstake && block.timestamp > isolate.nextTimestamp)\\n    ) {\\n      uint256 daysMissed = 1;\\n      if (block.timestamp > isolate.nextTimestamp) {\\n        daysMissed = block\\n          .timestamp\\n          .sub(isolate.nextTimestamp)\\n          .div(isolate.rewardInterval)\\n          .add(1);\\n      }\\n      isolate.nextTimestamp = block.timestamp + isolate.rewardInterval;\\n      cycle.reserved = cycle.reserved.add(isolate.inflateBy * daysMissed);\\n      isolate.pCnfi.mint(\\n        address(isolate.cnfiTreasury),\\n        isolate.inflatepcnfiBy * daysMissed\\n      );\\n      for (uint256 i = 0; i < daysMissed; i++) {\\n        cycle.cnfiRewards[cycle.day] = isolate.inflateBy;\\n        cycle.day++;\\n      }\\n      isolate.cumulativeTotalWeight = isolate.cumulativeTotalWeight.add(\\n        isolate.totalWeight * daysMissed\\n      );\\n\\n      isolate.currentDay += daysMissed;\\n    }\\n  }\\n\\n  function _claim(address user)\\n    public\\n    view\\n    returns (uint256 amountToRedeem, uint256 bonuses)\\n  {}\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    uint256 amountToRedeem,\\n    uint256 bonuses\\n  );\\n\\n  function claimRewards()\\n    public\\n    onlyOwner\\n    returns (uint256 amountToRedeem, uint256 bonuses)\\n  {}\\n\\n  function claimRewardsWithAmount(uint256 amount)\\n    public\\n    onlyOwner\\n    returns (uint256 amountToRedeem, uint256 bonuses)\\n  {}\\n\\n  function restakeRewardsWithAmount(uint256 amount, uint256 tier)\\n    public\\n    onlyOwner\\n  {}\\n\\n  function recalculateWeights(\\n    address sender,\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    bool penalty\\n  ) internal {}\\n\\n  function stake(uint256 amount, uint256 commitmentTier) public {}\\n\\n  function unstake(uint256 amount) public returns (uint256 withdrawable) {}\\n}\\n\",\"keccak256\":\"0xe8a44c2581744743993f109f80b3007b2ce468c895dd98d6b5769be7bf5a04e3\",\"license\":\"MIT\"},\"contracts/staking/StakingControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { CNFITreasury } from \\\"../treasury/CNFITreasury.sol\\\";\\nimport { ICNFI } from \\\"../interfaces/ICNFI.sol\\\";\\nimport { pCNFI } from \\\"../token/pCNFI.sol\\\";\\nimport { sCNFI } from \\\"../token/sCNFI.sol\\\";\\n\\ncontract StakingControllerLib {\\n    struct Isolate {\\n      uint256 currentCycle;\\n      CNFITreasury cnfiTreasury;\\n      ICNFI cnfi;\\n      sCNFI sCnfi;\\n      pCNFI pCnfi;\\n      uint256 nextCycleTime;\\n      uint256 cycleInterval;\\n      uint256 nextTimestamp;\\n      uint256 inflateBy;\\n      uint256 inflatepcnfiBy;\\n      uint256 rewardInterval;\\n      uint256 tiersLength;\\n      uint256 baseUnstakePenalty;\\n      uint256 commitmentViolationPenalty;\\n      uint256 totalWeight;\\n      uint256 lastTotalWeight;\\n      uint256 cumulativeTotalWeight;\\n      mapping(uint256 => StakingControllerLib.Cycle) cycles;\\n      mapping(uint256 => StakingControllerLib.Tier) tiers;\\n      mapping(address => uint256) lockCommitments;\\n      mapping(address => uint256) bonusesAccrued;\\n      mapping(address => uint256) dailyBonusesAccrued;\\n      mapping(address => StakingControllerLib.UserWeightChanges) weightChanges;\\n      mapping(address => StakingControllerLib.DailyUser) dailyUsers;\\n      uint256[] inflateByChanged;\\n      mapping(uint256 => StakingControllerLib.InflateByChanged) inflateByValues;\\n      address pCnfiImplementation;\\n      uint256 currentDay;\\n    }\\n    struct User {\\n        uint256 currentWeight;\\n        uint256 minimumWeight;\\n        uint256 dailyWeight;\\n        uint256 multiplier;\\n        uint256 redeemable;\\n        uint256 daysClaimed;\\n        uint256 start;\\n        bool seen;\\n        uint256 currentTier;\\n        uint256 cyclesHeld;\\n    }\\n    struct DailyUser {\\n        uint256 multiplier;\\n        uint256 cycleEnd;\\n        uint256 cyclesHeld;\\n        uint256 redeemable;\\n        uint256 start;\\n        uint256 weight;\\n        uint256 claimed;\\n        uint256 commitment;\\n        uint256 lastDaySeen;\\n        uint256 cumulativeTotalWeight;\\n        uint256 cumulativeRewardWeight;\\n        uint256 lastTotalWeight;\\n        uint256 currentTier;\\n    }\\n    struct DetermineMultiplierLocals {\\n        uint256 scnfiBalance;\\n        uint256 minimum;\\n        uint256 tierIndex;\\n        Tier tier;\\n        uint256 cyclesHeld;\\n        uint256 multiplier;\\n    }\\n    struct DetermineRewardLocals {\\n        uint256 lastDaySeen;\\n        uint256 redeemable;\\n        uint256 totalWeight;\\n        uint256 multiplier;\\n        uint256 weight;\\n        uint256 rawWeight;\\n        uint256 totalRawWeight;\\n    }\\n    struct ReturnStats {\\n        uint256 lockCommitment;\\n        uint256 totalStakedInProtocol;\\n        uint256 cnfiReleasedPerDay;\\n        uint256 staked;\\n        uint256 currentCnfiBalance;\\n        uint256 unstakePenalty;\\n        uint256 redeemable;\\n        uint256 bonuses;\\n        uint256 apy;\\n        uint256 commitmentViolationPenalty;\\n        uint256 basePenalty;\\n        uint256 totalWeight;\\n        uint256 cycleChange;\\n        uint256 totalCyclesSeen;\\n    }\\n    struct Cycle {\\n        uint256 totalWeight;\\n        uint256 totalRawWeight;\\n        address pCnfiToken;\\n        uint256 reserved;\\n        uint256 day;\\n        uint256 inflateBy;\\n        mapping(address => User) users;\\n        mapping(uint256 => uint256) cnfiRewards;\\n        mapping(uint256 => uint256) pcnfiRewards;\\n        bool canUnstake;\\n    }\\n    struct Tier {\\n        uint256 multiplier;\\n        uint256 minimum;\\n        uint256 cycles;\\n    }\\n    struct EncodeableCycle {\\n        uint256 totalWeight;\\n        uint256 totalRawWeight;\\n        address pCnfiToken;\\n        uint256 reserved;\\n        uint256 day;\\n        bool canUnstake;\\n        uint256 lastCycleSeen;\\n        uint256 currentCycle;\\n    }\\n    struct UpdateLocals {\\n        uint256 multiplier;\\n        uint256 weight;\\n        uint256 prevMul;\\n        uint256 prevRes;\\n        uint256 prevRawRes;\\n        uint256 nextRes;\\n        uint256 nextRawRes;\\n    }\\n    struct RecalculateLocals {\\n        uint256 currentWeight;\\n        uint256 previousMultiplier;\\n        uint256 previousMinimumWeight;\\n        uint256 previousTotalWeight;\\n        uint256 totalInflated;\\n        uint256 daysToRedeem;\\n        uint256 previousRedeemable;\\n        uint256 amt;\\n        uint256 bonus;\\n        uint256 minimumWeight;\\n        uint256 multiplier;\\n        uint256 currentTotalWeight;\\n    }\\n    struct InflateByChanged {\\n        uint256 totalWeight;\\n        uint256 previousAmount;\\n    }\\n    struct DetermineInflateLocals {\\n        uint256 totalWeight;\\n        uint256 lastDaySeen;\\n        uint256 dayDifference;\\n        InflateByChanged changed;\\n        uint256 tempRedeemable;\\n        uint256 redeemable;\\n        uint256 daysToClaim;\\n        uint256 lastDayInEpoch;\\n        uint256 dayChanged;\\n        uint256 tempBonus;\\n        uint256 lastDayChanged;\\n    }\\n    struct UserWeightChanges {\\n        mapping(uint256 => uint256) changes;\\n        uint256 totalCyclesSeen;\\n    }\\n}\\n\",\"keccak256\":\"0x605911f49ec1fd7889a7d79e7c1a67fddbbd3206c71d926862501a441ed69800\",\"license\":\"MIT\"},\"contracts/staking/StakingControllerTemplate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport {StakingControllerLib} from \\\"./StakingControllerLib.sol\\\";\\nimport {\\n    SafeMathUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ViewExecutor} from \\\"../util/ViewExecutor.sol\\\";\\n\\ncontract StakingControllerTemplate is OwnableUpgradeable {\\n    using SafeMathUpgradeable for *;\\n    StakingControllerLib.Isolate isolate;\\n\\n    function currentCycle() public view returns (uint256 cycle) {\\n        cycle = isolate.currentCycle;\\n    }\\n\\n    function commitmentViolationPenalty()\\n        public\\n        view\\n        returns (uint256 penalty)\\n    {\\n        penalty = isolate.commitmentViolationPenalty;\\n    }\\n\\n    function dailyBonusesAccrued(address user)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        amount = isolate.dailyBonusesAccrued[user];\\n    }\\n}\\n\",\"keccak256\":\"0x4f40a7c602c4f1c84c9da829156ec52c23cd209b5de9d833164525f48723ac4a\",\"license\":\"MIT\"},\"contracts/staking/StakingEventsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary StakingEventsLib {\\n  event Redeemed(address indexed user, uint256 amountToRedeem, uint256 bonuses);\\n  function _emitRedeemed(address user, uint256 amountToRedeem, uint256 bonuses) internal {\\n    emit Redeemed(user, amountToRedeem, bonuses);\\n  }\\n  event Staked(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 indexed commitmentTier,\\n    uint256 minimum,\\n    bool timeLocked\\n  );\\n  function _emitStaked(address user, uint256 amount, uint256 commitmentTier, uint256 minimum, bool timeLocked) internal {\\n    emit Staked(user, amount, commitmentTier, minimum, timeLocked);\\n  }\\n  event Unstaked(address indexed user, uint256 amount, uint256 slashed);\\n  function _emitUnstaked(address user, uint256 amount, uint256 slashed) internal {\\n    emit Unstaked(user, amount, slashed);\\n  }\\n}\\n\",\"keccak256\":\"0xe4f4cf4fed3118d007170e5e68343f1ea4c7c839e958e9a5ed91a889906ba254\",\"license\":\"MIT\"},\"contracts/staking/UpdateRedeemableImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n  SafeMathUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\nimport {\\n  MathUpgradeable as Math\\n} from '@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol';\\nimport { UpdateToLastImplLib } from './UpdateToLastImplLib.sol';\\nimport { sCNFI } from '../token/sCNFI.sol';\\nimport { ComputeCyclesHeldLib } from './ComputeCyclesHeldLib.sol';\\nimport { BancorFormulaLib } from '../math/BancorFormulaLib.sol';\\n\\n\\nlibrary UpdateRedeemableImplLib {\\n  using SafeMathUpgradeable for *;\\n  using BancorFormulaLib for *;\\n\\n  function _updateCumulativeRewards(\\n    StakingControllerLib.Isolate storage isolate,\\n    address _user\\n  ) internal {\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[_user];\\n    if (user.multiplier == 0) user.multiplier = uint256(1 ether);\\n    if (isolate.currentDay > user.lastDaySeen) {\\n      user.cumulativeRewardWeight = user.cumulativeRewardWeight.add(\\n        isolate.currentDay.sub(user.lastDaySeen).mul(user.weight)\\n      );\\n    } else user.cumulativeRewardWeight = 0;\\n  }\\n\\n  function _updateRedeemable(\\n    StakingControllerLib.Isolate storage isolate,\\n    StakingControllerLib.DailyUser storage user,\\n    uint256 multiplier\\n  ) internal view returns (uint256 redeemable, uint256 bonuses) {\\n    StakingControllerLib.DetermineInflateLocals memory locals;\\n    locals.lastDayInEpoch = isolate.currentDay - 1;\\n    locals.lastDayChanged = user.lastDaySeen;\\n    if (locals.lastDayChanged < isolate.currentDay) {\\n      locals.dayDifference = isolate.currentDay.sub(locals.lastDayChanged);\\n      /*\\n            locals.totalWeight = isolate.cumulativeTotalWeight.sub(\\n                user.cumulativeTotalWeight\\n            );\\n            if (locals.totalWeight == 0) return (0, 0);\\n*/\\n\\n      uint256 denominator =\\n        Math.max(\\n          Math.min(\\n            isolate.cumulativeTotalWeight.sub(user.cumulativeTotalWeight),\\n            Math.max(Math.max(isolate.totalWeight, isolate.lastTotalWeight), user.lastTotalWeight).mul(locals.dayDifference)\\n          ),\\n          uint256(1 ether)\\n        );\\n    \\n      redeemable = locals\\n        .dayDifference\\n        .mul(isolate.inflateBy)\\n        .mul(user.cumulativeRewardWeight)\\n        .div(denominator);\\n\\n      if (multiplier > uint256(1 ether))\\n        bonuses = redeemable.mul(multiplier.sub(uint256(1 ether))).div(\\n          multiplier\\n        );\\n      else bonuses = 0;\\n    }\\n  }\\n\\n  function _determineMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    bool penaltyChange,\\n    address user,\\n    uint256 currentBalance\\n  ) internal returns (uint256 multiplier, uint256 amountToBurn) {\\n    StakingControllerLib.DetermineMultiplierLocals memory locals;\\n    StakingControllerLib.User storage currentUser =\\n      isolate.cycles[isolate.currentCycle].users[user];\\n    locals.minimum = uint256(~0);\\n    locals.tierIndex = isolate.lockCommitments[user];\\n    locals.tier = isolate.tiers[locals.tierIndex];\\n    locals.cyclesHeld = 0;\\n    locals.multiplier = locals.tierIndex == 0\\n      ? 1 ether\\n      : locals.tier.multiplier;\\n    for (uint256 i = isolate.currentCycle; i > 0; i--) {\\n      StakingControllerLib.Cycle storage cycle = isolate.cycles[i];\\n      StakingControllerLib.User storage _user = cycle.users[user];\\n      locals.minimum = Math.min(locals.minimum, _user.minimumWeight);\\n      currentUser.cyclesHeld = locals.cyclesHeld;\\n      currentUser.currentTier = locals.tierIndex;\\n      if (locals.minimum < locals.tier.minimum) {\\n        if (\\n          isolate.lockCommitments[user] == locals.tierIndex && penaltyChange\\n        ) {\\n          uint256 bonus = isolate.bonusesAccrued[user];\\n          amountToBurn = Math.min(bonus, currentBalance);\\n\\n          if (amountToBurn > 0) {\\n            isolate.bonusesAccrued[user] = 0;\\n            isolate.lockCommitments[user] = 0;\\n            currentUser.currentTier = 0;\\n            currentUser.cyclesHeld = 0;\\n          }\\n        }\\n        return (locals.multiplier, amountToBurn);\\n      }\\n      locals.cyclesHeld++;\\n      if (locals.tierIndex == 0) {\\n        locals.tierIndex++;\\n        if (locals.tierIndex > isolate.tiersLength)\\n          return (locals.multiplier, amountToBurn);\\n        locals.tier = isolate.tiers[locals.tierIndex];\\n      }\\n      if (locals.cyclesHeld == locals.tier.cycles) {\\n        locals.multiplier = locals.tier.multiplier;\\n        locals.tierIndex++;\\n\\n        isolate.lockCommitments[user] = 0;\\n        isolate.bonusesAccrued[user] = 0;\\n        if (locals.tierIndex > isolate.tiersLength)\\n          return (locals.multiplier, amountToBurn);\\n        locals.tier = isolate.tiers[locals.tierIndex];\\n      }\\n    }\\n    return (locals.multiplier, amountToBurn);\\n  }\\n\\n  function _updateDailyStatsToLast(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 weight,\\n    bool penalize,\\n    bool init\\n  ) internal returns (uint256 redeemable, uint256 bonuses) {\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\n    StakingControllerLib.UserWeightChanges storage weightChange =\\n      isolate.weightChanges[sender];\\n    if (user.start == 0) init = true;\\n    {\\n      uint256 cycleChange = user.cyclesHeld;\\n      (user.cycleEnd, user.cyclesHeld) = ComputeCyclesHeldLib\\n        ._computeCyclesHeld(\\n        user.cycleEnd,\\n        isolate.cycleInterval,\\n        user.cyclesHeld,\\n        block.timestamp\\n      );\\n      if (user.cyclesHeld > 0 && user.cyclesHeld > cycleChange) {\\n        uint256 baseWeight = isolate.sCnfi.balanceOf(sender);\\n        for (uint256 i = user.cyclesHeld; i > cycleChange; i--) {\\n          weightChange.changes[i] = baseWeight;\\n        }\\n        weightChange.totalCyclesSeen = user.cyclesHeld;\\n      }\\n    }\\n    if (penalize || init) {\\n      weightChange.changes[user.cyclesHeld] = weight;\\n      user.start = block.timestamp;\\n    }\\n    uint256 multiplier = _determineDailyMultiplier(isolate, sender);\\n    \\n    if (init) user.multiplier = multiplier;\\n    if (user.lastDaySeen < isolate.currentDay) {\\n      (redeemable, bonuses) = _updateRedeemable(isolate, user, multiplier);\\n      user.cumulativeTotalWeight = isolate.cumulativeTotalWeight;\\n      user.cumulativeRewardWeight = 0;\\n      isolate.dailyBonusesAccrued[sender] = isolate.dailyBonusesAccrued[sender]\\n        .add(bonuses);\\n      user.claimed = user.claimed.add(redeemable);\\n      user.redeemable = user.redeemable.add(redeemable);\\n      user.lastDaySeen = isolate.currentDay;\\n    }\\n    /*\\n        {\\n            if (!init && user.multiplier != multiplier && user.multiplier > 0) {\\n                uint256 previousUserWeight =\\n                    user.weight;\\n                uint256 newUserWeight =\\n                    weight.mul(multiplier).div(uint256(1 ether));\\n\\n                if (isolate.totalWeight == previousUserWeight)\\n                    isolate.totalWeight = newUserWeight;\\n                else\\n                    isolate.totalWeight = isolate\\n                        .totalWeight\\n                        .add(newUserWeight)\\n                        .sub(previousUserWeight);\\n            }\\n        }\\n\\t*/\\n    user.multiplier = multiplier;\\n    if (penalize) {\\n      _deductRewards(isolate, sender, weight);\\n      user.cycleEnd = block.timestamp + isolate.cycleInterval;\\n      user.cyclesHeld = 0;\\n      if (isolate.tiersLength > 0) {\\n        uint256 min = isolate.tiers[1].minimum;\\n        if (min > weight) weightChange.totalCyclesSeen = 0;\\n        else {\\n          weightChange.changes[weightChange.totalCyclesSeen] = weight;\\n        }\\n      } else {\\n        weightChange.totalCyclesSeen = 0;\\n      }\\n \\n    }\\n  }\\n\\n  function _recalculateDailyWeights(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 weight,\\n    bool penalize\\n  ) internal {\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\n    uint256 previousMultiplier = user.multiplier;\\n    if (previousMultiplier == 0) {\\n      previousMultiplier = 1 ether;\\n      user.multiplier = previousMultiplier;\\n      user.weight = isolate.sCnfi.balanceOf(sender);\\n    }\\n    uint256 prevWeight = user.weight;\\n    _updateDailyStatsToLast(isolate, sender, weight, penalize, false);\\n    user.weight = weight = weight.mul(user.multiplier).div(1 ether);\\n    isolate.lastTotalWeight = isolate.totalWeight;\\n    isolate.totalWeight = isolate.totalWeight.add(weight).sub(prevWeight);\\n    \\n\\n    user.lastTotalWeight = isolate.totalWeight;\\n  }\\n\\n  function _deductRewards(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 weight\\n  ) internal {\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\n    StakingControllerLib.Tier memory tier;\\n    if (user.commitment > 0) {\\n      tier = isolate.tiers[user.commitment];\\n      if (weight < tier.minimum && user.cyclesHeld < tier.cycles) {\\n        user.commitment = 0;\\n        (uint256 redeemable, uint256 toBurn) =\\n          _computeNewRedeemablePrincipalSplit(isolate, sender);\\n        isolate.dailyBonusesAccrued[sender] = 0;\\n        user.redeemable = redeemable;\\n        isolate.sCnfi.burn(sender, toBurn);\\n        user.multiplier = uint256(1 ether);\\n      }\\n    }\\n  }\\n\\n  function _computeNewRedeemablePrincipalSplit(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) internal view returns (uint256 newRedeemable, uint256 toBurn) {\\n    uint256 total =\\n      isolate.dailyBonusesAccrued[user]\\n        .mul(isolate.commitmentViolationPenalty)\\n        .div(uint256(1 ether));\\n    StakingControllerLib.DailyUser storage dailyUser = isolate.dailyUsers[user];\\n    uint256 _redeemable = dailyUser.redeemable;\\n\\n    newRedeemable =\\n      dailyUser.redeemable -\\n      Math.min(dailyUser.redeemable, total);\\n    if (newRedeemable == 0) {\\n      toBurn = total - _redeemable;\\n    }\\n  }\\n\\n  function _recalculateWeights(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    bool penalty\\n  ) internal {\\n    StakingControllerLib.RecalculateLocals memory locals;\\n    UpdateToLastImplLib._updateToLast(isolate, sender);\\n    StakingControllerLib.Cycle storage cycle =\\n      isolate.cycles[isolate.currentCycle];\\n    StakingControllerLib.User storage user = cycle.users[sender];\\n    //StakingControllerLib.User storage dailyUser = cycle.users[sender];\\n    user.start = block.timestamp;\\n\\n    locals.currentWeight = user.currentWeight;\\n    if (oldBalance != newBalance) {\\n      if (locals.currentWeight == oldBalance) user.currentWeight = newBalance;\\n      else\\n        user.currentWeight = locals.currentWeight.add(newBalance).sub(\\n          oldBalance\\n        );\\n    }\\n    // _recalculateDailyWeights(isolate, sender, newBalance.mul(dailyUser.multiplier).div(uint256(1 ether)), penalty);\\n    locals.previousMultiplier = user.multiplier;\\n    locals.previousMinimumWeight = user.minimumWeight;\\n    locals.previousTotalWeight = cycle.totalWeight;\\n    if (\\n      user.daysClaimed - cycle.day - 1 > 0 && locals.previousMinimumWeight > 0\\n    ) {\\n      locals.totalInflated;\\n      locals.daysToRedeem;\\n      if (cycle.day - 1 > user.daysClaimed)\\n        locals.daysToRedeem = uint256(cycle.day - 1).sub(user.daysClaimed);\\n      locals.totalInflated = isolate.inflateBy.mul(locals.daysToRedeem);\\n      locals.previousRedeemable = user.redeemable;\\n\\n      if (locals.totalInflated > 0) {\\n        locals.amt = locals\\n          .totalInflated\\n          .mul(locals.previousMinimumWeight)\\n          .mul(locals.previousMultiplier)\\n          .div(1 ether)\\n          .div(locals.previousTotalWeight);\\n        user.redeemable = locals.previousRedeemable.add(locals.amt);\\n        if (locals.previousMultiplier > 1 ether) {\\n          locals.bonus = locals\\n            .amt\\n            .mul(locals.previousMultiplier.sub(1 ether))\\n            .div(locals.previousMultiplier);\\n          isolate.bonusesAccrued[sender] = isolate.bonusesAccrued[sender].add(\\n            locals.bonus\\n          );\\n        }\\n        user.daysClaimed = cycle.day - 1;\\n      }\\n    }\\n    locals.minimumWeight = Math.min(user.minimumWeight, locals.currentWeight);\\n    (locals.multiplier, ) = _determineMultiplier(\\n      isolate,\\n      penalty,\\n      sender,\\n      newBalance\\n    );\\n    user.minimumWeight = locals.minimumWeight;\\n    locals.currentTotalWeight = cycle\\n      .totalWeight\\n      .add(locals.minimumWeight.mul(locals.multiplier).div(uint256(1 ether)))\\n      .sub(\\n      locals.previousMinimumWeight.mul(locals.previousMultiplier).div(\\n        uint256(1 ether)\\n      )\\n    );\\n\\n    cycle.totalWeight = locals.currentTotalWeight;\\n    cycle.totalRawWeight = cycle\\n      .totalRawWeight\\n      .add(user.currentWeight.mul(locals.multiplier).div(1 ether))\\n      .sub(locals.currentWeight.mul(locals.previousMultiplier).div(1 ether));\\n\\n    user.multiplier = locals.multiplier;\\n  }\\n\\n  function _determineDailyMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender\\n  ) internal returns (uint256 multiplier) {\\n    StakingControllerLib.DailyUser storage user = isolate.dailyUsers[sender];\\n    StakingControllerLib.UserWeightChanges storage weightChange =\\n      isolate.weightChanges[sender];\\n    StakingControllerLib.DetermineMultiplierLocals memory locals;\\n    locals.tierIndex = Math.max(user.commitment, user.currentTier);\\n    locals.tier = isolate.tiers[locals.tierIndex];\\n    locals.multiplier = locals.tierIndex == 0\\n      ? 1 ether\\n      : locals.tier.multiplier;\\n    multiplier = locals.multiplier;\\n    user.currentTier = 0;\\n    locals.minimum = uint256(~1);\\n    for (uint256 i = weightChange.totalCyclesSeen; i > 0; i--) {\\n      locals.minimum = Math.min(locals.minimum, weightChange.changes[i]);\\n      if (locals.minimum < locals.tier.minimum) {\\n        \\n        if (locals.tierIndex > 0 && locals.tierIndex > user.commitment)\\n          user.currentTier = --locals.tierIndex;\\n        locals.tier = isolate.tiers[locals.tierIndex];\\n        locals.multiplier = locals.tier.multiplier;\\n        return locals.multiplier;\\n      }\\n      user.currentTier = locals.tierIndex;\\n      locals.cyclesHeld++;\\n      if (locals.cyclesHeld >= locals.tier.cycles) {\\n        if (user.commitment == locals.tierIndex) {\\n          user.commitment = 0;\\n        }\\n        locals.tierIndex++;\\n\\n        if (locals.tierIndex > isolate.tiersLength - 1) {\\n          return isolate.tiers[--locals.tierIndex].multiplier;\\n        }\\n        locals.tier = isolate.tiers[locals.tierIndex];\\n\\n        locals.multiplier = locals.tier.multiplier;\\n      }\\n    }\\n    if(user.commitment == 0) {\\n      locals.tier = isolate.tiers[user.currentTier];\\n      multiplier = locals.tier.multiplier;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0c4c56d17f45cde3af45af9da0bb378e735c84a505d41fbe31b57927c00446c8\",\"license\":\"MIT\"},\"contracts/staking/UpdateRedeemableLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\nimport { MathUpgradeable as Math } from \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport { UpdateToLastLib } from \\\"./UpdateToLastLib.sol\\\";\\nimport { sCNFI } from \\\"../token/sCNFI.sol\\\";\\nimport { ComputeCyclesHeldLib } from \\\"./ComputeCyclesHeldLib.sol\\\";\\nimport { UpdateRedeemableImplLib } from \\\"./UpdateRedeemableImplLib.sol\\\";\\n\\nlibrary UpdateRedeemableLib {\\n  using SafeMathUpgradeable for *;\\n\\n  function determineMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    bool penaltyChange,\\n    address user,\\n    uint256 currentBalance\\n  ) external returns (uint256 multiplier, uint256 amountToBurn) {\\n    (multiplier, amountToBurn) = UpdateRedeemableImplLib._determineMultiplier(isolate, penaltyChange, user, currentBalance);\\n  }\\n  function updateCumulativeRewards(StakingControllerLib.Isolate storage isolate, address _user) internal {\\n    UpdateRedeemableImplLib._updateCumulativeRewards(isolate, _user);\\n  }\\n  function updateRedeemable(\\n    StakingControllerLib.Isolate storage isolate,\\n    StakingControllerLib.DailyUser storage user,\\n    uint256 multiplier\\n  ) external view returns (uint256 redeemable, uint256 bonuses) {\\n    (redeemable, bonuses) = UpdateRedeemableImplLib._updateRedeemable(isolate, user, multiplier);\\n  }\\n  function updateDailyStatsToLast(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 weight,\\n    bool penalize,\\n    bool init\\n  ) external returns (uint256 redeemable, uint256 bonuses) {\\n    (redeemable, bonuses) = UpdateRedeemableImplLib._updateDailyStatsToLast(isolate, sender, weight, penalize, init);\\n  }\\n\\n  function recalculateDailyWeights(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 newBalance,\\n    bool penalty\\n  ) external {\\n    UpdateRedeemableImplLib._recalculateDailyWeights(isolate, sender, newBalance, penalty);\\n  }\\n\\n  function recalculateWeights(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender,\\n    uint256 oldBalance,\\n    uint256 newBalance,\\n    bool penalty\\n  ) external {\\n    UpdateRedeemableImplLib._recalculateWeights(isolate, sender, oldBalance, newBalance, penalty);\\n  }\\n  function determineDailyMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    address sender\\n  ) external returns (uint256 multiplier) {\\n    multiplier = UpdateRedeemableImplLib._determineDailyMultiplier(isolate, sender);\\n  }\\n}\\n\",\"keccak256\":\"0xe87f0e0b35630434d42889224c6accccd9ab71e166a764d0d0ecfc42b6275501\",\"license\":\"MIT\"},\"contracts/staking/UpdateToLastImplLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport { StakingControllerLib } from './StakingControllerLib.sol';\\nimport {\\n  SafeMathUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol';\\nimport {\\n  MathUpgradeable as Math\\n} from '@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol';\\nimport { GetDisplayTierLib } from \\\"./GetDisplayTierLib.sol\\\";\\n\\nlibrary UpdateToLastImplLib {\\n  using SafeMathUpgradeable for *;\\n  struct UpdateToLastLocals {\\n    uint256 cycleNumber;\\n    uint256 weight;\\n    uint256 multiplier;\\n    uint256 lastDaySeen;\\n    uint256 redeemable;\\n    uint256 totalWeight;\\n    uint256 daysToRedeem;\\n    uint256 bonus;\\n    uint256 i;\\n  }\\n  function _updateToLast(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) internal {\\n    UpdateToLastLocals memory locals;\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[isolate.currentCycle];\\n    if (cycle.users[user].seen) return;\\n    StakingControllerLib.Cycle storage ptr = cycle;\\n    locals.cycleNumber = isolate.currentCycle;\\n    while (!ptr.users[user].seen && locals.cycleNumber > 0) {\\n      ptr = isolate.cycles[--locals.cycleNumber];\\n\\n      if (ptr.users[user].seen) {\\n        locals.weight = ptr.users[user].currentWeight;\\n        locals.multiplier = ptr.users[user].multiplier;\\n        cycle.users[user].seen = true;\\n        cycle.users[user].currentWeight = locals.weight;\\n        cycle.users[user].minimumWeight = locals.weight;\\n        cycle.users[user].multiplier = locals.multiplier;\\n        cycle.users[user].redeemable = ptr.users[user].redeemable;\\n        cycle.users[user].start = ptr.users[user].start;\\n        locals.lastDaySeen = ptr.users[user].daysClaimed;\\n        locals.redeemable = 0;\\n        locals.totalWeight = ptr.totalWeight;\\n\\n        if (locals.totalWeight > 0 && ptr.reserved > 0) {\\n          locals.daysToRedeem = 0;\\n          if (ptr.day - 1 > locals.lastDaySeen)\\n            locals.daysToRedeem = uint256(ptr.day - 1).sub(locals.lastDaySeen);\\n          locals.redeemable = locals.daysToRedeem.mul(isolate.inflateBy);\\n          locals.redeemable = locals\\n            .redeemable\\n            .mul(locals.weight)\\n            .mul(locals.multiplier)\\n            .div(locals.totalWeight)\\n            .div(1 ether);\\n          if (locals.multiplier > 1 ether) {\\n            locals.bonus = uint256(locals.multiplier.sub(1 ether))\\n              .mul(locals.redeemable)\\n              .div(locals.multiplier);\\n            isolate.bonusesAccrued[user] = isolate.bonusesAccrued[user].add(locals.bonus);\\n          }\\n          cycle.users[user].redeemable = cycle.users[user].redeemable.add(\\n            locals.redeemable\\n          );\\n        }\\n\\n        for (\\n          locals.i = locals.cycleNumber + 1;\\n          locals.i < isolate.currentCycle;\\n          locals.i++\\n        ) {\\n          ptr = isolate.cycles[locals.i];\\n          locals.totalWeight = ptr.totalWeight;\\n          ptr.users[user].minimumWeight = locals.weight;\\n          ptr.users[user].multiplier = locals.multiplier;\\n          if (locals.totalWeight > 0 && ptr.reserved > 0) {\\n            locals.redeemable = ptr\\n              .reserved\\n              .mul(locals.weight)\\n              .mul(locals.multiplier)\\n              .div(ptr.totalWeight)\\n              .div(1 ether);\\n            cycle.users[user].redeemable = cycle.users[user].redeemable.add(\\n              locals.redeemable\\n            );\\n          }\\n        }\\n\\n        return;\\n      }\\n    }\\n    cycle.users[user].seen = true;\\n    cycle.users[user].multiplier = 1 ether;\\n  }\\n\\n  function _updateWeightsWithMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user,\\n    uint256 multiplier\\n  ) internal returns (uint256) {\\n    StakingControllerLib.Cycle storage cycle = isolate.cycles[isolate.currentCycle];\\n    StakingControllerLib.User storage _sender = cycle.users[user];\\n    StakingControllerLib.UpdateLocals memory locals;\\n    locals.multiplier = multiplier;\\n    locals.weight = Math.min(_sender.minimumWeight, _sender.currentWeight);\\n    locals.prevMul = _sender.multiplier;\\n    locals.prevRes = locals.weight.mul(locals.prevMul).div(1 ether);\\n    locals.prevRawRes = _sender.currentWeight.mul(locals.prevMul).div(1 ether);\\n    locals.nextRes = locals.weight.mul(locals.multiplier).div(1 ether);\\n    locals.nextRawRes = _sender.currentWeight.mul(locals.multiplier).div(\\n      1 ether\\n    );\\n    if (locals.multiplier != _sender.multiplier) {\\n      _sender.multiplier = locals.multiplier;\\n      if (cycle.totalWeight == locals.prevRes)\\n        cycle.totalWeight = locals.nextRes;\\n      else\\n        cycle.totalWeight = cycle.totalWeight.sub(locals.prevRes).add(\\n          locals.nextRes\\n        );\\n      if (cycle.totalRawWeight == locals.prevRawRes)\\n        cycle.totalRawWeight = locals.nextRawRes;\\n      else\\n        cycle.totalRawWeight = cycle.totalRawWeight.sub(locals.prevRawRes).add(\\n          locals.nextRawRes\\n        );\\n    }\\n    return locals.multiplier;\\n  }\\n}\\n\",\"keccak256\":\"0x29a542b9472bc660376f73ab4f04f62f409f9f585896235d02cb880ee25e6e9f\",\"license\":\"MIT\"},\"contracts/staking/UpdateToLastLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\nimport { StakingControllerLib } from \\\"./StakingControllerLib.sol\\\";\\nimport { UpdateToLastImplLib } from \\\"./UpdateToLastImplLib.sol\\\";\\n\\nlibrary UpdateToLastLib {\\n  function updateToLast(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user\\n  ) external {\\n    UpdateToLastImplLib._updateToLast(isolate, user);\\n  }\\n  function updateWeightsWithMultiplier(\\n    StakingControllerLib.Isolate storage isolate,\\n    address user,\\n    uint256 multiplier\\n  ) external returns (uint256) {\\n    return UpdateToLastImplLib._updateWeightsWithMultiplier(isolate, user, multiplier);\\n  }\\n}\\n\",\"keccak256\":\"0xb48a550350408792c731966ea1b5674e0e417d0d4160a52d44518b499346e3fd\",\"license\":\"MIT\"},\"contracts/token/CNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IStakingController} from \\\"../interfaces/IStakingController.sol\\\";\\n\\ncontract ConnectToken is ERC20Upgradeable, OwnableUpgradeable {\\n  uint256 public unlockAt;\\n  mapping(address => bool) authorizedBeforeUnlock;\\n  bytes32 constant STAKING_CONTROLLER_SLOT = keccak256(\\\"staking-controller\\\");\\n\\n  function initialize() public initializer {\\n    __Ownable_init_unchained();\\n  }\\n\\n  function getStakingController() public view returns (address returnValue) {\\n    bytes32 local = STAKING_CONTROLLER_SLOT;\\n    assembly {\\n      returnValue := and(\\n        0xffffffffffffffffffffffffffffffffffffffff,\\n        sload(local)\\n      )\\n    }\\n  }\\n\\n  function setStakingController(address) public virtual {\\n    assembly {\\n      sstore(0x59195, 0x1)\\n    }\\n  } // stub\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address own = getStakingController();\\n    if (own == msg.sender) _approve(from, own, amount);\\n    require(from != 0x2C6900b24221dE2B4A45c8c89482fFF96FFB7E55, \\\"not allowed\\\");\\n    return super.transferFrom(from, to, amount);\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    require(\\n      msg.sender != 0x2C6900b24221dE2B4A45c8c89482fFF96FFB7E55,\\n      \\\"not allowed\\\"\\n    );\\n    return super.transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x7f75a5bc7ec9e1b05132d38ff5eb326204902b49cd2303a93333782a743da1d5\",\"license\":\"MIT\"},\"contracts/token/lib/pCNFIFactoryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {pCNFI} from \\\"../pCNFI.sol\\\";\\n\\nlibrary pCNFIFactoryLib {\\n    bytes32 constant PCNFI_SALT = keccak256(\\\"connect-pcnfi\\\");\\n\\n    function getSalt() external pure returns (bytes32 result) {\\n        result = PCNFI_SALT;\\n    }\\n\\n    function getBytecode() external pure returns (bytes memory result) {\\n        result = type(pCNFI).creationCode;\\n    }\\n}\\n\",\"keccak256\":\"0xc0ed45e49498ae9191aa342ed36851528103e885801fed8ff5d62eb095eae311\",\"license\":\"MIT\"},\"contracts/token/lib/pCNFILib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { StringLib } from '../../util/StringLib.sol';\\nimport { IStakingController } from '../../interfaces/IStakingController.sol';\\n\\nlibrary pCNFILib {\\n  using StringLib for *;\\n\\n  function toSymbol(uint256 cycle) internal pure returns (string memory) {\\n    return abi.encodePacked('pCNFI', cycle.toString()).toString();\\n  }\\n\\n  function toName(uint256 cycle) internal pure returns (string memory) {\\n    return abi.encodePacked('pCNFI Cycle ', cycle.toString()).toString();\\n  }\\n}\\n\",\"keccak256\":\"0x67236aa3de34ee2eb87c2dbe1186a6319f20a00b88ae50472eeeb71a5cc6301f\",\"license\":\"MIT\"},\"contracts/token/pCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n  ERC20Upgradeable\\n} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport { StringUtils } from '../util/Strings.sol';\\nimport {\\n  OwnableUpgradeable\\n} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport { pCNFILib } from './lib/pCNFILib.sol';\\n\\ncontract pCNFI is ERC20Upgradeable, OwnableUpgradeable {\\n  using StringUtils for *;\\n\\n  function initialize(uint256 cycle) public initializer {\\n    __ERC20_init_unchained(pCNFILib.toName(cycle), pCNFILib.toSymbol(cycle));\\n    __Ownable_init_unchained();\\n  }\\n\\n  function mint(address target, uint256 amount) public onlyOwner {\\n    _mint(target, amount);\\n  }\\n\\n  function burn(address target, uint256 amount) public onlyOwner {\\n    _burn(target, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x993b17a5eaabf5c8be4eac35c8fd1604725c3b9d784927e5392119be2610ed3c\",\"license\":\"MIT\"},\"contracts/token/sCNFI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract sCNFI is ERC20Upgradeable, OwnableUpgradeable {\\n    function initialize() public {\\n        __ERC20_init_unchained(\\\"Connect Financial Staking\\\", \\\"sCNFI\\\");\\n        __Ownable_init_unchained();\\n    }\\n\\n    function mint(address target, uint256 amount) public onlyOwner {\\n        _mint(target, amount);\\n    }\\n\\n    function burn(address target, uint256 amount) public onlyOwner {\\n        _burn(target, amount);\\n    }\\n\\n    function transfer(address target, uint256 amount)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        return super.transfer(target, amount);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override onlyOwner returns (bool) {\\n        return super.transferFrom(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4941e9034eea37691201ad6cb8e0ed62e168968b4a3fcf954f967c9bf20b9c06\",\"license\":\"MIT\"},\"contracts/treasury/CNFITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    IERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract CNFITreasury is OwnableUpgradeable {\\n    address relayer;\\n    modifier onlyRelayer {\\n        require(msg.sender == owner() || msg.sender == relayer, \\\"unauthorized\\\");\\n        _;\\n    }\\n\\n    function initialize(address _relayer) public {\\n        __Ownable_init_unchained();\\n        relayer = _relayer;\\n    }\\n\\n    function transferToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public onlyRelayer returns (bool) {\\n        IERC20Upgradeable(token).transfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7126ea146f00fd43f27962278a07e7d3b416c20ab43e051ef6254a81138fd438\",\"license\":\"MIT\"},\"contracts/util/MemcpyLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary MemcpyLib {\\n  function memcpy(bytes32 dest, bytes32 src, uint256 len) internal pure {\\n    assembly {\\n      for {} iszero(lt(len, 0x20)) { len := sub(len, 0x20) } {\\n        mstore(dest, mload(src))\\n        dest := add(dest, 0x20)\\n        src := add(src, 0x20)\\n      }\\n      let mask := sub(shl(mul(sub(32, len), 8), 1), 1)\\n      mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6692972a7b1f397575ce10ab8652b92337ae9b30fda75c7648acb6c309d7dbf0\",\"license\":\"MIT\"},\"contracts/util/RevertCaptureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {SliceLib} from \\\"./SliceLib.sol\\\";\\n\\nlibrary RevertCaptureLib {\\n    using SliceLib for *;\\n    uint32 constant REVERT_WITH_REASON_MAGIC = 0x08c379a0; // keccak256(\\\"Error(string)\\\")\\n\\n    function decodeError(bytes memory buffer)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        if (buffer.length == 0) return \\\"captured empty revert buffer\\\";\\n        if (\\n            uint32(uint256(bytes32(buffer.toSlice(0, 4).asWord()))) ==\\n            REVERT_WITH_REASON_MAGIC\\n        ) {\\n            bytes memory revertMessageEncoded = buffer.toSlice(4).copy();\\n            if (revertMessageEncoded.length == 0)\\n                return \\\"captured empty revert message\\\";\\n            string memory revertMessage =\\n                abi.decode(revertMessageEncoded, (string));\\n            return revertMessage;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x12dcd65ed1e8b9494e8c30ed4f45673e3a10192ababa02765f589bd5642dfd9c\",\"license\":\"MIT\"},\"contracts/util/RevertConstantsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract RevertConstantsLib {\\n    bytes4 constant REVERT_MAGIC = 0x08c379a0;\\n    bytes4 constant REVERT_MASK = 0xffffffff;\\n}\\n\",\"keccak256\":\"0x9f890f15b5dc328d3fab7dc9632e4dd6ce48d75de76cef57f63ccb436413ebd5\",\"license\":\"MIT\"},\"contracts/util/SliceLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport { MemcpyLib } from \\\"./MemcpyLib.sol\\\";\\n\\nlibrary SliceLib {\\n  struct Slice {\\n    uint256 data;\\n    uint256 length;\\n    uint256 offset;\\n  }\\n  function toPtr(bytes memory input, uint256 offset) internal pure returns (uint256 data) {\\n    assembly {\\n      data := add(input, add(offset, 0x20))\\n    }\\n  }\\n  function toSlice(bytes memory input, uint256 offset, uint256 length) internal pure returns (Slice memory retval) {\\n    retval.data = toPtr(input, offset);\\n    retval.length = length;\\n    retval.offset = offset;\\n  }\\n  function toSlice(bytes memory input) internal pure returns (Slice memory) {\\n    return toSlice(input, 0);\\n  }\\n  function toSlice(bytes memory input, uint256 offset) internal pure returns (Slice memory) {\\n    if (input.length < offset) offset = input.length;\\n    return toSlice(input, offset, input.length - offset);\\n  }\\n  function toSlice(Slice memory input, uint256 offset, uint256 length) internal pure returns (Slice memory) {\\n    return Slice({\\n      data: input.data + offset,\\n      offset: input.offset + offset,\\n      length: length\\n    });\\n  }\\n  function toSlice(Slice memory input, uint256 offset) internal pure returns (Slice memory) {\\n    return toSlice(input, offset, input.length - offset);\\n  }\\n  function toSlice(Slice memory input) internal pure returns (Slice memory) {\\n    return toSlice(input, 0);\\n  }\\n  function maskLastByteOfWordAt(uint256 data) internal pure returns (uint8 lastByte) {\\n    assembly {\\n      lastByte := and(mload(data), 0xff)\\n    }\\n  }\\n  function get(Slice memory slice, uint256 index) internal pure returns (bytes1 result) {\\n    return bytes1(maskLastByteOfWordAt(slice.data - 0x1f + index));\\n  }\\n  function setByteAt(uint256 ptr, uint8 value) internal pure {\\n    assembly {\\n      mstore8(ptr, value)\\n    }\\n  }\\n  function set(Slice memory slice, uint256 index, uint8 value) internal pure {\\n    setByteAt(slice.data + index, value);\\n  }\\n  function wordAt(uint256 ptr, uint256 length) internal pure returns (bytes32 word) {\\n    assembly {\\n      let mask := sub(shl(mul(length, 0x8), 0x1), 0x1)\\n      word := and(mload(sub(ptr, sub(0x20, length))), mask)\\n    }\\n  }\\n  function asWord(Slice memory slice) internal pure returns (bytes32 word) {\\n    uint256 data = slice.data;\\n    uint256 length = slice.length;\\n    return wordAt(data, length);\\n  }\\n  function toDataStart(bytes memory input) internal pure returns (bytes32 start) {\\n    assembly {\\n      start := add(input, 0x20)\\n    }\\n  }\\n  function copy(Slice memory slice) internal pure returns (bytes memory retval) {\\n    uint256 length = slice.length;\\n    retval = new bytes(length);\\n    bytes32 src = bytes32(slice.data);\\n    bytes32 dest = toDataStart(retval);\\n    MemcpyLib.memcpy(dest, src, length);\\n  }\\n  function keccakAt(uint256 data, uint256 length) internal pure returns (bytes32 result) {\\n    assembly {\\n      result := keccak256(data, length)\\n    }\\n  }\\n  function toKeccak(Slice memory slice) internal pure returns (bytes32 result) {\\n    return keccakAt(slice.data, slice.length);\\n  }\\n}\\n\",\"keccak256\":\"0xde40e25d2efd85a714714a080b7d62b3633effa0613d4ca7831a5abbf70180d3\",\"license\":\"MIT\"},\"contracts/util/StringLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary StringLib {\\n  /// @notice Convert a uint value to its decimal string representation\\n  // solium-disable-next-line security/no-assign-params\\n  function toString(uint256 _i) internal pure returns (string memory) {\\n    if (_i == 0) {\\n      return '0';\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len - 1;\\n    while (_i != 0) {\\n      bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  /// @notice Convert a bytes32 value to its hex string representation\\n  function toString(bytes32 _value) internal pure returns (string memory) {\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(32 * 2 + 2);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint256 i = 0; i < 32; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(_value[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(_value[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  /// @notice Convert an address to its hex string representation\\n  function toString(address _addr) internal pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(_addr));\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(20 * 2 + 2);\\n    str[0] = '0';\\n    str[1] = 'x';\\n    for (uint256 i = 0; i < 20; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(value[i + 12] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(value[i + 12] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function toString(bytes memory input) internal pure returns (string memory) {\\n    return string(input);\\n  }\\n}\\n\",\"keccak256\":\"0xf3de8e92404406402090d77aee66a83216e7d2e4b0a618791f0126207020189d\",\"license\":\"MIT\"},\"contracts/util/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n * @title String & slice utility library for Solidity contracts.\\n * @author Nick Johnson <arachnid@notdot.net>\\n *\\n * @dev Functionality in this library is largely implemented using an\\n *      abstraction called a 'slice'. A slice represents a part of a string -\\n *      anything from the entire string to a single character, or even no\\n *      characters at all (a 0-length slice). Since a slice only has to specify\\n *      an offset and a length, copying and manipulating slices is a lot less\\n *      expensive than copying and manipulating the strings they reference.\\n *\\n *      To further reduce gas costs, most functions on slice that need to return\\n *      a slice modify the original one instead of allocating a new one; for\\n *      instance, `s.split(\\\".\\\")` will return the text up to the first '.',\\n *      modifying s to only contain the remainder of the string after the '.'.\\n *      In situations where you do not want to modify the original slice, you\\n *      can make a copy first with `.copy()`, for example:\\n *      `s.copy().split(\\\".\\\")`. Try and avoid using this idiom in loops; since\\n *      Solidity has no memory management, it will result in allocating many\\n *      short-lived slices that are later discarded.\\n *\\n *      Functions that return two slices come in two versions: a non-allocating\\n *      version that takes the second slice as an argument, modifying it in\\n *      place, and an allocating version that allocates and returns the second\\n *      slice; see `nextRune` for example.\\n *\\n *      Functions that have to copy string data will return strings rather than\\n *      slices; these can be cast back to slices for further processing if\\n *      required.\\n *\\n *      For convenience, some functions are provided with non-modifying\\n *      variants that create a new slice and return both; for instance,\\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\\n *      corresponding to the left and right parts of the string.\\n */\\n\\npragma solidity ^0.6.0;\\n\\nlibrary StringUtils {\\n    struct slice {\\n        uint _len;\\n        uint _ptr;\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for(; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire string.\\n     * @param self The string to make a slice from.\\n     * @return A newly allocated slice containing the entire string.\\n     */\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\n        uint ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns the length of a null-terminated bytes32 string.\\n     * @param self The value to find the length of.\\n     * @return The length of the string, from 0 to 32.\\n     */\\n    function len(bytes32 self) internal pure returns (uint) {\\n        uint ret;\\n        if (self == 0)\\n            return 0;\\n        if (self & bytes32(uint256(0xffffffffffffffffffffffffffffffff)) == 0) {\\n            ret += 16;\\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\\n        }\\n        if (self & bytes32(uint256(0xffffffffffffffff)) == 0) {\\n            ret += 8;\\n            self = bytes32(uint(self) / 0x10000000000000000);\\n        }\\n        if (self & bytes32(uint256(0xffffffff)) == 0) {\\n            ret += 4;\\n            self = bytes32(uint(self) / 0x100000000);\\n        }\\n        if (self & bytes32(uint256(0xffff)) == 0) {\\n            ret += 2;\\n            self = bytes32(uint(self) / 0x10000);\\n        }\\n        if (self & bytes32(uint256(0xff)) == 0) {\\n            ret += 1;\\n        }\\n        return 32 - ret;\\n    }\\n\\n    /*\\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\\n     *      null-terminated utf-8 string.\\n     * @param self The bytes32 value to convert to a slice.\\n     * @return A new slice containing the value of the input argument up to the\\n     *         first null.\\n     */\\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\\n        // Allocate space for `self` in memory, copy it there, and point ret at it\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(0x40, add(ptr, 0x20))\\n            mstore(ptr, self)\\n            mstore(add(ret, 0x20), ptr)\\n        }\\n        ret._len = len(self);\\n    }\\n\\n    /*\\n     * @dev Returns a new slice containing the same data as the current slice.\\n     * @param self The slice to copy.\\n     * @return A new slice containing the same data as `self`.\\n     */\\n    function copy(slice memory self) internal pure returns (slice memory) {\\n        return slice(self._len, self._ptr);\\n    }\\n\\n    /*\\n     * @dev Copies a slice to a new string.\\n     * @param self The slice to copy.\\n     * @return A newly allocated string containing the slice's text.\\n     */\\n    function toString(slice memory self) internal pure returns (string memory) {\\n        string memory ret = new string(self._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        memcpy(retptr, self._ptr, self._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the length in runes of the slice. Note that this operation\\n     *      takes time proportional to the length of the slice; avoid using it\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\n     *      the slice is empty or not.\\n     * @param self The slice to operate on.\\n     * @return The length of the slice in runes.\\n     */\\n    function len(slice memory self) internal pure returns (uint l) {\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\n        uint ptr = self._ptr - 31;\\n        uint end = ptr + self._len;\\n        for (l = 0; ptr < end; l++) {\\n            uint8 b;\\n            assembly { b := and(mload(ptr), 0xFF) }\\n            if (b < 0x80) {\\n                ptr += 1;\\n            } else if(b < 0xE0) {\\n                ptr += 2;\\n            } else if(b < 0xF0) {\\n                ptr += 3;\\n            } else if(b < 0xF8) {\\n                ptr += 4;\\n            } else if(b < 0xFC) {\\n                ptr += 5;\\n            } else {\\n                ptr += 6;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice is empty (has a length of 0).\\n     * @param self The slice to operate on.\\n     * @return True if the slice is empty, False otherwise.\\n     */\\n    function empty(slice memory self) internal pure returns (bool) {\\n        return self._len == 0;\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first slice to compare.\\n     * @param other The second slice to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\n        uint shortest = self._len;\\n        if (other._len < self._len)\\n            shortest = other._len;\\n\\n        uint selfptr = self._ptr;\\n        uint otherptr = other._ptr;\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            uint a;\\n            uint b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask = uint256(-1); // 0xffff...\\n                if(shortest < 32) {\\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\n                }\\n                uint256 diff = (a & mask) - (b & mask);\\n                if (diff != 0)\\n                    return int(diff);\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n        return int(self._len) - int(other._len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two slices contain the same text.\\n     * @param self The first slice to compare.\\n     * @param self The second slice to compare.\\n     * @return True if the slices are equal, false otherwise.\\n     */\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\n        return compare(self, other) == 0;\\n    }\\n\\n    /*\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\n     *      slice to point to the next rune and returning `self`.\\n     * @param self The slice to operate on.\\n     * @param rune The slice that will contain the first rune.\\n     * @return `rune`.\\n     */\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\n        rune._ptr = self._ptr;\\n\\n        if (self._len == 0) {\\n            rune._len = 0;\\n            return rune;\\n        }\\n\\n        uint l;\\n        uint b;\\n        // Load the first byte of the rune into the LSBs of b\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\n        if (b < 0x80) {\\n            l = 1;\\n        } else if(b < 0xE0) {\\n            l = 2;\\n        } else if(b < 0xF0) {\\n            l = 3;\\n        } else {\\n            l = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (l > self._len) {\\n            rune._len = self._len;\\n            self._ptr += self._len;\\n            self._len = 0;\\n            return rune;\\n        }\\n\\n        self._ptr += l;\\n        self._len -= l;\\n        rune._len = l;\\n        return rune;\\n    }\\n\\n    /*\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\n     *      to the next rune.\\n     * @param self The slice to operate on.\\n     * @return A slice containing only the first rune from `self`.\\n     */\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\n        nextRune(self, ret);\\n    }\\n\\n    /*\\n     * @dev Returns the number of the first codepoint in the slice.\\n     * @param self The slice to operate on.\\n     * @return The number of the first codepoint in the slice.\\n     */\\n    function ord(slice memory self) internal pure returns (uint ret) {\\n        if (self._len == 0) {\\n            return 0;\\n        }\\n\\n        uint word;\\n        uint length;\\n        uint divisor = 2 ** 248;\\n\\n        // Load the rune into the MSBs of b\\n        assembly { word:= mload(mload(add(self, 32))) }\\n        uint b = word / divisor;\\n        if (b < 0x80) {\\n            ret = b;\\n            length = 1;\\n        } else if(b < 0xE0) {\\n            ret = b & 0x1F;\\n            length = 2;\\n        } else if(b < 0xF0) {\\n            ret = b & 0x0F;\\n            length = 3;\\n        } else {\\n            ret = b & 0x07;\\n            length = 4;\\n        }\\n\\n        // Check for truncated codepoints\\n        if (length > self._len) {\\n            return 0;\\n        }\\n\\n        for (uint i = 1; i < length; i++) {\\n            divisor = divisor / 256;\\n            b = (word / divisor) & 0xFF;\\n            if (b & 0xC0 != 0x80) {\\n                // Invalid UTF-8 sequence\\n                return 0;\\n            }\\n            ret = (ret * 64) | (b & 0x3F);\\n        }\\n\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of the slice.\\n     * @param self The slice to hash.\\n     * @return The hash of the slice.\\n     */\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\n        assembly {\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns true if `self` starts with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        if (self._ptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let selfptr := mload(add(self, 0x20))\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` starts with `needle`, `needle` is removed from the\\n     *      beginning of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        bool equal = true;\\n        if (self._ptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let selfptr := mload(add(self, 0x20))\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n            self._ptr += needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Returns true if the slice ends with `needle`.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return True if the slice starts with the provided text, false otherwise.\\n     */\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\n        if (self._len < needle._len) {\\n            return false;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n\\n        if (selfptr == needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(needle)\\n            let needleptr := mload(add(needle, 0x20))\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n        }\\n\\n        return equal;\\n    }\\n\\n    /*\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\n     *      end of `self`. Otherwise, `self` is unmodified.\\n     * @param self The slice to operate on.\\n     * @param needle The slice to search for.\\n     * @return `self`\\n     */\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        if (self._len < needle._len) {\\n            return self;\\n        }\\n\\n        uint selfptr = self._ptr + self._len - needle._len;\\n        bool equal = true;\\n        if (selfptr != needle._ptr) {\\n            assembly {\\n                let length := mload(needle)\\n                let needleptr := mload(add(needle, 0x20))\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\n            }\\n        }\\n\\n        if (equal) {\\n            self._len -= needle._len;\\n        }\\n\\n        return self;\\n    }\\n\\n    // Returns the memory address of the first byte of the first occurrence of\\n    // `needle` in `self`, or the first byte after `self` if not found.\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr = selfptr;\\n        uint idx;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                uint end = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr >= end)\\n                        return selfptr + selflen;\\n                    ptr++;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr;\\n                    ptr += 1;\\n                }\\n            }\\n        }\\n        return selfptr + selflen;\\n    }\\n\\n    // Returns the memory address of the first byte after the last occurrence of\\n    // `needle` in `self`, or the address of `self` if not found.\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\n        uint ptr;\\n\\n        if (needlelen <= selflen) {\\n            if (needlelen <= 32) {\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\n\\n                bytes32 needledata;\\n                assembly { needledata := and(mload(needleptr), mask) }\\n\\n                ptr = selfptr + selflen - needlelen;\\n                bytes32 ptrdata;\\n                assembly { ptrdata := and(mload(ptr), mask) }\\n\\n                while (ptrdata != needledata) {\\n                    if (ptr <= selfptr)\\n                        return selfptr;\\n                    ptr--;\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\n                }\\n                return ptr + needlelen;\\n            } else {\\n                // For long needles, use hashing\\n                bytes32 hash;\\n                assembly { hash := keccak256(needleptr, needlelen) }\\n                ptr = selfptr + (selflen - needlelen);\\n                while (ptr >= selfptr) {\\n                    bytes32 testHash;\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\n                    if (hash == testHash)\\n                        return ptr + needlelen;\\n                    ptr -= 1;\\n                }\\n            }\\n        }\\n        return selfptr;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\n     *      if `needle` is not found.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len -= ptr - self._ptr;\\n        self._ptr = ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Modifies `self` to contain the part of the string from the start of\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\n     *      is not found, `self` is set to the empty slice.\\n     * @param self The slice to search and modify.\\n     * @param needle The text to search for.\\n     * @return `self`.\\n     */\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        self._len = ptr - self._ptr;\\n        return self;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and `token` to everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = self._ptr;\\n        token._len = ptr - self._ptr;\\n        if (ptr == self._ptr + self._len) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n            self._ptr = ptr + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything after the first\\n     *      occurrence of `needle`, and returning everything before it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` up to the first occurrence of `delim`.\\n     */\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        split(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and `token` to everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and `token` is set to the entirety of `self`.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @param token An output parameter to which the first token is written.\\n     * @return `token`.\\n     */\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\n        token._ptr = ptr;\\n        token._len = self._len - (ptr - self._ptr);\\n        if (ptr == self._ptr) {\\n            // Not found\\n            self._len = 0;\\n        } else {\\n            self._len -= token._len + needle._len;\\n        }\\n        return token;\\n    }\\n\\n    /*\\n     * @dev Splits the slice, setting `self` to everything before the last\\n     *      occurrence of `needle`, and returning everything after it. If\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\n     *      and the entirety of `self` is returned.\\n     * @param self The slice to split.\\n     * @param needle The text to search for in `self`.\\n     * @return The part of `self` after the last occurrence of `delim`.\\n     */\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\n        rsplit(self, needle, token);\\n    }\\n\\n    /*\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return The number of occurrences of `needle` found in `self`.\\n     */\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\n        while (ptr <= self._ptr + self._len) {\\n            cnt++;\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns True if `self` contains `needle`.\\n     * @param self The slice to search.\\n     * @param needle The text to search for in `self`.\\n     * @return True if `needle` is found in `self`, false otherwise.\\n     */\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\n    }\\n\\n    /*\\n     * @dev Returns a newly allocated string containing the concatenation of\\n     *      `self` and `other`.\\n     * @param self The first slice to concatenate.\\n     * @param other The second slice to concatenate.\\n     * @return The concatenation of the two strings.\\n     */\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\n        string memory ret = new string(self._len + other._len);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n        memcpy(retptr, self._ptr, self._len);\\n        memcpy(retptr + self._len, other._ptr, other._len);\\n        return ret;\\n    }\\n\\n    /*\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\n     *      newly allocated string.\\n     * @param self The delimiter to use.\\n     * @param parts A list of slices to join.\\n     * @return A newly allocated string containing all the slices in `parts`,\\n     *         joined with `self`.\\n     */\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\n        if (parts.length == 0)\\n            return \\\"\\\";\\n\\n        uint length = self._len * (parts.length - 1);\\n        for(uint i = 0; i < parts.length; i++)\\n            length += parts[i]._len;\\n\\n        string memory ret = new string(length);\\n        uint retptr;\\n        assembly { retptr := add(ret, 32) }\\n\\n        for(uint i = 0; i < parts.length; i++) {\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\n            retptr += parts[i]._len;\\n            if (i < parts.length - 1) {\\n                memcpy(retptr, self._ptr, self._len);\\n                retptr += self._len;\\n            }\\n        }\\n\\n        return ret;\\n    }\\n    // convert uint to string\\n    function toString(uint256 _i) internal pure returns (string memory) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 length;\\n        while (j != 0) {\\n            length++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(length);\\n        uint256 k = length - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x367c2e4919ce03e10f8167ad9389bfbbed1b5eaa1cd25b35104b58a62b4d891c\",\"license\":\"MIT\"},\"contracts/util/ViewExecutor.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport {RevertCaptureLib} from \\\"./RevertCaptureLib.sol\\\";\\n\\ncontract ViewExecutor {\\n    function encodeExecuteQuery(address viewLogic, bytes memory payload)\\n        internal\\n        pure\\n        returns (bytes memory retval)\\n    {\\n        retval = abi.encodeWithSignature(\\n            \\\"_executeQuery(address,bytes)\\\",\\n            viewLogic,\\n            payload\\n        );\\n    }\\n\\n    function query(address viewLogic, bytes memory payload)\\n        public\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory response) =\\n            address(this).call(encodeExecuteQuery(viewLogic, payload));\\n        if (success) revert(RevertCaptureLib.decodeError(response));\\n        return response;\\n    }\\n\\n    function _bubbleReturnData(bytes memory result)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        assembly {\\n            return(add(result, 0x20), mload(result))\\n        }\\n    }\\n\\n    function _bubbleRevertData(bytes memory result)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        assembly {\\n            revert(add(result, 0x20), mload(result))\\n        }\\n    }\\n\\n    function _executeQuery(address delegateTo, bytes memory callData)\\n        public\\n        returns (bytes memory)\\n    {\\n        require(\\n            msg.sender == address(this),\\n            \\\"unauthorized view layer delegation\\\"\\n        );\\n        (bool success, bytes memory retval) = delegateTo.delegatecall(callData);\\n\\n        if (success) _bubbleRevertData(retval);\\n        return _bubbleReturnData(retval);\\n    }\\n}\\n\",\"keccak256\":\"0x2be6accbe12de558df7ae7fe13f29df9f3d2647b7a5c9326c020403e0b47028f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135c8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80637b0472f0116100ad578063c0c53b8b11610071578063c0c53b8b146102f7578063de8f84ea14610313578063ead9a68d1461031d578063f2fde38b1461034d578063fd00430c1461036957610121565b80637b0472f0146102675780637c91ad02146102835780638da5cb5b1461029f578063a3242e02146102bd578063bab2f552146102d957610121565b8063382153e0116100f4578063382153e0146101c1578063383e50e7146101dd57806338ed85b01461020e5780634dce52aa1461023f578063715018a61461025d57610121565b80630ed1ada11461012657806323e3b730146101425780632e17de7814610172578063372500ab146101a2575b600080fd5b610140600480360381019061013b9190612a03565b610399565b005b61015c6004803603810190610157919061283a565b610625565b6040516101699190613092565b60405180910390f35b61018c60048036038101906101879190612939565b610727565b604051610199919061334e565b60405180910390f35b6101aa61072e565b6040516101b8929190613369565b60405180910390f35b6101db60048036038101906101d691906127af565b6107b1565b005b6101f760048036038101906101f29190612939565b6107c7565b604051610205929190613369565b60405180910390f35b61022860048036038101906102239190612786565b61084b565b604051610236929190613369565b60405180910390f35b610247610853565b604051610254919061334e565b60405180910390f35b610265610860565b005b610281600480360381019061027c919061298b565b61099d565b005b61029d6004803603810190610298919061298b565b6109a1565b005b6102a7610a21565b6040516102b4919061301e565b60405180910390f35b6102d760048036038101906102d29190612786565b610a4b565b005b6102e1610abc565b6040516102ee919061334e565b60405180910390f35b610311600480360381019061030c91906127eb565b610ac9565b005b61031b610dec565b005b61033760048036038101906103329190612786565b610e74565b604051610344919061334e565b60405180910390f35b61036760048036038101906103629190612786565b610ec0565b005b610383600480360381019061037e919061283a565b61106c565b6040516103909190613092565b60405180910390f35b6103a161113d565b73ffffffffffffffffffffffffffffffffffffffff166103bf610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c906131f6565b60405180910390fd5b600085111561042957846065600c01819055505b600084111561043d57836065600d01819055505b6000891115610462578860656006018190555060656006015442016065600501819055505b600088111561048757876065600a01819055506065600a015442016065600701819055505b600087111561052a57606560080154871461051f5760656018016065601b0154908060018154018082558091505060019003906000526020600020016000909190919091505560405180604001604052806065600e01548152602001606560080154815250606560190160006065601b0154815260200190815260200160002060008201518160000155602082015181600101559050505b866065600801819055505b600086111561053e57856065600901819055505b60018351016065600b0181905550670de0b6b3a7640000606560120160008081526020019081526020016000206000018190555060005b835181101561061957604051806060016040528085838151811061059557fe5b602002602001015181526020018383815181106105ae57fe5b602002602001015181526020018483815181106105c757fe5b6020026020010151815250606560120160006001840181526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508080600101915050610575565b50505050505050505050565b60603073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90613156565b60405180910390fd5b600060608473ffffffffffffffffffffffffffffffffffffffff16846040516106be9190613007565b600060405180830381855af49150503d80600081146106f9576040519150601f19603f3d011682016040523d82523d6000602084013e6106fe565b606091505b509150915081156107145761071281611145565b505b61071d8161114f565b9250505092915050565b6000919050565b60008061073961113d565b73ffffffffffffffffffffffffffffffffffffffff16610757610a21565b73ffffffffffffffffffffffffffffffffffffffff16146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906131f6565b60405180910390fd5b9091565b6107ba82610a4b565b6107c381610a4b565b5050565b6000806107d261113d565b73ffffffffffffffffffffffffffffffffffffffff166107f0610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d906131f6565b60405180910390fd5b915091565b600080915091565b60006065600d0154905090565b61086861113d565b73ffffffffffffffffffffffffffffffffffffffff16610886610a21565b73ffffffffffffffffffffffffffffffffffffffff16146108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d3906131f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5050565b6109a961113d565b73ffffffffffffffffffffffffffffffffffffffff166109c7610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a14906131f6565b60405180910390fd5b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab957610a896000611159565b610a936000611386565b610a9c816116ad565b610aa5816116bb565b610aae81611728565b50610ab8816117cc565b5b50565b6000606560000154905090565b600060019054906101000a900460ff1680610ae85750610ae7611862565b5b80610afe575060008054906101000a900460ff16155b610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490613196565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b8d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b95611873565b83606560020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ce0600073D5A0412a758804cB28A81f529FdC810cf7fe1e1e6313a9589c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2257600080fd5b505af4158015610c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5a919061288e565b73D5A0412a758804cB28A81f529FdC810cf7fe1e1e6352c7420d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c9e57600080fd5b505af4158015610cb2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cdb91906128b7565b611a04565b6065601a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620151806065600a018190555062ed4e006065600601819055508015610de65760008060016101000a81548160ff0219169083151502179055505b50505050565b610df461113d565b73ffffffffffffffffffffffffffffffffffffffff16610e12610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f906131f6565b60405180910390fd5b610e726001611386565b565b6000606560150160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ec861113d565b73ffffffffffffffffffffffffffffffffffffffff16610ee6610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f33906131f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa3906130f6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600060603073ffffffffffffffffffffffffffffffffffffffff166110938686611b15565b6040516110a09190613007565b6000604051808303816000865af19150503d80600081146110dd576040519150601f19603f3d011682016040523d82523d6000602084013e6110e2565b606091505b50915091508115611132576110f681611baf565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112991906130b4565b60405180910390fd5b809250505092915050565b600033905090565b6060815160208301fd5b6060815160208301f35b6000606560110160006065600001548152602001908152602001600020905081806111a357508060090160009054906101000a900460ff161580156111a2575060656007015442115b5b1561138257600060019050606560070154421115611200576111fd60016111ef6065600a01546111e160656007015442611cc490919063ffffffff16565b611d1490919063ffffffff16565b611d6a90919063ffffffff16565b90505b6065600a0154420160656007018190555061122f81606560080154028360030154611d6a90919063ffffffff16565b8260030181905550606560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19606560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683606560090154026040518363ffffffff1660e01b81526004016112c3929190613069565b600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b5050505060005b81811015611344576065600801548360070160008560040154815260200190815260200160002081905550826004016000815480929190600101919050555080806001019150506112f8565b50611364816065600e015402606560100154611d6a90919063ffffffff16565b606560100181905550806065601b0160008282540192505081905550505b5050565b8080611396575060656005015442115b156116aa576065600601544201606560050181905550600060656000016000815460010191905081905590506114976065601a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673D5A0412a758804cB28A81f529FdC810cf7fe1e1e6313a9589c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061288e565b83604051602001611479929190612fdb565b6040516020818303038152906040528051906020012060001c611dbf565b6065601101600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506065600a015442016065600701819055506065601101600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606560040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe4b84df826040518263ffffffff1660e01b81526004016115da919061334e565b600060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b5050505060016065601101600083815260200190815260200160002060040181905550600181146116a85760656011016000600183038152602001908152602001600020600101546065601101600083815260200190815260200160002060000181905550606560110160006001830381526020019081526020016000206001015460656011016000838152602001908152602001600020600101819055505b505b50565b6116b8606582611e5e565b50565b73c111c39b37f972De44Bd7E0C2bFfFa7F9F0f3A70633e75efd16065836040518363ffffffff1660e01b81526004016116f5929190613256565b60006040518083038186803b15801561170d57600080fd5b505af4158015611721573d6000803e3d6000fd5b5050505050565b600080611736836000611e6c565b905073c111c39b37f972De44Bd7E0C2bFfFa7F9F0f3A706346c52119606585846040518463ffffffff1660e01b8152600401611774939291906132d2565b60206040518083038186803b15801561178c57600080fd5b505af41580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190612962565b915050919050565b735986b6486c196B00cF450e470171e62B121747de635d8dc94f60658360008060006040518663ffffffff1660e01b815260040161180e95949392919061327f565b604080518083038186803b15801561182557600080fd5b505af4158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d91906129c7565b505050565b600061186d3061205b565b15905090565b600060019054906101000a900460ff16806118925750611891611862565b5b806118a8575060008054906101000a900460ff16155b6118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118de90613196565b60405180910390fd5b60008060019054906101000a900460ff161590508015611937576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600061194161113d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015611a015760008060016101000a81548160ff0219169083151502179055505b50565b60008084471015611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190613236565b60405180910390fd5b600083511415611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86906130d6565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b01906131b6565b60405180910390fd5b809150509392505050565b60608282604051602401611b2a929190613039565b6040516020818303038152906040527f23e3b730000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6060600082511415611bf8576040518060400160405280601c81526020017f636170747572656420656d7074792072657665727420627566666572000000008152509050611cbf565b6308c379a063ffffffff16611c22611c1d600060048661206e9092919063ffffffff16565b6120a4565b60001c63ffffffff161415611cbb576060611c4f611c4a6004856120ca90919063ffffffff16565b6120f6565b9050600081511415611c99576040518060400160405280601d81526020017f636170747572656420656d70747920726576657274206d657373616765000000815250915050611cbf565b606081806020019051810190611caf91906128f8565b90508092505050611cbf565b8190505b919050565b600082821115611d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0090613136565b60405180910390fd5b818303905092915050565b6000808211611d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4f90613176565b60405180910390fd5b818381611d6157fe5b04905092915050565b600080828401905083811015611db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dac90613116565b60405180910390fd5b8091505092915050565b60006060611dcc8461217a565b905060008360001b90508151602083018282826000f594505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4d90613216565b60405180910390fd5b505092915050565b611e68828261218d565b5050565b600080606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611ecd919061301e565b60206040518083038186803b158015611ee557600080fd5b505afa158015611ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1d9190612962565b9050600080735986b6486c196B00cF450e470171e62B121747de63f7ed8c3f60658789876040518563ffffffff1660e01b8152600401611f609493929190613309565b604080518083038186803b158015611f7757600080fd5b505af4158015611f8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611faf91906129c7565b91509150600081111561204f57606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac87836040518363ffffffff1660e01b815260040161201c929190613069565b600060405180830381600087803b15801561203657600080fd5b505af115801561204a573d6000803e3d6000fd5b505050505b81935050505092915050565b600080823b905060008111915050919050565b612076612592565b6120808484612265565b81600001818152505081816020018181525050828160400181815250509392505050565b600080826000015190506000836020015190506120c18282612275565b92505050919050565b6120d2612592565b81835110156120e057825191505b6120ee83838486510361206e565b905092915050565b60606000826020015190508067ffffffffffffffff8111801561211857600080fd5b506040519080825280601f01601f19166020018201604052801561214b5781602001600182028036833780820191505090505b5091506000836000015160001b9050600061216584612292565b905061217281838561229f565b505050919050565b606061218630836122e1565b9050919050565b60008260170160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156121f157670de0b6b3a764000081600001819055505b806008015483601b01541115612255576122486122358260050154612227846008015487601b0154611cc490919063ffffffff16565b61252290919063ffffffff16565b82600a0154611d6a90919063ffffffff16565b81600a0181905550612260565b600081600a01819055505b505050565b6000602082018301905092915050565b6000600180600884021b0380836020038503511691505092915050565b6000602082019050919050565b5b602081106122c357815183526020830192506020820191506020810390506122a0565b600180600883602003021b0380845116811984511617845250505050565b606080600067ffffffffffffffff811180156122fc57600080fd5b506040519080825280601f01601f19166020018201604052801561232f5781602001600182028036833780820191505090505b506040516024016123409190613092565b6040516020818303038152906040527f52e831dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050805160630167ffffffffffffffff811180156123da57600080fd5b506040519080825280601f01601f19166020018201604052801561240d5781602001600182028036833780820191505090505b5091507f3d3d606380380380913d393d73bebebebebebebebebebebebebebebebebebebe60208301526c010000000000000000000000008402602d8301527f5af4602a57600080fd5b602d8060366000396000f3363d3d373d3d3d363d73be60418301526c01000000000000000000000000830260608301527f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000607483015260005b815181101561251a578181815181106124c457fe5b602001015160f81c60f81b8360638301815181106124de57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506124af565b505092915050565b600080831415612535576000905061258c565b600082840290508284828161254657fe5b0414612587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257e906131d6565b60405180910390fd5b809150505b92915050565b60405180606001604052806000815260200160008152602001600081525090565b6000813590506125c28161354d565b92915050565b600082601f8301126125d957600080fd5b81356125ec6125e7826133bf565b613392565b9150818183526020840193506020810190508385602084028201111561261157600080fd5b60005b838110156126415781612627888261275c565b845260208401935060208301925050600181019050612614565b5050505092915050565b60008151905061265a81613564565b92915050565b600082601f83011261267157600080fd5b813561268461267f826133e7565b613392565b915080825260208301602083018583830111156126a057600080fd5b6126ab8382846134e6565b50505092915050565b600082601f8301126126c557600080fd5b81516126d86126d3826133e7565b613392565b915080825260208301602083018583830111156126f457600080fd5b6126ff8382846134f5565b50505092915050565b600082601f83011261271957600080fd5b815161272c61272782613413565b613392565b9150808252602083016020830185838301111561274857600080fd5b6127538382846134f5565b50505092915050565b60008135905061276b8161357b565b92915050565b6000815190506127808161357b565b92915050565b60006020828403121561279857600080fd5b60006127a6848285016125b3565b91505092915050565b600080604083850312156127c257600080fd5b60006127d0858286016125b3565b92505060206127e1858286016125b3565b9150509250929050565b60008060006060848603121561280057600080fd5b600061280e868287016125b3565b935050602061281f868287016125b3565b9250506040612830868287016125b3565b9150509250925092565b6000806040838503121561284d57600080fd5b600061285b858286016125b3565b925050602083013567ffffffffffffffff81111561287857600080fd5b61288485828601612660565b9150509250929050565b6000602082840312156128a057600080fd5b60006128ae8482850161264b565b91505092915050565b6000602082840312156128c957600080fd5b600082015167ffffffffffffffff8111156128e357600080fd5b6128ef848285016126b4565b91505092915050565b60006020828403121561290a57600080fd5b600082015167ffffffffffffffff81111561292457600080fd5b61293084828501612708565b91505092915050565b60006020828403121561294b57600080fd5b60006129598482850161275c565b91505092915050565b60006020828403121561297457600080fd5b600061298284828501612771565b91505092915050565b6000806040838503121561299e57600080fd5b60006129ac8582860161275c565b92505060206129bd8582860161275c565b9150509250929050565b600080604083850312156129da57600080fd5b60006129e885828601612771565b92505060206129f985828601612771565b9150509250929050565b60008060008060008060008060006101208a8c031215612a2257600080fd5b6000612a308c828d0161275c565b9950506020612a418c828d0161275c565b9850506040612a528c828d0161275c565b9750506060612a638c828d0161275c565b9650506080612a748c828d0161275c565b95505060a0612a858c828d0161275c565b94505060c08a013567ffffffffffffffff811115612aa257600080fd5b612aae8c828d016125c8565b93505060e08a013567ffffffffffffffff811115612acb57600080fd5b612ad78c828d016125c8565b9250506101008a013567ffffffffffffffff811115612af557600080fd5b612b018c828d016125c8565b9150509295985092959850929598565b612b1a81613482565b82525050565b612b2981613482565b82525050565b612b3881613494565b82525050565b612b4f612b4a826134a0565b613528565b82525050565b6000612b608261343f565b612b6a8185613455565b9350612b7a8185602086016134f5565b612b838161353c565b840191505092915050565b6000612b998261343f565b612ba38185613466565b9350612bb38185602086016134f5565b80840191505092915050565b612bc8816134d4565b82525050565b6000612bd98261344a565b612be38185613471565b9350612bf38185602086016134f5565b612bfc8161353c565b840191505092915050565b6000612c14602083613471565b91507f437265617465323a2062797465636f6465206c656e677468206973207a65726f6000830152602082019050919050565b6000612c54602683613471565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612cba601b83613471565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000612cfa601e83613471565b91507f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006000830152602082019050919050565b6000612d3a602283613471565b91507f756e617574686f72697a65642076696577206c617965722064656c656761746960008301527f6f6e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612da0601a83613471565b91507f536166654d6174683a206469766973696f6e206279207a65726f0000000000006000830152602082019050919050565b6000612de0602e83613471565b91507f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008301527f647920696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b6000612e46601983613471565b91507f437265617465323a204661696c6564206f6e206465706c6f79000000000000006000830152602082019050919050565b6000612e86602183613471565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612eec602083613471565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000612f2c600e83613471565b91507f63726561746532206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000612f6c601d83613471565b91507f437265617465323a20696e73756666696369656e742062616c616e63650000006000830152602082019050919050565b8082525050565b612faf816134ca565b82525050565b612fbe816134ca565b82525050565b612fd5612fd0826134ca565b613532565b82525050565b6000612fe78285612b3e565b602082019150612ff78284612fc4565b6020820191508190509392505050565b60006130138284612b8e565b915081905092915050565b60006020820190506130336000830184612b11565b92915050565b600060408201905061304e6000830185612b11565b81810360208301526130608184612b55565b90509392505050565b600060408201905061307e6000830185612b11565b61308b6020830184612fa6565b9392505050565b600060208201905081810360008301526130ac8184612b55565b905092915050565b600060208201905081810360008301526130ce8184612bce565b905092915050565b600060208201905081810360008301526130ef81612c07565b9050919050565b6000602082019050818103600083015261310f81612c47565b9050919050565b6000602082019050818103600083015261312f81612cad565b9050919050565b6000602082019050818103600083015261314f81612ced565b9050919050565b6000602082019050818103600083015261316f81612d2d565b9050919050565b6000602082019050818103600083015261318f81612d93565b9050919050565b600060208201905081810360008301526131af81612dd3565b9050919050565b600060208201905081810360008301526131cf81612e39565b9050919050565b600060208201905081810360008301526131ef81612e79565b9050919050565b6000602082019050818103600083015261320f81612edf565b9050919050565b6000602082019050818103600083015261322f81612f1f565b9050919050565b6000602082019050818103600083015261324f81612f5f565b9050919050565b600060408201905061326b6000830185612f9f565b6132786020830184612b20565b9392505050565b600060a0820190506132946000830188612f9f565b6132a16020830187612b20565b6132ae6040830186612bbf565b6132bb6060830185612b2f565b6132c86080830184612b2f565b9695505050505050565b60006060820190506132e76000830186612f9f565b6132f46020830185612b20565b6133016040830184612fb5565b949350505050565b600060808201905061331e6000830187612f9f565b61332b6020830186612b2f565b6133386040830185612b20565b6133456060830184612fb5565b95945050505050565b60006020820190506133636000830184612fa6565b92915050565b600060408201905061337e6000830185612fa6565b61338b6020830184612fa6565b9392505050565b6000604051905081810181811067ffffffffffffffff821117156133b557600080fd5b8060405250919050565b600067ffffffffffffffff8211156133d657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156133fe57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561342a57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061348d826134aa565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006134df826134ca565b9050919050565b82818337600083830152505050565b60005b838110156135135780820151818401526020810190506134f8565b83811115613522576000848401525b50505050565b6000819050919050565b6000819050919050565b6000601f19601f8301169050919050565b61355681613482565b811461356157600080fd5b50565b61356d816134a0565b811461357857600080fd5b50565b613584816134ca565b811461358f57600080fd5b5056fea2646970667358221220779484ae79f3f01d7141c1e55a61a28561372ce3243f47bd389e77663cb368fc64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80637b0472f0116100ad578063c0c53b8b11610071578063c0c53b8b146102f7578063de8f84ea14610313578063ead9a68d1461031d578063f2fde38b1461034d578063fd00430c1461036957610121565b80637b0472f0146102675780637c91ad02146102835780638da5cb5b1461029f578063a3242e02146102bd578063bab2f552146102d957610121565b8063382153e0116100f4578063382153e0146101c1578063383e50e7146101dd57806338ed85b01461020e5780634dce52aa1461023f578063715018a61461025d57610121565b80630ed1ada11461012657806323e3b730146101425780632e17de7814610172578063372500ab146101a2575b600080fd5b610140600480360381019061013b9190612a03565b610399565b005b61015c6004803603810190610157919061283a565b610625565b6040516101699190613092565b60405180910390f35b61018c60048036038101906101879190612939565b610727565b604051610199919061334e565b60405180910390f35b6101aa61072e565b6040516101b8929190613369565b60405180910390f35b6101db60048036038101906101d691906127af565b6107b1565b005b6101f760048036038101906101f29190612939565b6107c7565b604051610205929190613369565b60405180910390f35b61022860048036038101906102239190612786565b61084b565b604051610236929190613369565b60405180910390f35b610247610853565b604051610254919061334e565b60405180910390f35b610265610860565b005b610281600480360381019061027c919061298b565b61099d565b005b61029d6004803603810190610298919061298b565b6109a1565b005b6102a7610a21565b6040516102b4919061301e565b60405180910390f35b6102d760048036038101906102d29190612786565b610a4b565b005b6102e1610abc565b6040516102ee919061334e565b60405180910390f35b610311600480360381019061030c91906127eb565b610ac9565b005b61031b610dec565b005b61033760048036038101906103329190612786565b610e74565b604051610344919061334e565b60405180910390f35b61036760048036038101906103629190612786565b610ec0565b005b610383600480360381019061037e919061283a565b61106c565b6040516103909190613092565b60405180910390f35b6103a161113d565b73ffffffffffffffffffffffffffffffffffffffff166103bf610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040c906131f6565b60405180910390fd5b600085111561042957846065600c01819055505b600084111561043d57836065600d01819055505b6000891115610462578860656006018190555060656006015442016065600501819055505b600088111561048757876065600a01819055506065600a015442016065600701819055505b600087111561052a57606560080154871461051f5760656018016065601b0154908060018154018082558091505060019003906000526020600020016000909190919091505560405180604001604052806065600e01548152602001606560080154815250606560190160006065601b0154815260200190815260200160002060008201518160000155602082015181600101559050505b866065600801819055505b600086111561053e57856065600901819055505b60018351016065600b0181905550670de0b6b3a7640000606560120160008081526020019081526020016000206000018190555060005b835181101561061957604051806060016040528085838151811061059557fe5b602002602001015181526020018383815181106105ae57fe5b602002602001015181526020018483815181106105c757fe5b6020026020010151815250606560120160006001840181526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508080600101915050610575565b50505050505050505050565b60603073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90613156565b60405180910390fd5b600060608473ffffffffffffffffffffffffffffffffffffffff16846040516106be9190613007565b600060405180830381855af49150503d80600081146106f9576040519150601f19603f3d011682016040523d82523d6000602084013e6106fe565b606091505b509150915081156107145761071281611145565b505b61071d8161114f565b9250505092915050565b6000919050565b60008061073961113d565b73ffffffffffffffffffffffffffffffffffffffff16610757610a21565b73ffffffffffffffffffffffffffffffffffffffff16146107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a4906131f6565b60405180910390fd5b9091565b6107ba82610a4b565b6107c381610a4b565b5050565b6000806107d261113d565b73ffffffffffffffffffffffffffffffffffffffff166107f0610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d906131f6565b60405180910390fd5b915091565b600080915091565b60006065600d0154905090565b61086861113d565b73ffffffffffffffffffffffffffffffffffffffff16610886610a21565b73ffffffffffffffffffffffffffffffffffffffff16146108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d3906131f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5050565b6109a961113d565b73ffffffffffffffffffffffffffffffffffffffff166109c7610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a14906131f6565b60405180910390fd5b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab957610a896000611159565b610a936000611386565b610a9c816116ad565b610aa5816116bb565b610aae81611728565b50610ab8816117cc565b5b50565b6000606560000154905090565b600060019054906101000a900460ff1680610ae85750610ae7611862565b5b80610afe575060008054906101000a900460ff16155b610b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3490613196565b60405180910390fd5b60008060019054906101000a900460ff161590508015610b8d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610b95611873565b83606560020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ce0600073__$b9ebe37ed5c148efa6c66949ea04801adb$__6313a9589c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2257600080fd5b505af4158015610c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5a919061288e565b73__$b9ebe37ed5c148efa6c66949ea04801adb$__6352c7420d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610c9e57600080fd5b505af4158015610cb2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cdb91906128b7565b611a04565b6065601a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606560010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620151806065600a018190555062ed4e006065600601819055508015610de65760008060016101000a81548160ff0219169083151502179055505b50505050565b610df461113d565b73ffffffffffffffffffffffffffffffffffffffff16610e12610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f906131f6565b60405180910390fd5b610e726001611386565b565b6000606560150160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ec861113d565b73ffffffffffffffffffffffffffffffffffffffff16610ee6610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f33906131f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa3906130f6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600060603073ffffffffffffffffffffffffffffffffffffffff166110938686611b15565b6040516110a09190613007565b6000604051808303816000865af19150503d80600081146110dd576040519150601f19603f3d011682016040523d82523d6000602084013e6110e2565b606091505b50915091508115611132576110f681611baf565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112991906130b4565b60405180910390fd5b809250505092915050565b600033905090565b6060815160208301fd5b6060815160208301f35b6000606560110160006065600001548152602001908152602001600020905081806111a357508060090160009054906101000a900460ff161580156111a2575060656007015442115b5b1561138257600060019050606560070154421115611200576111fd60016111ef6065600a01546111e160656007015442611cc490919063ffffffff16565b611d1490919063ffffffff16565b611d6a90919063ffffffff16565b90505b6065600a0154420160656007018190555061122f81606560080154028360030154611d6a90919063ffffffff16565b8260030181905550606560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19606560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683606560090154026040518363ffffffff1660e01b81526004016112c3929190613069565b600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b5050505060005b81811015611344576065600801548360070160008560040154815260200190815260200160002081905550826004016000815480929190600101919050555080806001019150506112f8565b50611364816065600e015402606560100154611d6a90919063ffffffff16565b606560100181905550806065601b0160008282540192505081905550505b5050565b8080611396575060656005015442115b156116aa576065600601544201606560050181905550600060656000016000815460010191905081905590506114976065601a0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673__$b9ebe37ed5c148efa6c66949ea04801adb$__6313a9589c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061288e565b83604051602001611479929190612fdb565b6040516020818303038152906040528051906020012060001c611dbf565b6065601101600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506065600a015442016065600701819055506065601101600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606560040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606560040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe4b84df826040518263ffffffff1660e01b81526004016115da919061334e565b600060405180830381600087803b1580156115f457600080fd5b505af1158015611608573d6000803e3d6000fd5b5050505060016065601101600083815260200190815260200160002060040181905550600181146116a85760656011016000600183038152602001908152602001600020600101546065601101600083815260200190815260200160002060000181905550606560110160006001830381526020019081526020016000206001015460656011016000838152602001908152602001600020600101819055505b505b50565b6116b8606582611e5e565b50565b73__$14b07406e5b0a9d177e7e9c663254f4e6d$__633e75efd16065836040518363ffffffff1660e01b81526004016116f5929190613256565b60006040518083038186803b15801561170d57600080fd5b505af4158015611721573d6000803e3d6000fd5b5050505050565b600080611736836000611e6c565b905073__$14b07406e5b0a9d177e7e9c663254f4e6d$__6346c52119606585846040518463ffffffff1660e01b8152600401611774939291906132d2565b60206040518083038186803b15801561178c57600080fd5b505af41580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190612962565b915050919050565b73__$88d5230eb4bb3b63b43ced9ece2ae8cd74$__635d8dc94f60658360008060006040518663ffffffff1660e01b815260040161180e95949392919061327f565b604080518083038186803b15801561182557600080fd5b505af4158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d91906129c7565b505050565b600061186d3061205b565b15905090565b600060019054906101000a900460ff16806118925750611891611862565b5b806118a8575060008054906101000a900460ff16155b6118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118de90613196565b60405180910390fd5b60008060019054906101000a900460ff161590508015611937576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600061194161113d565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015611a015760008060016101000a81548160ff0219169083151502179055505b50565b60008084471015611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190613236565b60405180910390fd5b600083511415611a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86906130d6565b60405180910390fd5b8383516020850187f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b01906131b6565b60405180910390fd5b809150509392505050565b60608282604051602401611b2a929190613039565b6040516020818303038152906040527f23e3b730000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6060600082511415611bf8576040518060400160405280601c81526020017f636170747572656420656d7074792072657665727420627566666572000000008152509050611cbf565b6308c379a063ffffffff16611c22611c1d600060048661206e9092919063ffffffff16565b6120a4565b60001c63ffffffff161415611cbb576060611c4f611c4a6004856120ca90919063ffffffff16565b6120f6565b9050600081511415611c99576040518060400160405280601d81526020017f636170747572656420656d70747920726576657274206d657373616765000000815250915050611cbf565b606081806020019051810190611caf91906128f8565b90508092505050611cbf565b8190505b919050565b600082821115611d09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0090613136565b60405180910390fd5b818303905092915050565b6000808211611d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4f90613176565b60405180910390fd5b818381611d6157fe5b04905092915050565b600080828401905083811015611db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dac90613116565b60405180910390fd5b8091505092915050565b60006060611dcc8461217a565b905060008360001b90508151602083018282826000f594505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4d90613216565b60405180910390fd5b505092915050565b611e68828261218d565b5050565b600080606560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611ecd919061301e565b60206040518083038186803b158015611ee557600080fd5b505afa158015611ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1d9190612962565b905060008073__$88d5230eb4bb3b63b43ced9ece2ae8cd74$",
  "libraries": {
    "pCNFIFactoryLib": "0xD5A0412a758804cB28A81f529FdC810cf7fe1e1e",
    "UpdateToLastLib": "0xc111c39b37f972De44Bd7E0C2bFfFa7F9F0f3A70",
    "UpdateRedeemableLib": "0x5986b6486c196B00cF450e470171e62B121747de",
    "CalculateRewardsLib": "0xC13F3bfb94916974C3f5C0407FEbDBfc62C7cfdd"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 568,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1520,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6368,
        "contract": "contracts/staking/StakingController.sol:StakingController",
        "label": "isolate",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Isolate)4700_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CNFITreasury)9719": {
        "encoding": "inplace",
        "label": "contract CNFITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(ICNFI)2441": {
        "encoding": "inplace",
        "label": "contract ICNFI",
        "numberOfBytes": "20"
      },
      "t_contract(pCNFI)9561": {
        "encoding": "inplace",
        "label": "contract pCNFI",
        "numberOfBytes": "20"
      },
      "t_contract(sCNFI)9655": {
        "encoding": "inplace",
        "label": "contract sCNFI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(DailyUser)4748_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingControllerLib.DailyUser)",
        "numberOfBytes": "32",
        "value": "t_struct(DailyUser)4748_storage"
      },
      "t_mapping(t_address,t_struct(User)4721_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingControllerLib.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)4721_storage"
      },
      "t_mapping(t_address,t_struct(UserWeightChanges)4931_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingControllerLib.UserWeightChanges)",
        "numberOfBytes": "32",
        "value": "t_struct(UserWeightChanges)4931_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Cycle)4832_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingControllerLib.Cycle)",
        "numberOfBytes": "32",
        "value": "t_struct(Cycle)4832_storage"
      },
      "t_mapping(t_uint256,t_struct(InflateByChanged)4901_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingControllerLib.InflateByChanged)",
        "numberOfBytes": "32",
        "value": "t_struct(InflateByChanged)4901_storage"
      },
      "t_mapping(t_uint256,t_struct(Tier)4839_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingControllerLib.Tier)",
        "numberOfBytes": "32",
        "value": "t_struct(Tier)4839_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Cycle)4832_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.Cycle",
        "members": [
          {
            "astId": 4807,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "totalWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4809,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "totalRawWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4811,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "pCnfiToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4813,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "reserved",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4815,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "day",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4817,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "inflateBy",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4821,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "users",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(User)4721_storage)"
          },
          {
            "astId": 4825,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cnfiRewards",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4829,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "pcnfiRewards",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4831,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "canUnstake",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(DailyUser)4748_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.DailyUser",
        "members": [
          {
            "astId": 4723,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "multiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4725,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cycleEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4727,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cyclesHeld",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4729,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "redeemable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4731,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "start",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4733,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "weight",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4735,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "claimed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4737,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "commitment",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4739,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "lastDaySeen",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4741,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cumulativeTotalWeight",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4743,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cumulativeRewardWeight",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4745,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "lastTotalWeight",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4747,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "currentTier",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(InflateByChanged)4901_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.InflateByChanged",
        "members": [
          {
            "astId": 4898,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "totalWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4900,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "previousAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Isolate)4700_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.Isolate",
        "members": [
          {
            "astId": 4628,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "currentCycle",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4630,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cnfiTreasury",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(CNFITreasury)9719"
          },
          {
            "astId": 4632,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cnfi",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ICNFI)2441"
          },
          {
            "astId": 4634,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "sCnfi",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(sCNFI)9655"
          },
          {
            "astId": 4636,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "pCnfi",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(pCNFI)9561"
          },
          {
            "astId": 4638,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "nextCycleTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4640,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cycleInterval",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4642,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "nextTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4644,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "inflateBy",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4646,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "inflatepcnfiBy",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4648,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "rewardInterval",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4650,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "tiersLength",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 4652,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "baseUnstakePenalty",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 4654,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "commitmentViolationPenalty",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 4656,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "totalWeight",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 4658,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "lastTotalWeight",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 4660,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cumulativeTotalWeight",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 4664,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cycles",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Cycle)4832_storage)"
          },
          {
            "astId": 4668,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "tiers",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_struct(Tier)4839_storage)"
          },
          {
            "astId": 4672,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "lockCommitments",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4676,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "bonusesAccrued",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4680,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "dailyBonusesAccrued",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4684,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "weightChanges",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_struct(UserWeightChanges)4931_storage)"
          },
          {
            "astId": 4688,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "dailyUsers",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_struct(DailyUser)4748_storage)"
          },
          {
            "astId": 4691,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "inflateByChanged",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4695,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "inflateByValues",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_struct(InflateByChanged)4901_storage)"
          },
          {
            "astId": 4697,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "pCnfiImplementation",
            "offset": 0,
            "slot": "26",
            "type": "t_address"
          },
          {
            "astId": 4699,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "currentDay",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "896"
      },
      "t_struct(Tier)4839_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.Tier",
        "members": [
          {
            "astId": 4834,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "multiplier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4836,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "minimum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4838,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cycles",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(User)4721_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.User",
        "members": [
          {
            "astId": 4702,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "currentWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4704,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "minimumWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4706,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "dailyWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4708,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "multiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4710,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "redeemable",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4712,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "daysClaimed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4714,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "start",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4716,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "seen",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 4718,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "currentTier",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4720,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "cyclesHeld",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(UserWeightChanges)4931_storage": {
        "encoding": "inplace",
        "label": "struct StakingControllerLib.UserWeightChanges",
        "members": [
          {
            "astId": 4928,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "changes",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 4930,
            "contract": "contracts/staking/StakingController.sol:StakingController",
            "label": "totalCyclesSeen",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
