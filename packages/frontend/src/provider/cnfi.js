/* eslint-disable no-unused-vars */
// "use strict";
// import React from "react";
import { BigNumber, ethers } from "ethers";
import axios from "axios";
import { makeEthersBase } from "ethers-base";
import Query from "@connectfinancial/staking-controller-etl/artifacts/contracts/ArbQuery.sol/ArbQuery.json";
// import Query from '@connectfinancial/connect-token/artifacts/contracts/view/Query.sol/Query.json';
import { ProxyAdmin } from "@connectfinancial/connect-token/lib/proxy-admin.js";
import { ConnectToken } from "@connectfinancial/connect-token/lib/main";
//import MintCNFI from '@connectfinancial/connect-token/artifacts/contracts/token/MintCNFI.sol/MintCNFI';
const deployments = require("@connectfinancial/connect-token/deployments/deployments.json");
const arbDeployments = require("@connectfinancial/staking-controller-etl/deployments/deployments.json");

const events = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountToRedeem",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bonuses",
        type: "uint256",
      },
    ],
    name: "Redeemed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "commitmentTier",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minimum",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "timeLocked",
        type: "bool",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slashed",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
];

// const INFURA_PROJECT_ID =
//   process.env.REACT_APP_INFURA_PROJECT_ID || "c1a9ac9c4eaa432d99aa1dbf8ca7552c";
// const INFURA_URL = `https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`;

export function getCNFI({ signer, chain }) {
  // eslint-disable-next-line no-unused-vars
  const makeStakingController = (deployment, query) => {
    return class StakingController extends makeEthersBase(deployment) {
      dataView = async (account) => {
        const qFac = new ethers.ContractFactory(
          query.abi,
          query.bytecode,
          this.signer
        );
        // await qFac.deploy(this.address, account)
        // if (!this.signer) {
        //   data = await signer.call({
        //     data: qFac.getDeployTransaction(
        //       this.address,
        //       account ? account : ethers.constants.AddressZero
        //     ).data,
        //   });
        // } else {
        //   data = await this.signer.call({
        //     data: qFac.getDeployTransaction(this.address, account).data,
        //   });
        // }
        const deployData = qFac.getDeployTransaction(this.address, account);
        const checkData = signer.checkTransaction(deployData);
        const data = await signer.call(checkData);
        console.log("DeployTransaction Data", data);
        // const data =
        //   "0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000627cd71d00000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059d380654dcd92155c7e4293f96fcea5b6c29bad000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010f0cf064dd592000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000636a251d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000627cd71d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eff59ee833b3000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000001158e460913d000000000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000120a871cc002000000000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000136dcc951d8c0000000000000000000000000000000000000000000000002a5a058fc295ed0000000000000000000000000000000000000000000000000000000000000000000008";
        // const unsignedTx = qFac.getDeployTransaction(this.address, account);
        // data = await this.signer.call(unsignedTx);
        // console.log(data);
        const decodedResult = qFac.interface.decodeFunctionResult(
          "decodeResponse",
          data
        );
        console.log("decoded result", decodedResult);
        const [result, amountToRedeem, bonuses, timestamp] = decodedResult;
        const decoded = qFac.interface.decodeFunctionResult("render", result);
        console.log("render result", decoded);
        return Object.assign({}, decoded, {
          amountToRedeem,
          redeemable: amountToRedeem,
          bonuses,
        });
      };

      logsView = async (account) => {
        if (
          !account ||
          account.length === 0 ||
          account === ethers.constants.AddressZero
        )
          return [];
        // const data = await (this.signer
        //   ? this.signer.provider
        //   : signer
        // ).getLogs({
        //   ...this.filters.Redeemed(account),
        //   fromBlock: process.env.REACT_APP_GENESIS || 0,
        // });
        const data = [];
        return data.map((d) => this.interface.parseLog(d));
      };

      loadView = async (account) => {
        /*
        if (window.debug && window.debug.fauxUser)
          account = window.debug.fauxUser;
        if (!account) account = ethers.constants.AddressZero;

        const [data, logs] = await Promise.all([
          this.dataView(account),
          this.logsView(account),
        ]);

        if (data) {
          const totalEarned = logs
            .reduce(
              (total, log) => total.add(log.args.amountToRedeem || "0"),
              ethers.BigNumber.from("0")
            )
            .add(data.dailyUser.redeemable || "0");

          const totalBonuses = logs.reduce(
            (total, log) =>
              log.name === "Redeemed" ? total.add(log.args.bonuses) : total,
            ethers.BigNumber.from(data.returnstats.bonuses || "0")
          );
          const result = {
            ...data,
            user: Object.assign({}, data.dailyUser),
            totalBonuses,
            totalEarned,
            earned: totalEarned.sub(data.returnstats.bonuses || "0"),
          };
          if (window.debug && window.debug.logView) console.log(result);
          return result;
        }
        */
        const _address = account.slice(2).toLowerCase();
        const res = await axios.post(
          "https://arbitrum-mainnet.infura.io/v3/84b153ad9f404526a98a76a091d6203d",
          {
            method: "eth_call",
            params: [
              {
                // from: account,
                value: "0x1000000000000000000",
                gas: "0x1bd7c",
                to: this.address,
                data: "0x19e00849000000000000000000000000" + _address,
              },
              "latest",
              {
                [this.address]: {
                  // deployed bytecode
                  code: "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806319e008491461003b578063c7b9a23f14610070575b600080fd5b61005560048036038101906100509190610ad9565b61008e565b60405161006796959493929190610f58565b60405180910390f35b6100786107fa565b6040516100859190610fc5565b60405180910390f35b61009661091e565b61009e61093f565b6100a661099c565b6100ae610a0b565b606060008060006100bd610a73565b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161461064357600060170160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806101a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c8201548152505095506000600b015467ffffffffffffffff811180156101df57600080fd5b5060405190808252806020026020018201604052801561021957816020015b61020661091e565b8152602001906001900390816101fe5790505b5094506000600190505b6000600b01548110156102935760006012016000828152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505086828151811061027b57fe5b60200260200101819052508080600101915050610223565b50600060120160008760e0015181526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050985060006011016000806000015481526020019081526020016000209250600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b81526004016103539190610f3d565b60206040518083038186803b15801561036b57600080fd5b505afa15801561037f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a39190610b02565b8760600181815250508560e001518760000181815250506000800154915085604001518761018001818152505060008060160160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010154886101a00181815250506104378760e00151886101800151610806565b826040018181525050600060120160008360400151815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250508260600181905250600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016104e99190610f3d565b60206040518083038186803b15801561050157600080fd5b505afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610b02565b826000018181525050600060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b81526004016105a09190610f3d565b60206040518083038186803b1580156105b857600080fd5b505afa1580156105cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f09190610b02565b88608001818152505061061b60006106118961018001518a60e00151610806565b8a60600151610820565b945086606001518860c001818152505061063660008c610889565b90508860e0018181525050505b6000601101600080600001548152602001908152602001600020925060405180610100016040528084600001548152602001846001015481526020018460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184600301548152602001846004015481526020018460090160009054906101000a900460ff161515815260200183815260200160008001548152509750600060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f9190610b02565b8760200181815250506000600801548760400181815250506000600c0154876101400181815250506000600d0154876101200181815250506000600e0154876101600181815250508060600151985050505091939550919395565b60008060000154905090565b6000818310156108165781610818565b825b905092915050565b60005b83600b015483101561086a578184601201600085815260200190815260200160002060010154111561085d5782806001900393505061086a565b8280600101935050610823565b83600b0154831061087f578280600190039350505b8290509392505050565b6000808360170160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491508360150160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509250929050565b60405180606001604052806000815260200160008152602001600081525090565b6040518061010001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160001515815260200160008152602001600081525090565b604051806101c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806101a00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001610a9b61091e565b815260200160008152602001600081525090565b600081359050610abe81611061565b92915050565b600081519050610ad381611078565b92915050565b600060208284031215610aeb57600080fd5b6000610af984828501610aaf565b91505092915050565b600060208284031215610b1457600080fd5b6000610b2284828501610ac4565b91505092915050565b6000610b378383610e9b565b60608301905092915050565b610b4c81611019565b82525050565b610b5b81611019565b82525050565b6000610b6c82610ff0565b610b768185611008565b9350610b8183610fe0565b8060005b83811015610bb2578151610b998882610b2b565b9750610ba483610ffb565b925050600181019050610b85565b5085935050505092915050565b610bc88161102b565b82525050565b6101a082016000820151610be56000850182610f1f565b506020820151610bf86020850182610f1f565b506040820151610c0b6040850182610f1f565b506060820151610c1e6060850182610f1f565b506080820151610c316080850182610f1f565b5060a0820151610c4460a0850182610f1f565b5060c0820151610c5760c0850182610f1f565b5060e0820151610c6a60e0850182610f1f565b50610100820151610c7f610100850182610f1f565b50610120820151610c94610120850182610f1f565b50610140820151610ca9610140850182610f1f565b50610160820151610cbe610160850182610f1f565b50610180820151610cd3610180850182610f1f565b50505050565b61010082016000820151610cf06000850182610f1f565b506020820151610d036020850182610f1f565b506040820151610d166040850182610b43565b506060820151610d296060850182610f1f565b506080820151610d3c6080850182610f1f565b5060a0820151610d4f60a0850182610bbf565b5060c0820151610d6260c0850182610f1f565b5060e0820151610d7560e0850182610f1f565b50505050565b6101c082016000820151610d926000850182610f1f565b506020820151610da56020850182610f1f565b506040820151610db86040850182610f1f565b506060820151610dcb6060850182610f1f565b506080820151610dde6080850182610f1f565b5060a0820151610df160a0850182610f1f565b5060c0820151610e0460c0850182610f1f565b5060e0820151610e1760e0850182610f1f565b50610100820151610e2c610100850182610f1f565b50610120820151610e41610120850182610f1f565b50610140820151610e56610140850182610f1f565b50610160820151610e6b610160850182610f1f565b50610180820151610e80610180850182610f1f565b506101a0820151610e956101a0850182610f1f565b50505050565b606082016000820151610eb16000850182610f1f565b506020820151610ec46020850182610f1f565b506040820151610ed76040850182610f1f565b50505050565b606082016000820151610ef36000850182610f1f565b506020820151610f066020850182610f1f565b506040820151610f196040850182610f1f565b50505050565b610f2881611057565b82525050565b610f3781611057565b82525050565b6000602082019050610f526000830184610b52565b92915050565b600061050082019050610f6e6000830189610edd565b610f7b6060830188610cd9565b610f89610160830187610d7b565b610f97610320830186610bce565b8181036104c0830152610faa8185610b61565b9050610fba6104e0830184610f2e565b979650505050505050565b6000602082019050610fda6000830184610f2e565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600061102482611037565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61106a81611019565b811461107557600080fd5b50565b61108181611057565b811461108c57600080fd5b5056fea264697066735822122086f00e0931f687437bea2fcd40a35f87a2426dec7bbcd7fe2a120fa68245172864736f6c634300060c0033",
                  balance: "0x1000000000000000000",
                },
              },
            ],
            id: 1,
            jsonrpc: "2.0",
          }
        );
        console.log(res);
      };
    };
  };

  const getContracts = () => {
    const deploymentsForChain = Object.keys(deployments[chain]);
    const relavantDeployments = deploymentsForChain.includes("localhost")
      ? "localhost"
      : deploymentsForChain[0];
    return {
      ...deployments[chain][relavantDeployments].contracts,
      ...(chain === 42161
        ? arbDeployments[chain][relavantDeployments].contracts
        : {}),
    };
  };

  const getConnectToken = (deployment) => {
    return (
      deployment.ConnectTokenTest ||
      deployment.ConnectTokenL2 ||
      deployment.ConnectToken
    );
  };

  const getStakingController = (deployment) => {
    return (
      deployment.StakingControllerTest ||
      deployment.StakingControllerArb ||
      deployment.StakingController
    );
  };

  const getsCNFI = (deployment) => {
    return deployment.sCNFI;
  };

  const contracts = () => {
    const deployedContracts = getContracts(chain);
    const connectToken = getConnectToken(deployedContracts);
    // const cnfi = new ConnectToken(connectToken.address, signer);
    const cnfi = new ethers.Contract(
      connectToken.address,
      [...connectToken.abi, ...events],
      signer
    );
    const StakingController = getStakingController(deployedContracts);
    const SCNFI = getsCNFI(deployedContracts);
    // const scnfi = new ConnectToken(SCNFI.address, signer);
    const scnfi = new ethers.Contract(
      SCNFI.address,
      [...SCNFI.abi, ...events],
      signer
    );
    // const staking = new ethers.Contract(
    //   StakingController.address,
    //   [...StakingController.abi, ...events],
    //   signer
    // );
    const staking = new (makeStakingController(
      {
        ...StakingController,
        abi: [...StakingController.abi, ...events],
      },
      Query
    ))(StakingController.address, signer);
    window.contracts = { cnfi, staking };
    return {
      cnfi,
      staking,
      scnfi,
    };
  };

  const getAdmin = async (contracts) => {
    const connectToken = new ConnectToken(contracts.cnfi.address, signer);
    const admin = await connectToken.getAdmin();
    const proxyAdmin = new ProxyAdmin(admin, signer);
    const owner = await proxyAdmin.owner();
    await proxyAdmin.provider.send("hardhat_impersonateAccount", [owner]);
    const _signer = await proxyAdmin.provider.getSigner(owner);
    return new ProxyAdmin(owner, _signer);
  };

  return { contracts: contracts(), getAdmin };
}
